{
    "version": "https://jsonfeed.org/version/1",
    "title": "ay的博客",
    "subtitle": "ay的博客",
    "icon": "https://aynya.github.io/images/favicon.ico",
    "description": "ay的博客",
    "home_page_url": "https://aynya.github.io",
    "items": [
        {
            "id": "https://aynya.github.io/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%93%8D%E4%BD%9C/",
            "url": "https://aynya.github.io/%E9%A1%B9%E7%9B%AE%E6%9E%84%E5%BB%BA%E6%93%8D%E4%BD%9C/",
            "title": "项目构建操作",
            "date_published": "2025-03-09T15:16:28.000Z",
            "content_html": "<h3 id=\"使用vite-创建项目\"><a class=\"anchor\" href=\"#使用vite-创建项目\">#</a> 使用 Vite 创建项目</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># npm 6.x (outdated, but still used by some):</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> create vite@latest part1 <span class=\"token parameter variable\">--template</span> react</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># npm 7+, extra double-dash is needed:</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">npm</span> create vite@latest part1 -- <span class=\"token parameter variable\">--template</span> react</pre></td></tr></table></figure><h4 id=\"进入该文件夹并安装依赖\"><a class=\"anchor\" href=\"#进入该文件夹并安装依赖\">#</a> 进入该文件夹并安装依赖</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">cd</span> part1</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><h4 id=\"运行项目\"><a class=\"anchor\" href=\"#运行项目\">#</a> 运行项目</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> run dev</pre></td></tr></table></figure><h3 id=\"后端服务器\"><a class=\"anchor\" href=\"#后端服务器\">#</a> 后端服务器</h3>\n<h4 id=\"安装json服务器\"><a class=\"anchor\" href=\"#安装json服务器\">#</a> 安装 JSON 服务器</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> json-server</pre></td></tr></table></figure><h4 id=\"运行json服务器\"><a class=\"anchor\" href=\"#运行json服务器\">#</a> 运行 JSON 服务器</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>npx json-server <span class=\"token parameter variable\">--port</span> <span class=\"token number\">3001</span> <span class=\"token parameter variable\">--watch</span> db.json</pre></td></tr></table></figure><p><code>json-server</code>  默认在端口 3000 上开始运行；但由于使用 <code>create-react-app</code>  创建的项目保留了端口 3000，我们必须为 <code>json-server</code>  定义一个备用端口，如端口 3001。</p>\n<h4 id=\"安装axios\"><a class=\"anchor\" href=\"#安装axios\">#</a> 安装 axios</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> axios</pre></td></tr></table></figure><h4 id=\"将json-server安装为开发依赖项只能在开发时使用\"><a class=\"anchor\" href=\"#将json-server安装为开发依赖项只能在开发时使用\">#</a> 将 json-server 安装为开发依赖项 (只能在开发时使用)</h4>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> json-server --save-dev</pre></td></tr></table></figure><p>在 <code>package.json</code>  文件的 <code>scripts</code>  字段中添加以下内容：</p>\n<figure class=\"highlight json\"><figcaption data-lang=\"JSON\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">\"server\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"json-server -p3001 --watch db.json\"</span></pre></td></tr></table></figure><p>现在就可以方便的启动 <code>json-server</code>  了，但是访问的还是 <code>db.json</code>  文件。</p>\n",
            "tags": [
                "React",
                "JavaScript",
                "JavaScript",
                "React",
                "Vite"
            ]
        },
        {
            "id": "https://aynya.github.io/%E5%BC%95%E7%94%A8%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E6%97%B6%E5%A4%B1%E5%8E%BB%E5%8E%9F%E5%A7%8Bthis%E7%9A%84%E5%BC%95%E7%94%A8/",
            "url": "https://aynya.github.io/%E5%BC%95%E7%94%A8%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%E6%97%B6%E5%A4%B1%E5%8E%BB%E5%8E%9F%E5%A7%8Bthis%E7%9A%84%E5%BC%95%E7%94%A8/",
            "title": "引用调用方法时失去原始this的引用",
            "date_published": "2025-03-07T07:49:09.000Z",
            "content_html": "<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arto <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Arto Hellas'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">greet</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello, my name is '</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>arto<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello, my name is Arto Hellas</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> greet <span class=\"token operator\">=</span> arto<span class=\"token punctuation\">.</span>greet<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">greet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello, my name is undefined</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">.</span>greet<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// // hello, my name is undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">.</span><span class=\"token function\">greet</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>arto<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// hello, my name is Arto Hellas</span></pre></td></tr></table></figure><p>当通过引用调用方法，这个方法就失去了对原始 this 的引用，此时的 this 是 <code>window</code> ，所以 <code>this.name</code>  为 <code>window.name</code> ，也就是 <code>undefined</code> 。</p>\n<h3 id=\"通过bind方法保留原来的this\"><a class=\"anchor\" href=\"#通过bind方法保留原来的this\">#</a> 通过 bind 方法保留原来的 this</h3>\n<p><code>setTimeout(arto.greet.bind(arto), 1000)</code> <br />\n 调用 bind 方法，传入 this，就可以保留原来的 this 了。这样 this 就会指向 <code>Arto</code></p>\n",
            "tags": [
                "React",
                "JavaScript",
                "React"
            ]
        },
        {
            "id": "https://aynya.github.io/%E7%BB%84%E4%BB%B6prop%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81/",
            "url": "https://aynya.github.io/%E7%BB%84%E4%BB%B6prop%E7%B1%BB%E5%9E%8B%E9%AA%8C%E8%AF%81/",
            "title": "组件prop类型验证",
            "date_published": "2025-03-07T06:46:51.000Z",
            "content_html": "<p>正常写时</p>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> part<span class=\"token punctuation\">,</span> exercises <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>part<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">&#123;</span>exercises<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>会有报错： <code>...is missing in props validation</code> <br />\n 解决方法：</p>\n<ul>\n<li>添加 <code>propTypes</code></li>\n<li>为组件添加 <code>propTypes</code>  类型校验</li>\n</ul>\n<figure class=\"highlight jsx\"><figcaption data-lang=\"React JSX\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">'prop-types'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span> <span class=\"token function\">Content</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> part<span class=\"token punctuation\">,</span> exercises <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">&#123;</span>part<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">&#123;</span>exercises<span class=\"token punctuation\">&#125;</span><span class=\"token plain-text\"> </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Content<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token literal-property property\">part</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string<span class=\"token punctuation\">.</span>isRequired<span class=\"token punctuation\">,</span> <span class=\"token comment\">// 作用是验证 props</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token literal-property property\">exercises</span><span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>number<span class=\"token punctuation\">.</span>isRequired <span class=\"token comment\">// 作用是验证 props</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如果未安装 <code>prop-types</code> ，则需要安装： <code>npm install prop-types</code></p>\n",
            "tags": [
                "React",
                "JavaScript",
                "React"
            ]
        },
        {
            "id": "https://aynya.github.io/webAPI%E7%AC%94%E8%AE%B0/",
            "url": "https://aynya.github.io/webAPI%E7%AC%94%E8%AE%B0/",
            "title": "webAPI学习笔记",
            "date_published": "2025-02-20T16:00:00.000Z",
            "content_html": "<h1 id=\"dom树\"><a class=\"anchor\" href=\"#dom树\">#</a> DOM 树</h1>\n<ul>\n<li>将 HTML 文档以树形结构直观的表现出来，我们称之为文档树或 DOM 树</li>\n<li>描述网页内容的名词</li>\n<li>作用：文档树直观的体现了标签与标签之间的关系</li>\n</ul>\n<p>DOM 对象：游览器根据 html 标签生成的 JS 对象</p>\n<ul>\n<li>所有的标签属性都可以在这个对象上面找到</li>\n<li>修改这个对象的属性会自动映射到标签身上<br />\n DOM 的核心思想</li>\n<li>把网页内容当作对象来处理<br />\n document 对象</li>\n<li>是 DOM 里提供的一个对象</li>\n<li>所以它提供的属性和方法都是用来访问和操作网页内容的</li>\n<li>网页的所有内容都在 document 里面</li>\n</ul>\n<h1 id=\"根据css选择器来获取dom元素\"><a class=\"anchor\" href=\"#根据css选择器来获取dom元素\">#</a> 根据 CSS 选择器来获取 DOM 元素</h1>\n<ol>\n<li>选择匹配的第一个元素<br />\n语法：</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css选择器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：<br />\n包含一个或多个有效的 CSS 选择器字符串<br />\n返回值：<br />\nCSS 选择器匹配的第一个元素，一个 HTMLElement 对象<br />\n如果没有匹配到，则返回 null<br />\n2. 选择匹配多个元素<br />\n语法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'css选择器'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>参数：<br />\n包含一个或多个有效的 CSS 选择器字符串<br />\n返回值：<br />\nCSS 选择器匹配的 NodeList 对象集合<br />\n例如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ul li</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>得到的是一个<mark>伪数组</mark></p>\n<ul>\n<li>有长度有索引号的数组</li>\n<li>但是没有 pop () push () 等数组方法<br />\n循环遍历</li>\n</ul>\n<h1 id=\"操作元素内容\"><a class=\"anchor\" href=\"#操作元素内容\">#</a> 操作元素内容</h1>\n<ol>\n<li>元素 <code>innerText</code>  属性</li>\n</ol>\n<ul>\n<li>将文本内容添加 / 更新到任意标签位置</li>\n<li>显示纯文本，不解析标签</li>\n</ul>\n<ol start=\"2\">\n<li>元素 <code>innerHTML</code>  属性</li>\n</ol>\n<ul>\n<li>将文本内容添加 / 更新到任意标签位置</li>\n<li>会解析标签，多标签建议使用模板字符</li>\n</ul>\n<h1 id=\"操作元素常用属性\"><a class=\"anchor\" href=\"#操作元素常用属性\">#</a> 操作元素常用属性</h1>\n<p>可以通过 JS 设置 / 修改标签元素属性，比如通过 src 更换图片<br />\n最常见的属性比如：href、title、src 等<br />\n语法：<br />\n <code>对象.属性 = 值</code></p>\n<h1 id=\"操作元素样式属性\"><a class=\"anchor\" href=\"#操作元素样式属性\">#</a> 操作元素样式属性</h1>\n<p>可以通过 JS 设置 / 修改标签元素的样式属性</p>\n<ol>\n<li>通过 style 属性操作 CSS<br />\n 语法： <code>对象.style.属性 = 值</code> <br />\n注意：\n<ol>\n<li>修改样式通过 style 属性引出</li>\n<li>如果属性有 - 连接符，需要转换小驼峰命名法</li>\n<li>赋值的时候，需要的时候不要忘记 CSS 单位。</li>\n</ol>\n</li>\n</ol>\n<p>注意：不要忘记单位</p>\n<p>缺点：<br />\n在修改样式比较少的情况下有优势<br />\n生成的是行内样式表，权重比较高</p>\n<ol start=\"2\">\n<li>操作类名 (className) 操作 CSS</li>\n</ol>\n<ul>\n<li>如果修改的样式比较多，直接通过 style 属性修改比较繁琐，我们可以通过借助于 css 类名的形式</li>\n<li>语法 <code>元素.calssName = '类名'</code></li>\n<li>注意：<br />\nclass 是关键字，所以用 className 代替<br />\n className 是使用新值换旧值，如果需要添加一个类需要保留之前的类名。</li>\n</ul>\n<p>缺点：多个类名操作麻烦</p>\n<ol start=\"3\">\n<li>通过 classList 操作控制 CSS</li>\n</ol>\n<ul>\n<li>为了解决 className 容易覆盖以前的类名，我们可以通过 classList 方式追加和删除类名</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 追加一个类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>元素<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类名'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 删除一个类</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>元素<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类名'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 切换一个类，有还是没有，有就删掉，没有就加上</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>元素<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类名'</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"web-api-dom-核心指南\"><a class=\"anchor\" href=\"#web-api-dom-核心指南\">#</a> 🌳 Web API - DOM 核心指南</h1>\n<h2 id=\"dom-树体系\"><a class=\"anchor\" href=\"#dom-树体系\">#</a> ▎DOM 树体系</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;graph TD<br />\nDocument --&gt; HTML<br />\nHTML --&gt; Head<br />\nHTML --&gt; Body<br />\nHead --&gt; Title<br />\nBody --&gt; Div[div.container]<br />\nDiv --&gt; Header[h1]<br />\nDiv --&gt; Content[p#main]&lt;/pre&gt;</p>\n<p><strong>核心概念</strong>：</p>\n<ul>\n<li><code>DOM对象</code> ：浏览器将 HTML 标签转换的 JavaScript 对象</li>\n<li><code>document</code> ：全局入口对象，包含整个页面内容</li>\n<li>双向绑定：DOM 属性变更自动映射到页面元素</li>\n</ul>\n<h2 id=\"元素选择器\"><a class=\"anchor\" href=\"#元素选择器\">#</a> 🔍 元素选择器</h2>\n<h3 id=\"选择器方法对比\"><a class=\"anchor\" href=\"#选择器方法对比\">#</a> 选择器方法对比</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>返回值</th>\n<th>特点</th>\n<th>性能排序</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>querySelector()</code></td>\n<td>HTMLElement/null</td>\n<td>首个匹配元素</td>\n<td>3</td>\n</tr>\n<tr>\n<td><code>querySelectorAll()</code></td>\n<td>NodeList (静态)</td>\n<td>需转换为数组操作</td>\n<td>4</td>\n</tr>\n<tr>\n<td><code>getElementById()</code></td>\n<td>HTMLElement/null</td>\n<td>唯一元素快速定位</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>getElementsByClassName</code></td>\n<td>HTMLCollection</td>\n<td>动态集合实时更新</td>\n<td>2</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 选择器最佳实践</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> nav <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'nav'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 最快选择方式</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> buttons <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 转换为真数组</span></pre></td></tr></table></figure><h2 id=\"️-内容操作\"><a class=\"anchor\" href=\"#️-内容操作\">#</a> ✏️ 内容操作</h2>\n<h3 id=\"文本-vs-html\"><a class=\"anchor\" href=\"#文本-vs-html\">#</a> 文本 vs HTML</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// XSS 安全文本注入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>div<span class=\"token punctuation\">.</span>innerText <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;script>alert(1)&lt;/script>'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 显示为纯文本</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 富文本内容操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>article<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  &lt;h2>最新动态&lt;/h2></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  &lt;p></span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">&lt;/p></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>解析标签</th>\n<th>防 XSS</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>innerText</code></td>\n<td>❌</td>\n<td>✅</td>\n<td>用户输入展示</td>\n</tr>\n<tr>\n<td><code>innerHTML</code></td>\n<td>✅</td>\n<td>❌</td>\n<td>动态模板渲染</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"样式操作\"><a class=\"anchor\" href=\"#样式操作\">#</a> 🎨 样式操作</h2>\n<h3 id=\"样式控制方式\"><a class=\"anchor\" href=\"#样式控制方式\">#</a> 样式控制方式</h3>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>示例</th>\n<th>权重</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>style 属性</td>\n<td><code>el.style.padding = '10px'</code></td>\n<td>1000</td>\n<td>少量行内样式</td>\n</tr>\n<tr>\n<td>className</td>\n<td><code>el.className = 'active'</code></td>\n<td>类权重</td>\n<td>整体样式替换</td>\n</tr>\n<tr>\n<td>classList API</td>\n<td><code>el.classList.toggle()</code></td>\n<td>类权重</td>\n<td>交互式样式控制</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"classlist-完整方法\"><a class=\"anchor\" href=\"#classlist-完整方法\">#</a> classList 完整方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 类名操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fade-in'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">// ✅ 添加</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hidden'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// ✅ 移除  </span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">'active'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// ✅ 切换</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// ✅ 检测</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>element<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'old'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'new'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// ✅ 替换</span></pre></td></tr></table></figure><h2 id=\"️-属性操作\"><a class=\"anchor\" href=\"#️-属性操作\">#</a> ⚙️ 属性操作</h2>\n<h3 id=\"属性操作方法\"><a class=\"anchor\" href=\"#属性操作方法\">#</a> 属性操作方法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通用属性操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>img<span class=\"token punctuation\">.</span><span class=\"token function\">getAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'data-src'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 获取</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>img<span class=\"token punctuation\">.</span><span class=\"token function\">setAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'alt'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'logo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 设置</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>img<span class=\"token punctuation\">.</span><span class=\"token function\">removeAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">'title'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 删除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 特殊属性处理</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>input<span class=\"token punctuation\">.</span>checked <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// ✅ 布尔属性</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>div<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>userId <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// ✅ 自定义数据属性</span></pre></td></tr></table></figure><h2 id=\"️-关键注意事项\"><a class=\"anchor\" href=\"#️-关键注意事项\">#</a> ⚠️ 关键注意事项</h2>\n<h3 id=\"性能优化\"><a class=\"anchor\" href=\"#性能优化\">#</a> 性能优化</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误示例：布局抖动</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> elements <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>elements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> width <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 触发重排</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> width <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 正确做法：批量读取→批量写入</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> widths <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>elements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el</span> <span class=\"token operator\">=></span> widths<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>offsetWidth<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>elements<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">el<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> el<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width <span class=\"token operator\">=</span> widths<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"nodelist处理\"><a class=\"anchor\" href=\"#nodelist处理\">#</a> NodeList 处理</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 转换为真数组的三种方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> nodelist <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelectorAll</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.item'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> arr1 <span class=\"token operator\">=</span> Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// ES6 推荐</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>nodelist<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>            <span class=\"token comment\">// 扩展运算符</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>nodelist<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 传统方式</span></pre></td></tr></table></figure><h2 id=\"最佳实践\"><a class=\"anchor\" href=\"#最佳实践\">#</a> 💡 最佳实践</h2>\n<ol>\n<li><strong>选择器优先级</strong>：ID &gt; Class &gt; Tag &gt; 属性选择器</li>\n<li><strong>样式操作</strong>：优先使用 classList，避免频繁操作行内样式</li>\n<li><strong>属性访问</strong>：标准属性直接访问，自定义属性使用 dataset</li>\n<li><strong>内容安全</strong>：用户输入内容务必使用 innerText</li>\n<li><strong>动画优化</strong>：使用 requestAnimationFrame 替代定时器</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 动画优化示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> start <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">step</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> progress <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> start<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    element<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>progress <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">'px'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>progress <span class=\"token operator\">&lt;</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>      <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token function\">requestAnimationFrame</span><span class=\"token punctuation\">(</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>完整 DOM 规范参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvQVBJL0RvY3VtZW50X09iamVjdF9Nb2RlbA==\">MDN Web API</span></p>\n</blockquote>\n<h1 id=\"操作表单元素-属性\"><a class=\"anchor\" href=\"#操作表单元素-属性\">#</a> 操作表单元素 属性</h1>\n<ul>\n<li>表单很多情况，也需要修改属性，比如点击眼睛，可以看到密码，本质是把表单类型转换为文本框</li>\n<li>正常的有属性有取值，跟其他的标签属性没有任何区别\n<ul>\n<li>获取： <code>DOM对象.属性名</code></li>\n<li>设置： <code>DOM对象.属性名 = 新值</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>表单<span class=\"token punctuation\">.</span>value <span class=\"token operator\">=</span> <span class=\"token string\">'用户名'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>表单<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>表单中添加就有效果、移除就没有效果，一律使用布尔值表示，如果为 true 代表添加了该属性，如果是 false 代表移除了该属性<br />\n比如: <code>disabled、checked、selected</code></p>\n<h1 id=\"自定义属性\"><a class=\"anchor\" href=\"#自定义属性\">#</a> 自定义属性</h1>\n<p>标准属性：标签天生自带的属性 比如 <code>class id title</code>  等，可以直接使用点语法操作比如： <code>disabled checked selected</code> <br />\n 自定义属性：</p>\n<ul>\n<li>在 html5 中推出了专门的 <code>data-自定义属性</code></li>\n<li>在标签上一律以 <code>data-开头</code></li>\n<li>在 DOM 对象上一律以 <code>dataset</code>  对象方式获取</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> box <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.box'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>box<span class=\"token punctuation\">.</span>dataset<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"定时器-间歇函数\"><a class=\"anchor\" href=\"#定时器-间歇函数\">#</a> 定时器 - 间歇函数</h1>\n<p>定时器函数可以开启和关闭定时器</p>\n<ol>\n<li>开启定时器<br />\n <code>setInterval(函数, 间隔时间)</code> <br />\n 每隔一段时间调用这个函数<br />\n间隔时间单位是毫秒</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fucntion <span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'重复执行'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>repeat<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：函数名字不需要加括号、定时器返回的是一个 id 数字</p>\n<ol start=\"2\">\n<li>关闭定时器</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：函数名字不需要加括号、定时器返回的是一个 id 数字</p>\n<h1 id=\"事件监听\"><a class=\"anchor\" href=\"#事件监听\">#</a> 事件监听</h1>\n<ul>\n<li>什么是事件？<br />\n事件是在编程时系统内发生的动作或者发生的事情<br />\n比如用户在网页上单击一个按钮</li>\n<li>什么是事件监听？<br />\n就是让程序检测是否由事件产生，一旦有事件触发，就立即调用一个函数做出相应</li>\n</ul>\n<p>语法： <code>DOM对象.addEventListener(事件类型, 函数)</code> <br />\n 事件监听三要素：</p>\n<ul>\n<li>事件源：哪个 dom 元素被事件触发了，获取 dom 元素</li>\n<li>事件类型：用什么方法触发，单机 <code>click</code> ，鼠标经过 <code>mouseover</code></li>\n<li>事件调用的函数：要做什么事</li>\n</ul>\n<p>事件监听版本</p>\n<ul>\n<li>\n<p>DOM L0<br />\n <code>事件源.on事件 = function()&#123;&#125;</code></p>\n</li>\n<li>\n<p>DOM L2<br />\n 事件源 <code>.addEventListener(事件，事件处理函数)</code></p>\n</li>\n<li>\n<p>区别<br />\n on 方式会被覆盖， <code>addEventListener</code>  方式可以绑定多次，拥有事件更多特性</p>\n</li>\n</ul>\n<h2 id=\"事件类型\"><a class=\"anchor\" href=\"#事件类型\">#</a> 事件类型</h2>\n<p>鼠标事件：</p>\n<ul>\n<li><code>click</code> ：鼠标点击</li>\n<li><code>mouseover</code> ：鼠标经过</li>\n<li><code>mouseout</code> ：鼠标移出</li>\n</ul>\n<p>焦点事件：</p>\n<ul>\n<li><code>focus</code> ：获得焦点</li>\n<li><code>blur</code> ：失去焦点</li>\n</ul>\n<p>键盘事件：</p>\n<ul>\n<li><code>keydown</code> ：按下键盘</li>\n<li><code>keyup</code> ：抬起键盘</li>\n</ul>\n<p>文本事件：</p>\n<ul>\n<li><code>input</code> ：文本输入</li>\n</ul>\n<h1 id=\"获取事件对象\"><a class=\"anchor\" href=\"#获取事件对象\">#</a> 获取事件对象</h1>\n<p>事件对象是什么</p>\n<ul>\n<li>也是对象，这个对象里有事件触发时的相关信息</li>\n<li>例如：鼠标点击事件中，事件对象就存放了鼠标点在哪个位置等信息<br />\n使用场景</li>\n<li>判断用户按下的哪个键</li>\n<li>判断鼠标点击哪个元素，从而做相应的操作。</li>\n</ul>\n<p>语法：如何获取</p>\n<ul>\n<li>在事件绑定的回调函数的第一个参数就是事件对象</li>\n<li>一般命名为 <code>event</code> ,  <code>ev</code> ,  <code>e</code></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>元素<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>部分常用属性</p>\n<ul>\n<li><code>type</code> ：获取当前的事件类型</li>\n<li><code>clientX/clientY</code> ：获取光标相对于浏览器可见窗口左上角的位置</li>\n<li><code>offsetX/offsetY</code> ：获取光标相对于当前 DOM 元素的位置</li>\n<li><code>key</code> ：用户按下的键盘键的值</li>\n</ul>\n<h1 id=\"stringprototypetrim\"><a class=\"anchor\" href=\"#stringprototypetrim\">#</a> String.prototype.trim()</h1>\n<p><code>String</code>  的 <code>trim()</code>  方法会从字符串的两端移除空白字符，并返回一个新的字符串，不会修改原始字符串<br />\n要返回仅从一端修剪空白字符的新字符串，使用 <code>trimStart()</code>  或 <code>trimEnd()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"   Hello world!   \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Expected output: \"   Hello world!   \";</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Expected output: \"Hello world!\";</span></pre></td></tr></table></figure><h1 id=\"环境对象\"><a class=\"anchor\" href=\"#环境对象\">#</a> 环境对象</h1>\n<p>环境对象：指的是函数内部特殊的变量 this，它代表着当前函数运行时所处的环境<br />\n作用：函数内部使用 this，可以获取到函数运行时所处的环境</p>\n<ul>\n<li>函数的调用方式不同，this 指向的对象也不同</li>\n<li>[谁调用就指向谁]，这是粗略化规则</li>\n<li>严格模式下，this 指向 undefined</li>\n<li>直接调用函数，this 指向 window</li>\n</ul>\n<h1 id=\"回调函数\"><a class=\"anchor\" href=\"#回调函数\">#</a> 回调函数</h1>\n<p>如果 <code>函数A</code>  作为 <code>函数B</code>  时，我们称 A 为回调函数<br />\n简单理解：当一个函数当作参数来传递给另外一个函数的时候，这个函数就是 <code>回调函数</code> <br />\n常见的使用场景</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'回调函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//fn 传递给 setInterval，fn 是回调函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>fn<span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"事件流\"><a class=\"anchor\" href=\"#事件流\">#</a> 事件流</h1>\n<h2 id=\"事件流和两个阶段\"><a class=\"anchor\" href=\"#事件流和两个阶段\">#</a> 事件流和两个阶段</h2>\n<p>事件流指的是事件完整执行的过程中的流动路径<br />\n说明：假设页面中有个 <code>div</code> ，当触发事件时，会经历两个阶段，分别是捕获阶段、冒泡阶段<br />\n简单来说：捕获阶段是 <code>从子到父</code>  冒泡阶段是 <code>从父到子</code></p>\n<h2 id=\"事件捕获\"><a class=\"anchor\" href=\"#事件捕获\">#</a> 事件捕获</h2>\n<ul>\n<li>事件捕获概念：从 DOM 的根元素开始执行对应的事件 (从外到里)</li>\n<li>代码：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token constant\">DOM</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'事件类型'</span><span class=\"token punctuation\">,</span> 事件处理函数，是否使用捕获机制<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>说明：第三个参数传入 true 代表捕获阶段触发</li>\n</ul>\n<h2 id=\"事件冒泡\"><a class=\"anchor\" href=\"#事件冒泡\">#</a> 事件冒泡</h2>\n<p>当一个元素的事件被触发时，同样的事件会在该元素的所有祖先元素中依次被触发</p>\n<ul>\n<li>简单理解：当一个元素被触发事件后，会依次向上调用所有父级元素的 <code>同名事件</code></li>\n<li>事件冒泡是默认存在的</li>\n</ul>\n<h2 id=\"阻止冒泡\"><a class=\"anchor\" href=\"#阻止冒泡\">#</a> 阻止冒泡</h2>\n<ul>\n<li>问题：因为默认就有冒泡模式的存在，所以容易导致事件影响到父级元素</li>\n<li>需求：若想把事件限制在当前元素内，就需要组织事件冒泡</li>\n<li>前提：阻止事件冒泡需要拿到事件对象</li>\n<li>语法：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>事件对象e<span class=\"token punctuation\">.</span><span class=\"token function\">stopPropagation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>注意：此方法可以阻断事件流动传播，不光在冒泡阶段有效，捕获阶段也有效。</li>\n</ul>\n<p>我们某些情况下需要阻止默认行为的发生，比如阻止链接的跳转，表单域跳转</p>\n<ul>\n<li>语法： <code>e.preventDefault()</code></li>\n</ul>\n<h2 id=\"解绑事件\"><a class=\"anchor\" href=\"#解绑事件\">#</a> 解绑事件</h2>\n<p><code>addEventListener</code>  方式，必须使用：<br />\n <code>removeEventListener</code>  (事件类型， 事件处理函数，[获取捕获或者冒泡阶段])<br />\n 例如：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>btn<span class=\"token punctuation\">.</span><span class=\"token function\">removeEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：匿名函数无法被解绑</p>\n<h3 id=\"两种注册事件的区别\"><a class=\"anchor\" href=\"#两种注册事件的区别\">#</a> 两种注册事件的区别</h3>\n<ul>\n<li>传统 on 注册\n<ul>\n<li>同一个对象，后面注册的会覆盖前面的</li>\n<li>直接使用 null 覆盖就可以实现事件的解绑</li>\n<li>都是冒泡阶段执行的</li>\n</ul>\n</li>\n<li>事件监听注册\n<ul>\n<li>语法： <code>DOM.addEventListener('事件类型', 事件处理函数, 是否捕获)</code></li>\n<li>后面注册的事件不会覆盖前面的，而是会绑定到一起</li>\n<li>可以通过第三个参数来确定是在冒泡或者捕获阶段执行</li>\n<li>必须使用 <code>removeEventListener</code>  来解绑</li>\n<li>匿名函数无法被解绑</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"事件委托\"><a class=\"anchor\" href=\"#事件委托\">#</a> 事件委托</h1>\n<p>事件委托时利用事件流的特征解决一些开发需求的技巧</p>\n<ul>\n<li>优点：减少注册次数，可以提高程序性能</li>\n<li>原理：事件委托其实是利用事件冒泡的特点\n<ul>\n<li>给 <code>父元素注册事件</code> ，当我们触发子元素的时候，会冒泡到父元素身上，从而触发父元素的事件<br />\n实例代码：</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这里通过使用 ul 的父元素 ul 注册事件，当触发 li 的时候，会冒泡到 ul 身上，从而触发 ul 的事件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> ul <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.ul'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>ul<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>tagName <span class=\"token operator\">===</span> <span class=\"token string\">'LI'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        e<span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// console.log(e.target.tagName);</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"页面加载事件\"><a class=\"anchor\" href=\"#页面加载事件\">#</a> 页面加载事件</h1>\n<ul>\n<li>加载外部资源（如图片、外联 CSS 和 javascript 等）加载完毕时触发的事件</li>\n<li>为什么要学？\n<ul>\n<li>有些时候需要等页面资源全部处理完了做一些事情</li>\n</ul>\n</li>\n<li>事件名： <code>load</code></li>\n<li>监听页面所有资源加载完毕\n<ul>\n<li>给 window 添加 load 事件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'load'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：不光可以监听整个页面资源加载完毕，也可以针对某个资源绑定 load 事件</p>\n<ul>\n<li>当初始的 HTML 文档被完全加载和解析完成之后， <code>DOMContentLoaded</code>  事件被触发，而无需等待样式表、图像等完全加载</li>\n<li>事件名： <code>DOMContentLoaded</code></li>\n<li>监听页面 DOM 加载完毕\n<ul>\n<li>给 <code>document</code>  添加 <code>DOMContentLoaded</code>  事件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'DOMContentLoaded'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 执行的操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"页面滚动事件\"><a class=\"anchor\" href=\"#页面滚动事件\">#</a> 页面滚动事件</h1>\n<ul>\n<li>滚动条在滚动的时候持续触发的事件</li>\n<li>事件名： <code>scroll</code></li>\n<li>监听页面滚动事件</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 执行的操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>scrollLeft</code>  和 <code>scrollTop</code>\n<ul>\n<li>获取被卷去的大小</li>\n<li>获取元素内容往左、往上出去看不到的距离</li>\n<li>这两个值是<mark>可读写的</mark></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"获取位置\"><a class=\"anchor\" href=\"#获取位置\">#</a> 获取位置</h2>\n<p>开发中，我们需要检测页面滚动的距离</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'scroll'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> n <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span>documentElement<span class=\"token punctuation\">.</span>scrollTop<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意： <code>document.documentElement</code> HTML 文档返回对象为 HTML 元素</p>\n<h2 id=\"滚动到指定坐标\"><a class=\"anchor\" href=\"#滚动到指定坐标\">#</a> 滚动到指定坐标</h2>\n<ul>\n<li><code>scrollTo</code>  方法可把内容滚动到指定的坐标</li>\n<li>语法： <code>元素.scrollTo(x坐标, y坐标)</code></li>\n</ul>\n<h1 id=\"页面尺寸事件\"><a class=\"anchor\" href=\"#页面尺寸事件\">#</a> 页面尺寸事件</h1>\n<ul>\n<li>会在窗口尺寸改变的时候触发事件：\n<ul>\n<li><code>resize</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resize'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"获取元素宽高\"><a class=\"anchor\" href=\"#获取元素宽高\">#</a> 获取元素宽高</h1>\n<ul>\n<li>\n<p>获取宽高</p>\n<ul>\n<li>获取元素的可见部分宽高（不包含边框、margin、滚动条等）</li>\n<li><code>clientWidth</code>  和 <code>clientHeight</code></li>\n</ul>\n</li>\n<li>\n<p>获取宽高</p>\n<ul>\n<li>获取元素的自身宽高、包含元素自身设置的宽高、padding、border</li>\n<li><code>offsetWidth</code>  和 <code>offsetHeight</code></li>\n<li>获取出来的是数值</li>\n<li>注意：获取的是可视宽高，如果盒子是隐藏的，获取的结果是 0</li>\n</ul>\n</li>\n<li>\n<p>获取位置：</p>\n<ul>\n<li>获取元素距离自己定位父级元素的左、上距离</li>\n<li><code>offsetLeft</code>  和 <code>offsetTop</code> ，都是只读属性</li>\n</ul>\n</li>\n<li>\n<p>获取位置：</p>\n<ul>\n<li><code>element.getBoundingClientRect()</code></li>\n<li>方法返回元素的大小及其相对于视口的位置</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>scrollLeft</code>  和  <code>scrollTop</code></td>\n<td>被卷去的头部和左侧</td>\n<td>配合页面滚动来用，可读写</td>\n</tr>\n<tr>\n<td><code>clientWidth</code>  和  <code>clientHeight</code></td>\n<td>获取元素宽度和高度</td>\n<td>不包含 border, margin，滚动条。用于 js 获取元素大小，只读属性</td>\n</tr>\n<tr>\n<td><code>offsetWidth</code>  和  <code>offsetHeight</code></td>\n<td>获取元素宽度和高度</td>\n<td>包含 border、padding，滚动条等，只读</td>\n</tr>\n<tr>\n<td><code>offsetLeft</code>  和  <code>offsetTop</code></td>\n<td>获取元素距离自己定位父级元素的左、上距离</td>\n<td>获取元素位置的时候使用，只读属性</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"日期对象\"><a class=\"anchor\" href=\"#日期对象\">#</a> 日期对象</h1>\n<ul>\n<li>创建一个时间对象并获取时间 <code>const date = new Date()</code></li>\n<li>获取指定时间 <code>const date = new Date('2008-8-8')</code></li>\n</ul>\n<h2 id=\"日期对象方法\"><a class=\"anchor\" href=\"#日期对象方法\">#</a> 日期对象方法</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>作用</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>getFullYear()</code></td>\n<td>获得年份</td>\n<td>获取四位年份</td>\n</tr>\n<tr>\n<td><code>getMonth()</code></td>\n<td>获得月份</td>\n<td>取值为 0 ~ 11</td>\n</tr>\n<tr>\n<td><code>getDate()</code></td>\n<td>获取月中的每一天</td>\n<td>不同月份取值也不相同</td>\n</tr>\n<tr>\n<td><code>getDay()</code></td>\n<td>获取星期</td>\n<td>取值为 0 ~ 6（星期日为 0）</td>\n</tr>\n<tr>\n<td><code>getHours()</code></td>\n<td>获取小时</td>\n<td>取值为 0 ~ 23</td>\n</tr>\n<tr>\n<td><code>getMinutes()</code></td>\n<td>获取分钟</td>\n<td>取值为 0 ~ 59</td>\n</tr>\n<tr>\n<td><code>getSeconds()</code></td>\n<td>获取秒</td>\n<td>取值为 0 ~ 59</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2020/8/8 16:08:09</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleDateString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//   2020/8/8</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>date<span class=\"token punctuation\">.</span><span class=\"token function\">toLocaleTimeString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 16:08:09</span></pre></td></tr></table></figure><h1 id=\"时间戳\"><a class=\"anchor\" href=\"#时间戳\">#</a> 时间戳</h1>\n<ul>\n<li>时间戳：1970 年 1 月 1 日 0 时 0 分 0 秒到当前时间的毫秒数</li>\n<li>算法：\n<ul>\n<li>将来时间 - 现在时间戳 = 剩余时间</li>\n<li>剩余时间毫秒数转换为剩余时间的年月日就是倒计时时间</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"三种获取时间戳的方法\"><a class=\"anchor\" href=\"#三种获取时间戳的方法\">#</a> 三种获取时间戳的方法：</h2>\n<ol>\n<li>使用 <code>getTime()</code>  方法</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> date <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date<span class=\"token punctuation\">.</span><span class=\"token function\">getTime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>简写 <code>+new Date()</code> <br />\n 无需实例化</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li>使用 <code>Date.now()</code> <br />\n 无需实例化<br />\n但是只能得到当前的时间戳，而前面两种可以返回指定时间的时间戳</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"节点\"><a class=\"anchor\" href=\"#节点\">#</a> 节点</h1>\n<h2 id=\"查找节点\"><a class=\"anchor\" href=\"#查找节点\">#</a> 查找节点</h2>\n<ul>\n<li>\n<p>父节点查找：</p>\n<ul>\n<li><code>parentNode</code>  属性</li>\n<li>返回最近一级的父节点 找不到返回为 null</li>\n<li><code>子元素.parentNode</code></li>\n</ul>\n</li>\n<li>\n<p>子节点查找：</p>\n<ul>\n<li><code>childNodes</code> ：获取所有子节点、包括文本节点（空格、换行）、注释节点</li>\n<li><code>children</code>  属性：仅仅获得所有元素节点，返回的还是一个伪数组</li>\n<li><code>父元素.children</code></li>\n</ul>\n</li>\n<li>\n<p>兄弟关系查找：</p>\n<ul>\n<li>下一个兄弟：  <code>nextElementSibling</code>  属性</li>\n<li>上一个兄弟：  <code>previousElementSibling</code>  属性</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"增加节点\"><a class=\"anchor\" href=\"#增加节点\">#</a> 增加节点</h2>\n<ol>\n<li>创建节点</li>\n</ol>\n<ul>\n<li>即创造出一个新的网页元素，再添加到网页内，一般先创建节点，然后插入节点</li>\n<li>创建元素节点方法：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'标签名'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>追加节点</li>\n</ol>\n<ul>\n<li>想要再界面看到，还得插入到某个父元素中</li>\n<li>插入到父元素的最后一个子元素：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入到这个父元素的最后</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>父元素<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>子元素<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>插入到父元素中子元素的前面：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 插入到某个子元素的前面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>父元素<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>新元素<span class=\"token punctuation\">,</span> 哪个元素的前面<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"增加节点-2\"><a class=\"anchor\" href=\"#增加节点-2\">#</a> 增加节点</h2>\n<h3 id=\"克隆节点\"><a class=\"anchor\" href=\"#克隆节点\">#</a> 克隆节点</h3>\n<p><code>元素.cloneNode(布尔值)</code> <br />\n <code>cloneNode</code>  会克隆出一个跟原来标签一样的元素，括号内传入布尔值</p>\n<ul>\n<li>若为 <code>true</code> ，则克隆出来的节点会保留标签内的内容</li>\n<li>若为 <code>false</code> ，则克隆出来的节点不会保留标签内的内容</li>\n<li>默认为 <code>false</code></li>\n</ul>\n<h2 id=\"删除节点\"><a class=\"anchor\" href=\"#删除节点\">#</a> 删除节点</h2>\n<ul>\n<li>若一个节点在页面中已不需要时，可以删除它</li>\n<li>在 <code>JS</code>  原生 <code>DOM</code>  操作中，要删除元素必须通过父元素删除</li>\n<li>语法： <code>父元素.removeChild(子元素)</code></li>\n<li>注：\n<ul>\n<li>如果不存在父子关系则删除不成功</li>\n<li>删除节点和隐藏节点 (display:none) 是有区别的：隐藏节点还是存在的，但是删除节点则不存在了</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"m端事件\"><a class=\"anchor\" href=\"#m端事件\">#</a> M 端事件</h1>\n<p>移动端也有自己独特的地方。比如触屏事件 <code>touch</code> ，Android 和 iOS 都有</p>\n<ul>\n<li><code>touch</code>  对象代表一个触摸点。触摸点可能是一根手指，也可能是一根触摸笔。触屏事件可相应用户手指对屏幕或者触控板操作</li>\n<li>常见的触屏事件如下：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>触屏 touch 事件</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>touchstart</code></td>\n<td>手指触摸到一个 DOM 元素时触发</td>\n</tr>\n<tr>\n<td><code>touchmove</code></td>\n<td>手指在一个 DOM 元素上滑动时触发</td>\n</tr>\n<tr>\n<td><code>touchend</code></td>\n<td>手指从一个 DOM 元素上移开时触发</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"bom\"><a class=\"anchor\" href=\"#bom\">#</a> BOM</h1>\n<ul>\n<li>BOM 是浏览器对象模型</li>\n<li>window 对象是一个全局对象，也可以说是 JavaScript 的顶级对象</li>\n<li>像 <code>document</code> 、 <code>alert()</code> 、 <code>console.log()</code>  这些都是 window 的属性，基本 BOM 的属性和方法都是 window 的</li>\n<li>所有通过 <code>var</code>  定义在全局作用域中的变量、函数都会变成 window 对象的方法和属性</li>\n<li>window 对象下的属性和方法在调用的时候可以省略 window</li>\n</ul>\n<h1 id=\"定时器-延时hansh\"><a class=\"anchor\" href=\"#定时器-延时hansh\">#</a> 定时器 - 延时 hansh</h1>\n<ul>\n<li>语法 <code>setTimeout(回调函数, 延时时间)</code></li>\n<li><code>setTimeout</code>  仅仅只执行一次，所以可以理解为就是把一段代码延迟执行</li>\n<li>清除延时函数：</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>回调函数<span class=\"token punctuation\">,</span> 等待毫秒数<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"js执行机制\"><a class=\"anchor\" href=\"#js执行机制\">#</a> JS 执行机制</h1>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;graph TD<br />\nA [执行栈] --&gt; B (同步任务)<br />\n A --&gt; C {异步任务}<br />\n C --&gt;| 宏任务 | D [定时器 / I/O]<br />\n C --&gt;| 微任务 | E [Promise.then]</p>\n<pre><code>subgraph 任务队列\nD --&gt; F[宏任务队列]\nE --&gt; G[微任务队列]\nend\n\nF --&gt; H&#123;事件循环&#125;\nG --&gt; H\nH --&gt;|优先| G\nH --&gt;|次之| F\nG --&gt; I[执行微任务]\nF --&gt; J[执行宏任务]\nI --&gt; K[页面渲染]\nJ --&gt; H\n\nstyle A fill:#f9f,stroke:#333\nstyle D fill:#f96,stroke:#333\nstyle E fill:#6f9,stroke:#333&lt;/pre&gt;\n</code></pre>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 1 3 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 1 3 2</span></pre></td></tr></table></figure><p>JS 语言的一大特点就是 <code>单线程</code> ，也就是说，同一时间只能做一件事<br />\n这是因为 javascript 是为处理页面中用户的交互，以及操作 DOM 而诞生的。比如我们对某个 DOM 元素进行添加和删除操作，不能同时进行。因该先进行添加，之后再删除<br />\n单线程就意味着，所有任务都需要排队，前一个任务结束，才会执行后一个任务。这样会导致：如果 JS 执行的事件过长，导致页面渲染不连贯，加载阻塞</p>\n<p>为了解决这个问题，利用多核 CPU 的计算能力，HTML5 提出了 <code>Web Worker</code>  标准，允许 JS 脚本创建多个线程，于是，JS 中出现了同步和异步</p>\n<ol>\n<li>\n<p>同步：<br />\n前一个任务结束再执行后一个任务，程序的顺序和执行的顺序是一致的，同步的。</p>\n</li>\n<li>\n<p>异步：<br />\n在执行一个任务时，不会等待这个任务执行完毕，而是继续往下执行，当这个任务执行完毕后，再执行后续的任务。异步的。</p>\n</li>\n<li>\n<p>同步任务：<br />\n同步任务都在主线程上执行，形成一个 <code>执行栈</code> 。</p>\n</li>\n<li>\n<p>异步任务：<br />\nJS 的异步是通过回调函数实现的。<br />\n一般而言，异步任务有以下三种类型：</p>\n</li>\n</ol>\n<ul>\n<li>普通事件，如比如 <code>click</code> 、 <code>mouseover</code> 、 <code>mouseout</code>  等</li>\n<li>资源加载，如 <code>load</code> 、 <code>error</code> 、 <code>abort</code>  等</li>\n<li>定时器，如 <code>setTimeout</code> 、 <code>setInterval</code>  等<br />\n异步任务相关添加到任务队列中 (任务队列也称消息队列)</li>\n</ul>\n<h2 id=\"执行顺序\"><a class=\"anchor\" href=\"#执行顺序\">#</a> 执行顺序</h2>\n<ol>\n<li>先执行 <code>执行栈</code> 中的同步任务</li>\n<li>异步任务放入任务队列中</li>\n<li>一旦执行栈中的所有同步任务执行完毕，系统就会被按次序读取任务队列中的 <code>异步任务</code> ，于是被读取的异步任务结束等待状态，进入执行栈，开始执行。</li>\n</ol>\n<p>由于主线程不断的重复获得任务、执行任务、再获取任务、再执行，所以这种机制被称为 <code>事件循环（event loop）</code></p>\n<h1 id=\"location对象\"><a class=\"anchor\" href=\"#location对象\">#</a> location 对象</h1>\n<p><code>location</code>  的数据类型是对象，它拆分并保存了 URL 地址的各个组成部分</p>\n<h2 id=\"locationhref\"><a class=\"anchor\" href=\"#locationhref\">#</a> location.href</h2>\n<p><code>href</code>  属性获取完整的 URL 地址，对其赋值时用于地址的跳转</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'http://www.baidu.com'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"search\"><a class=\"anchor\" href=\"#search\">#</a> search</h2>\n<p><code>search</code>  属性获取地址中携带的参数，符号 <code>?</code>  后面的部分</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 比如 http://www.baidu.com?name=zhangsan&amp;age=18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 输出：?name=zhangsan&amp;age=18</span></pre></td></tr></table></figure><h2 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> hash</h2>\n<p><code>hash</code>  属性获取地址中的哈希值，符号 <code>#</code> 后面的部分</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>hash<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 比如 http://www.baidu.com#name=zhangsan&amp;age=18</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 输出：#name=zhangsan&amp;age=18</span></pre></td></tr></table></figure><h2 id=\"reload\"><a class=\"anchor\" href=\"#reload\">#</a> reload</h2>\n<p><code>reload</code>  方法用来刷新当前页面，传入参数 <code>true</code>  时表示强制刷新<br />\n语法： <code>location.reload(true)</code> <br />\n 强制刷新和普通刷新的区别：强制刷新会重新加载页面，而普通刷新只会重新加载页面的资源，不会重新加载页面的脚本。</p>\n<h2 id=\"navigator对象\"><a class=\"anchor\" href=\"#navigator对象\">#</a> navigator 对象</h2>\n<ul>\n<li><code>navigator</code>  的数据类型是对象，该对象记录了浏览器自身的相关信息</li>\n<li>常用的属性和方法：通过 <code>userAgent</code>  检测浏览器版本和平台</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 检测 userAgent（浏览器信息）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> userAgent <span class=\"token operator\">=</span> navigator<span class=\"token punctuation\">.</span>userAgent<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 验证是否为 Android 或 iPhone</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> android <span class=\"token operator\">=</span> userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(Android);?[\\s\\/]+(.+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> iphone <span class=\"token operator\">=</span> userAgent<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">(iPhone|iPod);?[\\s\\/]+(.+)?</span><span class=\"token regex-delimiter\">/</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 如果是 Android 或 iPhone，则跳转至移动站点</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>android <span class=\"token operator\">||</span> iphone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        location<span class=\"token punctuation\">.</span>href <span class=\"token operator\">=</span> <span class=\"token string\">'http://m.itcast.cn'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"history对象\"><a class=\"anchor\" href=\"#history对象\">#</a> history 对象</h2>\n<ul>\n<li><code>history</code>  的数据类型是对象，主要管理历史记录，该对象与浏览器地址栏的操作相对应，如前进、后退、历史记录等</li>\n<li>常用属性和方法：</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>history 对象方法</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>back()</td>\n<td>后退功能</td>\n</tr>\n<tr>\n<td>forward()</td>\n<td>前进功能</td>\n</tr>\n<tr>\n<td>go (参数)</td>\n<td>前进后退功能 参数如果是 1 前进一个页面 如果是 - 1 后退一个页面</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"本地存储\"><a class=\"anchor\" href=\"#本地存储\">#</a> 本地存储</h1>\n<ol>\n<li>数据存储在用户浏览器中</li>\n<li>设置、读取方便、刷新不丢失</li>\n<li>容量较大， <code>sessionStorage</code>  和 <code>localStorage</code>  约为 5M 左右</li>\n</ol>\n<h2 id=\"localstorage\"><a class=\"anchor\" href=\"#localstorage\">#</a> localStorage</h2>\n<p>作用：可以将数据永久存储在本地 (用户的电脑), 除非手动删除，否则关闭页面也会存在<br />\n特性：可以多窗口共享、以键值对的形式存储使用</p>\n<p>存储数据： <code>localStorage.setItem('key', 'value')</code> <br />\n 读取数据： <code>localStorage.getItem('key')</code> <br />\n 删除数据： <code>localStorage.removeItem('key')</code></p>\n<h2 id=\"sessionstorage\"><a class=\"anchor\" href=\"#sessionstorage\">#</a> sessionStorage</h2>\n<p>特性：生命周期为关闭浏览器窗口、在同一个窗口下数据可以共享、以键值对的形式存储使用、用法和 <code>localStorage</code>  一样</p>\n<h2 id=\"存储复杂数据类型\"><a class=\"anchor\" href=\"#存储复杂数据类型\">#</a> 存储复杂数据类型</h2>\n<ul>\n<li>\n<p>本地只能存储字符串，无法存储复杂数据类型</p>\n</li>\n<li>\n<p>解决：需要将复杂数据类型转换乘 JSON 字符串，再存储到本地</p>\n</li>\n<li>\n<p>语法： <code>JSON.stringify(复杂数据类型)</code></p>\n</li>\n<li>\n<p>解决：把取出来的字符串转换为对象</p>\n</li>\n<li>\n<p>语法： <code>JSON.parse(JSON字符串)</code></p>\n</li>\n</ul>\n<h1 id=\"数组map方法\"><a class=\"anchor\" href=\"#数组map方法\">#</a> 数组 map 方法</h1>\n<p>语法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">ele<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 这里 ele 是元素，index 是索引</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> ele<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>注意：map 有返回值</p>\n<h1 id=\"数组join方法\"><a class=\"anchor\" href=\"#数组join方法\">#</a> 数组 join 方法</h1>\n<p>作用： <code>join()</code>  方法用于把数组中的所有元素转换为一个字符串<br />\n语法：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArry<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 输出：red-blue-green</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArry<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 输出：redbluegreen</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArry<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 输出：red,blue,green</span></pre></td></tr></table></figure><h1 id=\"正则表达式\"><a class=\"anchor\" href=\"#正则表达式\">#</a> 正则表达式</h1>\n<p>正则表达式是匹配字符串的模式</p>\n<h2 id=\"基本使用\"><a class=\"anchor\" href=\"#基本使用\">#</a> 基本使用</h2>\n<p>定义规则： <code>const reg = /表达式/</code> <br />\n 其中 <code>//</code>  时正则表达式的字面量<br />\n正则表达式也是对象</p>\n<h3 id=\"test方法\"><a class=\"anchor\" href=\"#test方法\">#</a> test 方法</h3>\n<p>作用：用来匹配字符串，返回布尔值<br />\n语法： <code>reg.test(字符串)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 正则表达式的基本使用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'web前端开发'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 定义规则</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">web</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 2. 使用正则  test ()</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//true  如果符合规则匹配上则返回 true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java开发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//false  如果不符合规则匹配上则返回 false</span></pre></td></tr></table></figure><h3 id=\"exec方法\"><a class=\"anchor\" href=\"#exec方法\">#</a> exec 方法</h3>\n<p>作用：用来匹配字符串，返回数组<br />\n语法： <code>reg.exec(字符串)</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//exec () 方法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'web前端开发'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">web</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 输出：[\"web\", index: 0, input: \"web 前端开发\", groups: undefined]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">'java开发'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出：null</span></pre></td></tr></table></figure><h2 id=\"元字符\"><a class=\"anchor\" href=\"#元字符\">#</a> 元字符</h2>\n<ul>\n<li>是一些具有特殊含义的字符，可以极大提高了灵活性和强大的匹配功能。</li>\n<li>比如，规定用户只能输入英文 26 个英文字符，元字符写法： <code>/[a-z]</code></li>\n</ul>\n<h2 id=\"边界符\"><a class=\"anchor\" href=\"#边界符\">#</a> 边界符</h2>\n<p>正则表达式中的边界符（位置符）用来提示字符所处的位置，主要有两个字符</p>\n<table>\n<thead>\n<tr>\n<th>边界符</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>^</td>\n<td>表示匹配字符串的开头</td>\n</tr>\n<tr>\n<td>$</td>\n<td>表示匹配字符串的结尾</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 元字符之边界符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1. 匹配开头的位置 ^</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> reg <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^web</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web前端'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端web学习'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'we'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. 匹配结束的位置 $</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> reg1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">web$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web前端'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端web学习'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'we'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false  </span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 3. 精确匹配 ^ $</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> reg2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^web$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web前端'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//  false</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'前端web学习'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'we'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false </span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'web'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'webweb'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// flase</span></pre></td></tr></table></figure><h2 id=\"量词\"><a class=\"anchor\" href=\"#量词\">#</a> 量词</h2>\n<table>\n<thead>\n<tr>\n<th>量词</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>*</td>\n<td>重复零次或更多次</td>\n</tr>\n<tr>\n<td>+</td>\n<td>重复一次或更多次</td>\n</tr>\n<tr>\n<td>?</td>\n<td>重复零次或一次</td>\n</tr>\n<tr>\n<td n=\"\"></td>\n<td>重复 n 次</td>\n</tr>\n<tr>\n<td n,=\"\"></td>\n<td>重复 n 次或更多次</td>\n</tr>\n<tr>\n<td n,m=\"\"></td>\n<td>重复 n 到 m 次</td>\n</tr>\n</tbody>\n</table>\n<p>注意：逗号左右两侧不要有空格</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 元字符之量词</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 1. * 重复次数 >= 0 次</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> reg1 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^w*$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg1<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 2. + 重复次数 >= 1 次</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">const</span> reg2 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^w+$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg2<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 3. ? 重复次数  0 || 1 </span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">const</span> reg3 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^w?$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg3<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 4. &#123;n&#125; 重复 n 次</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">const</span> reg4 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^w&#123;3&#125;$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// flase</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg4<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wwww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token comment\">// 5. &#123;n,&#125; 重复次数 >= n </span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre><span class=\"token keyword\">const</span> reg5 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^w&#123;2,&#125;$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg5<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg5<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg5<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg5<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-----------------------'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre></pre></td></tr><tr><td data-num=\"41\"></td><td><pre><span class=\"token comment\">// 6. &#123;n,m&#125;   n =&lt; 重复次数 &lt;= m</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre><span class=\"token keyword\">const</span> reg6 <span class=\"token operator\">=</span> <span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">^w&#123;2,4&#125;$</span><span class=\"token regex-delimiter\">/</span></span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg6<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg6<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg6<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'www'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg6<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wwww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"47\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reg6<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wwwww'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"48\"></td><td><pre></pre></td></tr><tr><td data-num=\"49\"></td><td><pre><span class=\"token comment\">// 7. 注意事项： 逗号两侧千万不要加空格否则会匹配失败</span></pre></td></tr></table></figure><h2 id=\"范围\"><a class=\"anchor\" href=\"#范围\">#</a> 范围</h2>\n<table>\n<thead>\n<tr>\n<th>范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[abc]</td>\n<td>匹配 a 或者 b 或者 c</td>\n</tr>\n<tr>\n<td>[^abc]</td>\n<td>匹配除了 a 或者 b 或者 c 之外的字符</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>匹配 a 到 z 之间的字符</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符类\"><a class=\"anchor\" href=\"#字符类\">#</a> 字符类</h2>\n<table>\n<thead>\n<tr>\n<th>字符类</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>\\d</td>\n<td>匹配数字</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配非数字</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>匹配字母数字下划线</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>匹配非字母数字下划线</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>匹配空格（包括换行符、制表符、空格符等）</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配非空格（包括换行符、制表符、空格符等）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"替换和修饰符\"><a class=\"anchor\" href=\"#替换和修饰符\">#</a> 替换和修饰符</h2>\n<p><code>replace</code>  替换方法，可以完成字符的替换<br />\n <code>字符串.replace(/正则表达式/, '替换内容')</code> <br />\n 注意：只能替换一个字符，如果要替换多个字符，则需要多次调用 replace 方法</p>\n<p>修饰符约束正则执行的某些细节行为，如是否区分大小写，是否支持多行匹配等</p>\n<ul>\n<li>i 是单词 <code>ignore</code>  缩写，正则匹配时字母不区分大小写</li>\n<li>g 是单词 <code>global</code>  缩写，正则匹配时全局匹配，即匹配所有符合规则的字符串</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 替换和修饰符</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'欢迎大家学习前端，相信大家一定能学好前端，都成为前端大神'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 1. 替换  replace  需求：把前端替换为 web</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 1.1 replace 返回值是替换完毕的字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//const strEnd = str.replace (/ 前端 /, 'web') 只能替换一个</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 2. 修饰符 g 全部替换</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> strEnd <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">前端</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">'web'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>strEnd<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"change事件\"><a class=\"anchor\" href=\"#change事件\">#</a> change 事件</h1>\n<p>给 input 注册 change 事件，值被修改并且失去焦点后触发</p>\n<h2 id=\"判断是否有类\"><a class=\"anchor\" href=\"#判断是否有类\">#</a> 判断是否有类</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>元素<span class=\"token punctuation\">.</span>classList<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'类名'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"作用域\"><a class=\"anchor\" href=\"#作用域\">#</a> 作用域</h1>\n<p>作用域规定了变量能够被访问的 “范围”，离开了这个 “范围” 变量便不能被访问，作用域分为全局作用域和局部作用域</p>\n<h2 id=\"局部作用域\"><a class=\"anchor\" href=\"#局部作用域\">#</a> 局部作用域</h2>\n<p>局部作用域分为函数作用域和块级作用域</p>\n<h3 id=\"函数作用域\"><a class=\"anchor\" href=\"#函数作用域\">#</a> 函数作用域</h3>\n<p>在函数内部声明的变量只能在函数内部访问，外部无法直接访问。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明 counter 函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 函数内部声明的变量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> s <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 18</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 设用 counter 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 访问变量 s</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>函数的参数也是函数内部的局部变量</li>\n<li>不同函数内部声明的变量无法互相访问</li>\n<li>函数执行完毕后，函数内部的变量实际清空</li>\n</ol>\n<h3 id=\"块级作用域\"><a class=\"anchor\" href=\"#块级作用域\">#</a> 块级作用域</h3>\n<p>使用 {} 包裹的代码称为代码块，代码块内部声明的变量外部将【有可能】无法被访问</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">//age 只能在该代码块中被访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 超出了 age 的作用域</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//str 只能在该代码块中被访问</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello world!'</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token comment\">// 超出了 age 的作用域</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">//t 只能在该代码块中被访问</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 超出了 t 的作用域</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><p>除了变量之外还有常量，常量与变量的本质区别就是【常量必须有值且不允许被重新赋值】，常量值为对象时其属性和方法允许重新赋值。</p>\n<p>总结：</p>\n<ol>\n<li><code>let</code>  声明的变量会产生块级作用域， <code>var</code>  不会产生块级作用域</li>\n<li><code>const</code>  声明的常量也会产生块级作用域</li>\n<li>不同代码块之间的变量无法互相访问</li>\n</ol>\n<h2 id=\"全局作用域\"><a class=\"anchor\" href=\"#全局作用域\">#</a> 全局作用域</h2>\n<p><code>script</code>  标签和 <code>.js</code>  文件的【最外层】就是所谓的全局作用域，在此声明的变量在函数内部也可以被访问。</p>\n<p><code>javascript</code>  中作用域是程序被执行时的底层机制</p>\n<h2 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 全局作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 局部作用域</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> c</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 局部作用域</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token keyword\">let</span> d <span class=\"token operator\">=</span> <span class=\"token string\">'yo'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数内部允许创建新的函数， <code>f</code>  函数内部创建的新函数 <code>g</code> ，会产生新的函数作用域，由此可知作用域发生了嵌套</p>\n<p>作用域链本质上是<mark>底层的变量查找机制</mark>，在函数被执行时，会优先查找当前函数作用域中查找变量，如果当前作用域查不到就会逐级查找父级作用域直到全局作用域</p>\n<h1 id=\"垃圾回收机制\"><a class=\"anchor\" href=\"#垃圾回收机制\">#</a> 垃圾回收机制</h1>\n<p><code>javascript</code>  中内存管理机制是自动的，不需要程序员去管理内存，当内存不再被使用， <code>javascript</code>  引擎会自动回收内存。<br />\n不再用到的内存，没有及时释放，就叫做<mark>内存泄露</mark></p>\n<h2 id=\"内存的生命周期\"><a class=\"anchor\" href=\"#内存的生命周期\">#</a> 内存的生命周期</h2>\n<ol>\n<li>内存分配：当我们声明变量、函数、对象时，系统会自动分配内存</li>\n<li>内存使用：即读写内存，也就是使用变量、函数</li>\n<li>内存回收：使用完毕，由垃圾回收自动回收</li>\n<li>说明：全局变量一般不会自动回收（关闭页面回收）</li>\n</ol>\n<h2 id=\"垃圾回收机制-2\"><a class=\"anchor\" href=\"#垃圾回收机制-2\">#</a> 垃圾回收机制</h2>\n<ol>\n<li>栈：由操作系统自动分配释放函数的参数值、局部变量等，基本数据类型放到栈里面</li>\n<li>堆：一般由程序员分配释放、若程序员不释放，由<mark>垃圾回收机制</mark>回收，复杂数据类型放到堆里面</li>\n</ol>\n<h3 id=\"引用计数算法\"><a class=\"anchor\" href=\"#引用计数算法\">#</a> 引用计数算法</h3>\n<ol>\n<li>跟踪记录引用次数</li>\n<li>引用一次，++</li>\n<li>少一个引用 --</li>\n<li>引用次数为 0，则回收内存</li>\n</ol>\n<p>存在一个致命问题，<mark>嵌套引用</mark><br />\n如果两个对象相互引用，尽管已不再使用，垃圾回收器不会回收，导致内存泄露。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> o1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> o2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>o1<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> o2</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>o2<span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> o1</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">return</span> <span class=\"token string\">'引用计数无法回收'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"标记清除算法\"><a class=\"anchor\" href=\"#标记清除算法\">#</a> 标记清除算法</h3>\n<ol>\n<li>将 &quot;不再使用的对象&quot; 定义为 &quot;无法到达的对象&quot;</li>\n<li>就是从根部出发定时扫描内存中的对象，凡是能从根部到达的对象，都还是需要使用的。</li>\n<li>那些无法从根部出发触及到的对象标记为不再使用，回收</li>\n</ol>\n<h1 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h1>\n<p>闭包是一种比较特殊和函数，使用闭包能够访问函数作用域中的变量。从代码形式上看闭包是一个作为返回值的函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 3. 闭包的写法  统计函数的调用次数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">function</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        count<span class=\"token operator\">++</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">函数被调用</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>count<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">次</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token keyword\">return</span> fn</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">const</span> re <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// const re = function fn() &#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">//   count++</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">//   console.log (`函数被调用 $&#123;count&#125; 次`)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token comment\">// &#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">re</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">//const fn = function () &#123;&#125;  函数表达式</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\">// 4. 闭包存在的问题： 可能会造成内存泄漏</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>闭包 = 内层函数 + 外层函数的变量</li>\n<li>闭包的作用？</li>\n</ol>\n<ul>\n<li>封闭数据：实现数据私有，外部也可以访问函数内部的变量</li>\n<li>闭包很有用，因为它允许将函数与其所操作的某些数据关联起来</li>\n</ul>\n<ol start=\"3\">\n<li>闭包可能会引起内存泄露</li>\n</ol>\n<h1 id=\"变量提升\"><a class=\"anchor\" href=\"#变量提升\">#</a> 变量提升</h1>\n<p>它允许在变量声明之前被访问</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 只提升变量声明，不提升变量表达式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 访问变量 str</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str <span class=\"token operator\">+</span> <span class=\"token string\">'world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 声明变量 str</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello '</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>变量在未声明即被访问时会报语法从错误</li>\n<li>变量在声明之前即被访问，变量值未 <code>undefined</code></li>\n<li><code>let</code>  声明的变量不存在变量提升，推荐使用 <code>let</code></li>\n<li>变量提升出现在相同作用域中</li>\n</ol>\n<h1 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h1>\n<h2 id=\"函数提升\"><a class=\"anchor\" href=\"#函数提升\">#</a> 函数提升</h2>\n<p>函数提升与变量提升比较类似，是指函数在声明之前即可被调用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 声明函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'声明之前即被调用...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 只提升函数声明，不提升函数表达式</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 不存在提升现象</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">bar</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'函数表达式不存在提升现象...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>函数提升能够使函数的声明调用更灵活</li>\n<li>函数表达式不存在提升的现象</li>\n<li>函数提升出现在相同作用域</li>\n</ol>\n<h2 id=\"动态参数\"><a class=\"anchor\" href=\"#动态参数\">#</a> 动态参数</h2>\n<p><code>arguments</code>  是函数内部内置的伪数组变量，它包含了调用函数时传入的所有实参</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 求生函数，计算所有参数的和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// console.log(arguments)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arguments<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      s <span class=\"token operator\">+=</span> arguments<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\">// 调用求和函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 两个参数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 两个参数</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li><code>arguments</code>  是一个伪数组</li>\n<li><code>arguments</code>  的作用是获取函数的实参</li>\n</ol>\n<h2 id=\"剩余参数\"><a class=\"anchor\" href=\"#剩余参数\">#</a> 剩余参数</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">baseURL<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>other</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>baseURL<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 得到 'http://baidu.com'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>other<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//other  得到 ['get', 'json']</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">config</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://baidu.com'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li><code>...</code>  是语法符号，用于获取多余的实参</li>\n<li>借助 <code>...</code> , 获取的剩余参数，是一个真数组</li>\n</ol>\n<h2 id=\"展开运算符\"><a class=\"anchor\" href=\"#展开运算符\">#</a> 展开运算符</h2>\n<p>展开运算符 <code>...</code> ，用于将一个数组或类数组展开为多个参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">const</span> arr2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> arr3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>arr2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"箭头函数\"><a class=\"anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">1.</span> 箭头函数 基本语法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token number\">2.</span> 只有一个形参的时候，可以省略小括号</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 3. 只有一行代码的时候，我们可以省略大括号</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token number\">4.</span> 只有一行代码的时候，可以省略<span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> x</pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token number\">5.</span> 箭头函数可以直接返回一个对象</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">uname</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> uname <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'刘德华'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>箭头函数属于表达式函数，因此不存在函数提升</li>\n<li>箭头函数只有一个参数时可以省略圆括号 ()</li>\n<li>箭头函数函数体只有一行代码时可以省略花括号 {}，并自动作为返回值返回</li>\n</ol>\n<h3 id=\"箭头函数参数\"><a class=\"anchor\" href=\"#箭头函数参数\">#</a> 箭头函数参数</h3>\n<p>箭头函数中没有 <code>arguments</code> , 只能使用 <code>...</code>  动态获取实参</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 利用箭头函数来求和</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">getSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>arr</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sum <span class=\"token operator\">+=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token keyword\">return</span> sum</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 9</span></pre></td></tr></table></figure><h3 id=\"箭头函数this\"><a class=\"anchor\" href=\"#箭头函数this\">#</a> 箭头函数 this</h3>\n<p>箭头函数不会创建自己的 <code>this</code> ，它只会从自己的作用域链的上一层沿用 <code>this</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">2.</span> 箭头函数的<span class=\"token keyword\">this</span>  是上一层作用域的<span class=\"token keyword\">this</span> 指向</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// window</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    对象方法箭头函数 <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token literal-property property\">uname</span><span class=\"token operator\">:</span> <span class=\"token string\">'pink老师'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>      <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">//this 指向谁？ window</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    obj<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"数组解构\"><a class=\"anchor\" href=\"#数组解构\">#</a> 数组解构</h1>\n<p>数组结构是将数组的单元值快速批量赋值给一系列变量的简洁语法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 批量声明变量 a b c </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 同时将数组单元值 1 2 3 依次赋值给变量 a b c</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>赋值运算符 = 左侧 [] 用于批量声明变量，右侧数组的单元值被赋值给左侧变量</li>\n<li>变量的顺序对应数组单元值的位置一次进行赋值操作。</li>\n<li>变量的数量大于单元值数量是，多余的变量被赋值于 <code>undefined</code></li>\n<li>变量的数量小于单元值时，可以通过 <code>...</code>  获取剩余单元值，但只能置于最末位</li>\n<li>允许初始化变量的默认值，且只有单元值为 <code>undefined</code>  时才会生效<br />\n注：支持多维解构赋值</li>\n</ol>\n<h1 id=\"对象解构\"><a class=\"anchor\" href=\"#对象解构\">#</a> 对象解构</h1>\n<p>对象解构是将对象属性和方法快速批量赋值给一系列的简洁语法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 批量声明变量 name age</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 同时将数组单元值 小明  18 依次赋值给变量 name  age</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span> age<span class=\"token punctuation\">&#125;</span> <span class=\"token operator\">=</span> user</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 小明</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 18</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>赋值运算符 <code>=</code>  左侧的 <code>&#123;&#125;</code>  用于批量声明变量，右侧对象的属性值会被赋值给左侧的变量</li>\n<li>对象属性的值被赋值给属性名相同的变量</li>\n<li>对象中找不到与变量名一致的属性时变量为 <code>undefined</code></li>\n<li>允许初始化变量的默认值，属性不存在或单元值为 <code>undefined</code>  时默认值才会生效</li>\n</ol>\n<p>支持多维解构赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 这是后台传递过来的数据</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token string-property property\">\"code\"</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token string-property property\">\"msg\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"获取新闻列表成功\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token string-property property\">\"data\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>          <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          <span class=\"token string-property property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"5G商用自己，三大运用商收入下降\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>          <span class=\"token string-property property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">58</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>          <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>          <span class=\"token string-property property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"国际媒体头条速览\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>          <span class=\"token string-property property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">56</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>          <span class=\"token string-property property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>          <span class=\"token string-property property\">\"title\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"乌克兰和俄罗斯持续冲突\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>          <span class=\"token string-property property\">\"count\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1669</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>     <span class=\"token comment\">// 需求 1： 请将以上 msg 对象  采用对象解构的方式 只选出  data 方面后面使用渲染页面</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token comment\">// const &#123; data &#125; = msg</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// console.log(data)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token comment\">// 需求 2： 上面 msg 是后台传递过来的数据，我们需要把 data 选出当做参数传递给 函数</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token comment\">// const &#123; data &#125; = msg</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>    <span class=\"token comment\">//msg 虽然很多属性，但是我们利用解构只要 data 值</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> data <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>      <span class=\"token comment\">// const &#123; data &#125; = arr</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>      <span class=\"token comment\">// 我们只要 data 数据</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>      <span class=\"token comment\">// 内部处理</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>    <span class=\"token comment\">// 需求 3， 为了防止 msg 里面的 data 名字混淆，要求渲染函数里面的数据名改为 myData</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">data</span><span class=\"token operator\">:</span> myData <span class=\"token punctuation\">&#125;</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>      <span class=\"token comment\">// 要求将 获取过来的 data 数据 更名为 myData</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre>      <span class=\"token comment\">// 内部处理</span></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myData<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre></pre></td></tr><tr><td data-num=\"45\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"46\"></td><td><pre>    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"foreach遍历数组\"><a class=\"anchor\" href=\"#foreach遍历数组\">#</a> forEach 遍历数组</h1>\n<p><code>forEach()</code>  方法用于调用数组的每个元素，并将元素传递给回调函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//forEach 就是遍历  加强版的 for 循环  适合于遍历数组对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pink'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> index</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 数组元素 red  green pink</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 索引号</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// console.log(result)</span></pre></td></tr></table></figure><h1 id=\"filter过滤数组\"><a class=\"anchor\" href=\"#filter过滤数组\">#</a> filter 过滤数组</h1>\n<p><code>filter()</code>  方法创建一个新数组，其包含通过所提供函数实现的测试的所有元素。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// const newArr = arr.filter(function (item, index) &#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">//   // console.log(item)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">//   // console.log(index)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">//   return item >= 20</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// &#125;)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 返回的符合条件的新数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span> <span class=\"token operator\">=></span> item <span class=\"token operator\">>=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newArr<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"深入对象\"><a class=\"anchor\" href=\"#深入对象\">#</a> 深入对象</h1>\n<h2 id=\"构造函数\"><a class=\"anchor\" href=\"#构造函数\">#</a> 构造函数</h2>\n<p>构造函数是专门用于创建对象的函数，如果一个函数用 <code>new</code>  关键字调用，那么这个函数就是构造函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'通过 new 也能调用函数...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 调用函数</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">new</span> <span class=\"token class-name\">foo</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>使用 <code>new</code>  关键字调用函数的行为被称为实例化</li>\n<li>实例化构造函数时没有参数时可以省略 ()</li>\n<li>构造函数的返回值即为创建的对象</li>\n<li>构造函数中的 <code>return </code> 无效</li>\n</ol>\n<p>注：实践中为了从视觉上区分构造函数和普通函数，习惯将构造函数的首字母大写。</p>\n<h2 id=\"实例成员\"><a class=\"anchor\" href=\"#实例成员\">#</a> 实例成员</h2>\n<p>通过构造函数创建的对象称为实例对象，实例对象中的属性和方法被称为实例成员</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 构造函数内部的 this 就是实例对象</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 实例对象中动态添加属性</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'小明'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 实例对象动态添加方法</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'大家好~'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 实例化，p1 是实例对象</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\">//p1 实际就是 构造函数内部的 this</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 访问实例属性</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  p1<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 调用实例方法</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>构造函数中的 <code>this</code>  就是实例对象，为其动态添加的属性和方法即为实例成员</li>\n<li>为构造函数传入参数，动态创建结构相同但值不同的对象</li>\n</ol>\n<h2 id=\"静态成员\"><a class=\"anchor\" href=\"#静态成员\">#</a> 静态成员</h2>\n<p>在 <code>javascript</code>  中底层函数本质上也是对象类型，因此允许直接为函数动态添加属性或方法，构造函数的属性和方法被称为静态成员</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 构造函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 省略实例成员</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 静态属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  Person<span class=\"token punctuation\">.</span>eyes <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  Person<span class=\"token punctuation\">.</span>arms <span class=\"token operator\">=</span> <span class=\"token number\">2</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 静态方法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  Person<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">walk</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'^_^人都会走路...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">//this 指向 Person</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eyes<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>静态成员指的是添加到构造函数本身的属性和方法</li>\n<li>一般公共特征的属性和方法静态成员设置为静态成员</li>\n<li>静态成员中的 <code>this</code>  指向构造函数本身</li>\n</ol>\n<h1 id=\"内置构造函数\"><a class=\"anchor\" href=\"#内置构造函数\">#</a> 内置构造函数</h1>\n<h2 id=\"object\"><a class=\"anchor\" href=\"#object\">#</a> Object</h2>\n<p><code>Object</code>  是内置的构造函数，用于创建普通对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过构造函数创建普通对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">15</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">// 这种方式声明的变量称为【字面量】</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'杜子腾'</span><span class=\"token punctuation\">,</span> <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 对象语法简写</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'小红'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">let</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 相当于 name: name</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    name<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 相当于 walk: function () &#123;&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">walk</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人都要走路...'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>student <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>推荐使用字面量方式声明对象，而不是  <code>Object</code>  构造函数</li>\n<li><code>Object.assign</code>  静态方法创建新的对象</li>\n<li><code>Object.keys</code>  静态方法获取对象中所有属性</li>\n<li><code>Object.values</code>  表态方法获取对象中所有属性值</li>\n</ol>\n<h2 id=\"array\"><a class=\"anchor\" href=\"#array\">#</a> Array</h2>\n<p><code>Array</code>  是内置的构造函数，用于创建数组</p>\n<p>数组赋值后，无论修改哪个变量另一个对象的数据值也会相当发生改变</p>\n<h3 id=\"reduce\"><a class=\"anchor\" href=\"#reduce\">#</a> reduce</h3>\n<p>作用： <code>reduce</code>  返回函数累计处理的结果，经常用于求和等<br />\n基本语法： <code>arr.reduce(function()&#123;&#125;, 起始值)</code> <br />\n 参数：起始值可以省略，如果写就作为第一次累计的起始值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> count <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span> item</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> prev <span class=\"token operator\">+</span> item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"from\"><a class=\"anchor\" href=\"#from\">#</a> from</h3>\n<p><code>from</code>  静态方法用于将类数组对象或可遍历对象转换为数组<br />\n <code>Array.from()</code></p>\n<p>总结：</p>\n<ol>\n<li>\n<p>推荐使用字面量方式声明数组，而不是  <code>Array</code>  构造函数</p>\n</li>\n<li>\n<p>实例方法  <code>forEach</code>  用于遍历数组，替代  <code>for</code>  循环 (重点)</p>\n</li>\n<li>\n<p>实例方法  <code>filter</code>  过滤数组单元值，生成新数组 (重点)</p>\n</li>\n<li>\n<p>实例方法  <code>map</code>  迭代原数组，生成新数组 (重点)</p>\n</li>\n<li>\n<p>实例方法  <code>join</code>  数组元素拼接为字符串，返回字符串 (重点)</p>\n</li>\n<li>\n<p>实例方法   <code>find</code>   查找元素， 返回符合测试条件的第一个数组元素值，如果没有符合条件的则返回 undefined (重点)</p>\n</li>\n<li>\n<p>实例方法 <code>every</code>  检测数组所有元素是否都符合指定条件，如果<strong>所有元素</strong>都通过检测返回 true，否则返回 false (重点)</p>\n</li>\n<li>\n<p>实例方法 <code>some</code>  检测数组中的元素是否满足指定条件   <strong>如果数组中有</strong>元素满足条件返回 true，否则返回 false</p>\n</li>\n<li>\n<p>实例方法  <code>concat</code>   合并两个数组，返回生成新数组</p>\n</li>\n<li>\n<p>实例方法  <code>sort</code>  对原数组单元值排序</p>\n</li>\n<li>\n<p>实例方法  <code>splice</code>  删除或替换原数组单元</p>\n</li>\n<li>\n<p>实例方法  <code>reverse</code>  反转数组</p>\n</li>\n<li>\n<p>实例方法  <code>findIndex</code>   查找元素的索引值</p>\n</li>\n</ol>\n<h1 id=\"string\"><a class=\"anchor\" href=\"#string\">#</a> String</h1>\n<p><code>String</code>  是内置的构造函数，用于创建字符串。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 使用构造函数创建字符串</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 字面量创建字符串</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> str2 <span class=\"token operator\">=</span> <span class=\"token string\">'你好，世界！'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 检测是否属于同一个构造函数</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> str2<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li>实例属性  <code>length</code>  用来获取字符串的度长 (重点)</li>\n<li>实例方法  <code>split('分隔符')</code>  用来将字符串拆分成数组 (重点)</li>\n<li>实例方法  <code>substring（需要截取的第一个字符的索引[,结束的索引号]）</code>  用于字符串截取 (重点)</li>\n<li>实例方法  <code>startsWith(检测字符串[, 检测位置索引号])</code>  检测是否以某字符开头 (重点)</li>\n<li>实例方法  <code>includes(搜索的字符串[, 检测位置索引号])</code>  判断一个字符串是否包含在另一个字符串中，根据情况返回 true 或 false (重点)</li>\n<li>实例方法  <code>toUpperCase</code>  用于将字母转换成大写</li>\n<li>实例方法  <code>toLowerCase</code>  用于将就转换成小写</li>\n<li>实例方法  <code>indexOf</code>   检测是否包含某字符</li>\n<li>实例方法  <code>endsWith</code>  检测是否以某字符结尾</li>\n<li>实例方法  <code>replace</code>  用于替换字符串，支持正则匹配</li>\n<li>实例方法  <code>match</code>  用于查找字符串，支持正则匹配</li>\n</ol>\n<p>注：String 也可以当做普通函数使用，这时它的作用是强制转换成字符串数据类型。</p>\n<h1 id=\"构造函数方法浪费内存\"><a class=\"anchor\" href=\"#构造函数方法浪费内存\">#</a> 构造函数方法浪费内存</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">uname<span class=\"token punctuation\">,</span> age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>uname <span class=\"token operator\">=</span> uname<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'11'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ldh'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">const</span> zxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token string\">'zxy'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">18</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里当构造函数内部存有复杂数据类型时（放入到堆中），每次创建实例都会创建新的数据，浪费内存</p>\n<h1 id=\"原型\"><a class=\"anchor\" href=\"#原型\">#</a> 原型</h1>\n<ul>\n<li>构造函数通过原型分配的函数是所有对象共享的</li>\n<li><code>JS</code>  中规定，每一个构造函数都有一个 <code>prototype</code>  属性，所以我们也成为原型对象</li>\n<li>这个对象可以挂载函数，对象的实例化不会多次创建原型上函数，节约内存</li>\n<li>我们可以把哪些不变的方法，直接定义在 <code>prototype</code>  上，这样所有的对象的实例就可以共享这些方法</li>\n<li>构造函数和原型对象中的 <code>this</code>  都指向实例化对象。</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> that</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>that <span class=\"token operator\">===</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> that</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sing</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>o<span class=\"token punctuation\">.</span><span class=\"token function\">sing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>that <span class=\"token operator\">===</span> o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"constructor属性\"><a class=\"anchor\" href=\"#constructor属性\">#</a> constructor 属性</h2>\n<p>每个原型对象里都有一个 <code>constructor</code>  属性，指向构造函数。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter\">构造函数</span> <span class=\"token operator\">=></span> prototype中的属性和方法</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token parameter\">prototype中的constructor属性</span> <span class=\"token operator\">=></span> 构造函数</pre></td></tr></table></figure><p><strong>使用场景：</strong><br />\n如果有多个对象的方法，我们可以给原型对象采取对象形式赋值。<br />\n但是这样就会覆盖构造函数原型对象原来的内容，这样修改后的原型对象 <code>constructor</code>  就不再指向当前构造函数了。<br />\n此时，我们可以在修改后的原型对象中，添加一个 <code>constructor</code>  指向原来的构造函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">constructor</span><span class=\"token operator\">:</span> Star<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function-variable function\">sing</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token function-variable function\">dance</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Star</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 指向 Star</span></pre></td></tr></table></figure><h2 id=\"对象原型\"><a class=\"anchor\" href=\"#对象原型\">#</a> 对象原型</h2>\n<p>对象都会有一个属性 <code>__proto__</code> 指向构造函数的 <code>prototype</code>  原型对象，之所以我们对象可以使用构造函数 <code>prototype</code>  原型对象的属性和方法，就是因为对象有 <code>__proto__</code> 原型的存在</p>\n<p>注意：</p>\n<ul>\n<li><code>__proto__</code> 是 <code>JS</code>  非标准属性</li>\n<li><code>[[prototype]]</code>  和 <code>__proto__</code> 意义相同</li>\n<li>用来表明当前实例对象指向哪个原型对象 <code>prototype</code></li>\n<li><code>__proto__</code> 对象原型里也有一个 <code>constructor</code>  属性，指向创建该实例对象的构造函数</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token parameter\">构造函数</span> <span class=\"token operator\">=></span> <span class=\"token parameter\">原型prototype</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>        <span class=\"token operator\">=></span> 实例对象</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>实例对象<span class=\"token punctuation\">.</span><span class=\"token class-name\">__proto__</span><span class=\"token punctuation\">.</span><span class=\"token parameter\">constructor</span> <span class=\"token operator\">=></span> 构造函数</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>实例对象<span class=\"token punctuation\">.</span><span class=\"token parameter\">__proto__</span> <span class=\"token operator\">=></span> 原型prototype</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>prototype<span class=\"token punctuation\">.</span><span class=\"token parameter\">constructor</span> <span class=\"token operator\">=></span> 构造函数</pre></td></tr></table></figure><h2 id=\"原型继承\"><a class=\"anchor\" href=\"#原型继承\">#</a> 原型继承</h2>\n<ol>\n<li>封装 - 抽取公共部分</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> People <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">head</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">eye</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Man</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Woman</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">baby</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"2\">\n<li>继承 - 让男人和女人都能继承人类的一些属性和方法</li>\n</ol>\n<ul>\n<li>把男人女人公共的属性和方法抽取出来</li>\n<li>赋值给 Man 的原型对象，可以共享这些属性和方法</li>\n<li>注意让 <code>constructor</code>  指回 <code>Man</code>  这个构造函数</li>\n</ul>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> People <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">head</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">eye</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Man</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Man</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> People<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Man</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Man<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"问题\"><a class=\"anchor\" href=\"#问题\">#</a> 问题：</h3>\n<p>如果我们给男人添加一个吸烟的方法，发现女人也自动添加<br />\n原因：男人和女人使用了同一个对象，根据引用类型的特点，他们指向同一个对象，修改一个就会都影响</p>\n<h3 id=\"解决\"><a class=\"anchor\" href=\"#解决\">#</a> 解决：</h3>\n<p>构造函数<br />\n <code>new</code>  每次都会创建一个新的对象</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span> age <span class=\"token operator\">=</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">say</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> ldh <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">const</span> zxy <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Star</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"最终版本\"><a class=\"anchor\" href=\"#最终版本\">#</a> 最终版本</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>head <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>eyes <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Man</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Man</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用 new 生成对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Man</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Man<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 修改 constructor 指向构造函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token class-name\">Woman</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token class-name\">Woman</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Woman<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"原型链\"><a class=\"anchor\" href=\"#原型链\">#</a> 原型链</h2>\n<p>基于原型对象的继承使得不同构造函数的原型对象关联在一起，并且这种关联的关系是一种链状的结构，我们将原型对象的链状结构关系称为原型链</p>\n<pre><code>由于每个对象中都有一个`__proto__`属性，\n这个属性指向构造函数的`prototype`原型对象，\n所以`__proto__`对象原型里也有一个`constructor`属性，\n指向创建该实例对象的构造函数\n层层递推\n</code></pre>\n<h3 id=\"查找规则\"><a class=\"anchor\" href=\"#查找规则\">#</a> 查找规则</h3>\n<ol>\n<li>访问一个对象的属性（包括方法）时，首先查找这个对象自身有没有该属性</li>\n<li>如果没有就查找它的原型（也就是 <code>__proto__</code> 指向的 <code>prototype</code>  原型对象）</li>\n<li>如果还没有就查找原型对象的原型（ <code>Object</code>  的原型对象）</li>\n<li>以此类推一直找到 <code>Object</code>  位置 ( <code>null</code> )</li>\n<li><code>__proto__</code> 对象原型的意义就在于为对象成员查找机制提供一个方向，或者说是一条路径</li>\n<li>可以用 <code>instanceof</code>  运算符用于检测构造函数的 <code>prototype</code>  属性是否出现在某个实例对象的原型链上。</li>\n</ol>\n<h1 id=\"深浅拷贝\"><a class=\"anchor\" href=\"#深浅拷贝\">#</a> 深浅拷贝</h1>\n<h2 id=\"浅拷贝\"><a class=\"anchor\" href=\"#浅拷贝\">#</a> 浅拷贝：</h2>\n<p>浅拷贝和深拷贝只针对引用类型<br />\n浅拷贝：拷贝的是地址<br />\n常见方法：</p>\n<ol>\n<li>拷贝对象： <code>Object.assign()</code> / 展开运算符 <code>&#123;...obj&#125;</code>  拷贝对象</li>\n<li>拷贝数组： <code>Array.prototype.concat()</code> / <code>[...arr]</code></li>\n</ol>\n<p>若是简单数据类型拷贝值，引用数据类型拷贝的是地址（简单理解，如果是单层对象，没问题，如果有多层就有问题）</p>\n<h2 id=\"深拷贝\"><a class=\"anchor\" href=\"#深拷贝\">#</a> 深拷贝</h2>\n<p>首先浅拷贝和深拷贝只针对引用类型<br />\n深拷贝：拷贝的是对象，不是地址<br />\n常见方法：</p>\n<ol>\n<li>通过递归实现</li>\n<li><code>lodash/clneDeep</code></li>\n<li>通过 <code>JSON.stringify()</code>  实现</li>\n</ol>\n<h3 id=\"递归实现深拷贝\"><a class=\"anchor\" href=\"#递归实现深拷贝\">#</a> 递归实现深拷贝</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newObj<span class=\"token punctuation\">,</span> oldObj</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> k <span class=\"token keyword\">in</span> oldObj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// console.log(1);</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oldObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">// console.log(1);</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            newObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oldObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oldObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            newObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>newObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> oldObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">else</span> newObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> oldObj<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">deepCopy</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span> obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>o<span class=\"token punctuation\">.</span>family<span class=\"token punctuation\">[</span><span class=\"token string\">\"baby\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'xiaohong'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"js库lodash里面clonedeep内部实现深拷贝\"><a class=\"anchor\" href=\"#js库lodash里面clonedeep内部实现深拷贝\">#</a> js 库 lodash 里面 cloneDeep 内部实现深拷贝</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">cloneDeep</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"json序列化\"><a class=\"anchor\" href=\"#json序列化\">#</a> JSON 序列化</h3>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> o <span class=\"token operator\">=</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//  这里是先将 obj 转化为 JSON 字符串，然后再将字符串转化为对象，所以不会出现循环引用的问题，相当于 new 了一个对象</span></pre></td></tr></table></figure><h1 id=\"异常处理\"><a class=\"anchor\" href=\"#异常处理\">#</a> 异常处理</h1>\n<h2 id=\"throw\"><a class=\"anchor\" href=\"#throw\">#</a> throw</h2>\n<ol>\n<li><code>throw</code>  抛出异常信息，程序也会终止执行</li>\n<li><code>throw</code>  后面跟的是错误提示信息</li>\n<li><code>Error</code>  对象配合 <code>throw</code>  使用，能够设置更详细的错误信息</li>\n</ol>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">//throw ' 参数不能为空！';</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'参数不能为空!'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"trycatch\"><a class=\"anchor\" href=\"#trycatch\">#</a> try...catch</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">// 查找 DOM 节点</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">const</span> p <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.p'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        p<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">//try 代码段中执行有错误时，会执行 catch 代码段</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 查看错误信息</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token comment\">// 终止代码继续执行</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token keyword\">finally</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>          <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'执行'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'如果出现错误，我的语句不会执行'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ol>\n<li><code>try...catch</code>  用于捕获错误信息</li>\n<li>将预估可能错误的代码写在 <code>try</code>  代码段中</li>\n<li>如果 <code>try</code>  代码段中出现错误，会执行 <code>catch</code>  代码段，并截获到错误信息</li>\n</ol>\n<h2 id=\"debugger\"><a class=\"anchor\" href=\"#debugger\">#</a> debugger</h2>\n<p>相当于断电调试</p>\n<h1 id=\"处理this\"><a class=\"anchor\" href=\"#处理this\">#</a> 处理 this</h1>\n<h2 id=\"普通函数\"><a class=\"anchor\" href=\"#普通函数\">#</a> 普通函数</h2>\n<p>普通函数的调用方式决定了 <code>this</code>  的值，即【谁调用，this 就指向谁】</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span>  </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// 函数表达式</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHello</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 函数的调用方式决定了 this 的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// window</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  window<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 普通对象</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function-variable function\">walk</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>  <span class=\"token comment\">// 动态为 user 添加方法</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  user<span class=\"token punctuation\">.</span>sayHi <span class=\"token operator\">=</span> sayHi</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  uesr<span class=\"token punctuation\">.</span>sayHello <span class=\"token operator\">=</span> sayHello</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  <span class=\"token comment\">// 函数调用方式，决定了 this 的值</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  user<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  user<span class=\"token punctuation\">.</span><span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意：普通函数没有明确调用者时 <code>this</code>   默认指向 <code>window</code> , 严格模式下没有调用者时 <code>this</code>  指向 <code>undefined</code></p>\n<h2 id=\"箭头函数-2\"><a class=\"anchor\" href=\"#箭头函数-2\">#</a> 箭头函数</h2>\n<p>箭头函数中的 <code>this</code>  与普通函数完全不同，也不受调用方式的影响，事实上箭头函数中并不存在 <code>this</code> ，箭头函数中访问的 <code>this</code>  不过是箭头函数所在作用域 <code>this</code>  变量。</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 此处为 window</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 箭头函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayHi</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 该箭头函数中的 this 为函数声明环境中 this 一致</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token comment\">// 普通对象</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 该箭头函数中的 this 为函数声明环境中 this 一致</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function-variable function\">walk</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function-variable function\">sleep</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>      <span class=\"token keyword\">let</span> str <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>      <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">fn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 该箭头函数中的 this 与 sleep 中的 this 一致</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>      <span class=\"token comment\">// 调用箭头函数</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>      <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token comment\">// 动态添加方法</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  user<span class=\"token punctuation\">.</span>sayHi <span class=\"token operator\">=</span> sayHi</pre></td></tr><tr><td data-num=\"28\"></td><td><pre>  </pre></td></tr><tr><td data-num=\"29\"></td><td><pre>  <span class=\"token comment\">// 函数调用</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>  user<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>  user<span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  user<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>在开发中【使用箭头函数前要考虑函数中 <code>this</code>  的值】，事件回调函数使用箭头函数时，<br />\n <code>this</code>  为全局的 <code>window</code> ，因此 DOM 事件回调函数不推荐使用箭头函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// DOM 节点</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">const</span> btn <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'.btn'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 箭头函数 此时 this 指向了 window</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token comment\">// 普通函数 此时 this 指向了 DOM 对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  btn<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>同样由于箭头函数 <code>this</code>  的原因，基于原型的面向对象也不推荐采用箭头函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">// 原型对像上添加了箭头函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">walk</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'人都要走路...'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// window</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">const</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  p1<span class=\"token punctuation\">.</span><span class=\"token function\">walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"改变this指向\"><a class=\"anchor\" href=\"#改变this指向\">#</a> 改变 this 指向</h2>\n<h3 id=\"call\"><a class=\"anchor\" href=\"#call\">#</a> call</h3>\n<p>使用 <code>call</code>  方法调用函数，同时指定函数中 <code>this</code>  的值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">let</span> student <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小红'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token comment\">// 调用函数并指定 this 的值</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this 值为 user</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//this 值为 student</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token comment\">// 求和函数</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">// 调用 counter 函数，并传入参数</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>  <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token function\">counter</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li><code>call</code>  方法调用函数，同时指定函数中 <code>this</code>  的值</li>\n<li>使用 <code>call</code>  方法调用函数时，第 1 个参数为 <code>this</code>  指定的值</li>\n<li><code>call</code>  方法调用函数时，剩余参数为函数的参数</li>\n</ol>\n<h3 id=\"apply\"><a class=\"anchor\" href=\"#apply\">#</a> apply</h3>\n<p>使用 <code>apply</code>  方法调用函数，同时指定函数中 <code>this</code>  的值</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 调用函数并指定 this 的值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span> <span class=\"token comment\">//this 值为 user</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function\">sayHi</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span> <span class=\"token comment\">//this 值为 student</span></pre></td></tr></table></figure><p>总结：</p>\n<ol>\n<li><code>apply</code>  方法能够在调用函数的同时指定 <code>this</code>  的值</li>\n<li>使用 <code>apply</code>  方法调用函数时，第一个参数为 <code>this</code>  指定的值</li>\n<li><code>apply</code>  方法调用函数时，第二个参数为函数的参数，参数为数组</li>\n</ol>\n<h3 id=\"bind\"><a class=\"anchor\" href=\"#bind\">#</a> bind</h3>\n<p><code>bind</code>  方法并不会调用函数，而是创建一个指定了 <code>this</code>  值的新函数</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token keyword\">let</span> user <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// 调用 bind 指定 this 的值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token keyword\">let</span> sayHello <span class=\"token operator\">=</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\">// 调用使用 bind 创建的新函数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token function\">sayHello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>注意： <code>bind</code>  方法不会改变原函数，与原函数的唯一变化是改变了 <code>this</code>  的值</p>\n<h1 id=\"节流throttle\"><a class=\"anchor\" href=\"#节流throttle\">#</a> 节流 (throttle)</h1>\n<p>节流：在单位时间内，只能触发一次函数，如果单位时间内触发多次，则只执行一次<br />\n应用场景：滚动事件，resize 事件，拖拽事件，点击事件，mousemove 事件</p>\n<h2 id=\"手写throttle节流函数\"><a class=\"anchor\" href=\"#手写throttle节流函数\">#</a> 手写 throttle 节流函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token comment\">// 起始时间</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">let</span> timeId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>timeId<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 没有定时器的时候才执行一次</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>          timeId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            timeId <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这里清除定时器需要使用这个，不能使用 clearTimeout (timeId)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>          <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"14\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"lodash-throttle节流函数\"><a class=\"anchor\" href=\"#lodash-throttle节流函数\">#</a> lodash throttle 节流函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_<span class=\"token punctuation\">.</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"防抖debounce\"><a class=\"anchor\" href=\"#防抖debounce\">#</a> 防抖 (debounce)</h1>\n<p>防抖：在单位时间内，只触发一次函数，如果单位时间内触发多次，会重新计算时间，直到单位时间内没有触发函数，才执行函数<br />\n应用场景：搜索框输入事件，resize 事件，拖拽事件，点击事件，mousemove 事件</p>\n<h2 id=\"手写debounce防抖函数\"><a class=\"anchor\" href=\"#手写debounce防抖函数\">#</a> 手写 debounce 防抖函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">fn<span class=\"token punctuation\">,</span> t</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>      <span class=\"token keyword\">let</span> timeId<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>timeId<span class=\"token punctuation\">)</span> <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 有定时器的时候清除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        timeId <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 无论怎样都会重新开一个定时器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>          <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"lodash-debounce防抖函数\"><a class=\"anchor\" href=\"#lodash-debounce防抖函数\">#</a> lodash debounce 防抖函数</h2>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>_<span class=\"token punctuation\">.</span><span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"事件节流与防抖\"><a class=\"anchor\" href=\"#事件节流与防抖\">#</a> 事件节流与防抖</h1>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 1. 获取元素  要对视频进行操作</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> video <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'video'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    video<span class=\"token punctuation\">.</span>ontimeupdate <span class=\"token operator\">=</span> _<span class=\"token punctuation\">.</span><span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token comment\">//console.log (video.currentTime) 获得当前的视频时间</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// 把当前的时间存储到本地存储</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">setItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'currentTime'</span><span class=\"token punctuation\">,</span> video<span class=\"token punctuation\">.</span>currentTime<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 打开页面触发事件，就从本地存储里面取出记录的时间， 赋值给  video.currentTime</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    video<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onloadeddata</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>      <span class=\"token comment\">// console.log(111)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>      video<span class=\"token punctuation\">.</span>currentTime <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'currentTime'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure>",
            "tags": [
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://aynya.github.io/JS%E7%AC%94%E8%AE%B0/",
            "url": "https://aynya.github.io/JS%E7%AC%94%E8%AE%B0/",
            "title": "JS学习笔记",
            "date_published": "2025-02-17T16:00:00.000Z",
            "content_html": "<h1 id=\"javascript-核心概念\"><a class=\"anchor\" href=\"#javascript-核心概念\">#</a> JavaScript 核心概念</h1>\n<h2 id=\"javascript-是什么\"><a class=\"anchor\" href=\"#javascript-是什么\">#</a> 🌐 JavaScript 是什么？</h2>\n<ul>\n<li><strong>定义</strong>：运行在客户端的 <code>解释型</code> 脚本语言</li>\n<li><strong>核心作用</strong>：<br />\n✅ <strong>网页特效</strong> - 响应用户行为实现动态交互<br />\n✅ <strong>表单验证</strong> - 对输入数据进行合法性校验<br />\n✅ <strong>数据交互</strong> - 前后端数据通信与渲染<br />\n🚀 <strong>服务端开发</strong> - Node.js 运行时环境</li>\n</ul>\n<blockquote>\n<p>📌 特性：单线程 / 事件驱动 / 非阻塞 I/O</p>\n</blockquote>\n<hr />\n<h2 id=\"javascript-组成体系\"><a class=\"anchor\" href=\"#javascript-组成体系\">#</a> 🧱 JavaScript 组成体系</h2>\n<h3 id=\"1-ecmascript语言基础\"><a class=\"anchor\" href=\"#1-ecmascript语言基础\">#</a> 1.  <code>ECMAScript</code> （语言基础）</h3>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;graph TD<br />\nES [ECMAScript] --&gt; 语法<br />\n ES --&gt; 类型系统<br />\n ES --&gt; 关键字<br />\n ES --&gt; 内置对象 &lt;/pre&gt;</p>\n<h3 id=\"2-web-apis浏览器扩展\"><a class=\"anchor\" href=\"#2-web-apis浏览器扩展\">#</a> 2.  <code>Web APIs</code> （浏览器扩展）</h3>\n<table>\n<thead>\n<tr>\n<th>模块</th>\n<th>功能描述</th>\n<th>典型 API 示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DOM</td>\n<td>文档对象模型 &lt;br&gt; 操作页面元素</td>\n<td><code>querySelector()</code> &lt;br&gt; <code>addEventListener()</code></td>\n</tr>\n<tr>\n<td>BOM</td>\n<td>浏览器对象模型 &lt;br&gt; 控制浏览器行为</td>\n<td><code>alert()</code> &lt;br&gt; <code>localStorage</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 组成结构示意代码</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> JavaScript <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">ECMAScript</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token literal-property property\">version</span><span class=\"token operator\">:</span> <span class=\"token string\">'ES2022'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token literal-property property\">features</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'箭头函数'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Promise'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'解构赋值'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token literal-property property\">WebAPIs</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token constant\">DOM</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'节点操作'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'事件处理'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token constant\">BOM</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'窗口控制'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'历史记录'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"核心知识总结\"><a class=\"anchor\" href=\"#核心知识总结\">#</a> 🔑 核心知识总结</h2>\n<h3 id=\"1-ecmascript-三要素\"><a class=\"anchor\" href=\"#1-ecmascript-三要素\">#</a> 1. ECMAScript 三要素</h3>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;pie<br />\ntitle 语言基础组成<br />\n &quot;变量与类型系统&quot; : 35<br />\n&quot;流程控制&quot; : 25<br />\n&quot;函数与作用域&quot; : 40&lt;/pre&gt;</p>\n<h3 id=\"2-web-apis-能力矩阵\"><a class=\"anchor\" href=\"#2-web-apis-能力矩阵\">#</a> 2. Web APIs 能力矩阵</h3>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>关键能力</th>\n<th>典型应用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DOM</td>\n<td>节点操作 / 事件监听 / 样式控制</td>\n<td>动态表单 / 页面交互</td>\n</tr>\n<tr>\n<td>BOM</td>\n<td>窗口控制 / 存储 / 导航</td>\n<td>本地存储 / 页面跳转</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-执行机制要点\"><a class=\"anchor\" href=\"#3-执行机制要点\">#</a> 3. 执行机制要点</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 事件循环示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Start'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Timeout'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'End'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 输出顺序：Start → End → Promise → Timeout</span></pre></td></tr></table></figure><h3 id=\"4-关键概念对比\"><a class=\"anchor\" href=\"#4-关键概念对比\">#</a> 4. 关键概念对比</h3>\n<table>\n<thead>\n<tr>\n<th>概念</th>\n<th>特点</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>var/let/const</code></td>\n<td>作用域 / 提升 / 重复声明</td>\n<td><code>let</code>  块级作用域</td>\n</tr>\n<tr>\n<td><code>== vs ===</code></td>\n<td>类型转换差异</td>\n<td><code>0 == false</code>  → true</td>\n</tr>\n<tr>\n<td>同步 / 异步</td>\n<td>执行队列优先级</td>\n<td>Promise &gt; setTimeout</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"5-dom-操作三步骤\"><a class=\"anchor\" href=\"#5-dom-操作三步骤\">#</a> 5. DOM 操作三步骤</h3>\n<ol>\n<li><strong>获取元素</strong><br />\n <code>querySelector()</code>  /  <code>getElementById()</code></li>\n<li><strong>绑定事件</strong><br />\n <code>addEventListener('click', handler)</code></li>\n<li><strong>更新状态</strong><br />\n修改  <code>className/style/innerHTML</code>  等属性</li>\n</ol>\n<blockquote>\n<p>📌 来自当前案例的最佳实践：<br />\n在按钮切换样式中，通过 <code>className</code>  属性更新类名实现状态切换，注意这会覆盖原有类名</p>\n</blockquote>\n<blockquote>\n<p>💡 扩展阅读：MDN Web Docs - <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSmF2YVNjcmlwdC9HdWlkZQ==\">JavaScript 指南</span></p>\n</blockquote>\n<h1 id=\"javascript-书写位置\"><a class=\"anchor\" href=\"#javascript-书写位置\">#</a> JavaScript 书写位置</h1>\n<h2 id=\"代码组织方式\"><a class=\"anchor\" href=\"#代码组织方式\">#</a> 📍 代码组织方式</h2>\n<h3 id=\"1-内部脚本internal\"><a class=\"anchor\" href=\"#1-内部脚本internal\">#</a> 1. 内部脚本（Internal）</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 推荐位置 --></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 1. 使用独立 script 标签</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 2. 建议放在 body 闭合前（确保 DOM 加载）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'内部脚本执行'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  </span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>特点</strong>：</p>\n<ul>\n<li>🟢 快速原型开发</li>\n<li>🔴 难以维护 / 复用</li>\n<li>⚠️ 多个脚本按顺序执行</li>\n</ul>\n<h3 id=\"2-外部脚本external\"><a class=\"anchor\" href=\"#2-外部脚本external\">#</a> 2. 外部脚本（External）</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">&lt;!-- 最佳实践：添加 defer 属性 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">defer</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>模块化方案</strong>：<br />\n&lt;pre class=&quot;mermaid&quot;&gt;graph LR<br />\nHTML --&gt; Script [script 标签]<br />\n Script --&gt; JS [JS 文件]<br />\n JS --&gt; Function [功能模块]<br />\n Function --&gt; Export [导出]<br />\n HTML --&gt; Import [导入使用]&lt;/pre&gt;</p>\n<table>\n<thead>\n<tr>\n<th>加载策略</th>\n<th>执行时机</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>defer</code></td>\n<td>DOM 解析后顺序执行</td>\n<td>常规依赖</td>\n</tr>\n<tr>\n<td><code>async</code></td>\n<td>异步加载立即执行</td>\n<td>独立第三方库</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"3-内联脚本inline-️慎用\"><a class=\"anchor\" href=\"#3-内联脚本inline-️慎用\">#</a> 3. 内联脚本（Inline） ⚠️慎用</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token special-attr\"><span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token value javascript language-javascript\"><span class=\"token function\">handleClick</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>点击<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>替代方案</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 推荐的事件绑定方式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token string\">'click'</span><span class=\"token punctuation\">,</span> handleClick<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>三种方式对比</strong>：</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>可维护性</th>\n<th>缓存</th>\n<th>适用场景</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>内部</td>\n<td>★☆☆☆☆</td>\n<td>无</td>\n<td>快速测试 / 小型项目</td>\n</tr>\n<tr>\n<td>外部</td>\n<td>★★★★★</td>\n<td>有</td>\n<td>中大型项目</td>\n</tr>\n<tr>\n<td>内联</td>\n<td>★☆☆☆☆</td>\n<td>无</td>\n<td>特殊演示场景</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>📌 <strong>最佳实践</strong>：</p>\n<ol>\n<li>生产环境推荐使用 <code>外部脚本+defer</code></li>\n<li>避免混用多种加载方式</li>\n<li>使用 ES Module 实现现代模块化</li>\n</ol>\n</blockquote>\n<h1 id=\"javascript-输入输出语法\"><a class=\"anchor\" href=\"#javascript-输入输出语法\">#</a> JavaScript 输入输出语法</h1>\n<h2 id=\"输出方式对比\"><a class=\"anchor\" href=\"#输出方式对比\">#</a> 💻 输出方式对比</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;flowchart TD<br />\nA [输出方式] --&gt; B [页面输出]<br />\n A --&gt; C [控制台输出]<br />\n A --&gt; D [弹窗输出]<br />\nB --&gt; B1{document.write}<br />\nC --&gt; C1{console.log}<br />\nD --&gt; D1{alert}&lt;/pre&gt;</p>\n<h3 id=\"1-页面内容输出\"><a class=\"anchor\" href=\"#1-页面内容输出\">#</a> 1. 页面内容输出</h3>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;h3>动态内容&lt;/h3>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 会解析 HTML 标签</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;p style=\"color:blue\">异步内容&lt;/p>'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><strong>特点</strong>：</p>\n<ul>\n<li>🟢 快速插入内容</li>\n<li>🔴 覆盖已有文档流（在已加载的页面中使用会清空内容）</li>\n<li>⚠️ 仅适合初始化阶段使用</li>\n</ul>\n<h3 id=\"2-控制台输出\"><a class=\"anchor\" href=\"#2-控制台输出\">#</a> 2. 控制台输出</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">debug</span><span class=\"token punctuation\">(</span><span class=\"token string\">'调试信息'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 蓝色提示</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">warn</span><span class=\"token punctuation\">(</span><span class=\"token string\">'警告信息'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 黄色警告 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'错误信息'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 红色错误</span></pre></td></tr></table></figure><p><strong>调试技巧</strong>：<br />\n&lt;pre class=&quot;mermaid&quot;&gt;pie<br />\ntitle 控制台使用频率<br />\n &quot;console.log&quot; : 65<br />\n&quot;断点调试&quot; : 25<br />\n&quot;其他方法&quot; : 10&lt;/pre&gt;</p>\n<h3 id=\"3-弹窗输出\"><a class=\"anchor\" href=\"#3-弹窗输出\">#</a> 3. 弹窗输出</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'操作成功！'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 模态对话框，阻塞后续代码执行</span></pre></td></tr></table></figure><hr />\n<h2 id=\"️-输入方式\"><a class=\"anchor\" href=\"#️-输入方式\">#</a> ⌨️ 输入方式</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> userName <span class=\"token operator\">=</span> <span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'请输入用户名：'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 返回值类型：String|null</span></pre></td></tr></table></figure><p><strong>输入处理流程</strong>：<br />\n&lt;pre class=&quot;mermaid&quot;&gt;sequenceDiagram<br />\n 用户 -&gt;&gt; 浏览器：点击确认<br />\n浏览器 -&gt;&gt;JS: 返回输入值<br />\n用户 -&gt;&gt; 浏览器：点击取消<br />\n浏览器 -&gt;&gt;JS: 返回 null&lt;/pre&gt;</p>\n<hr />\n<h2 id=\"执行特性\"><a class=\"anchor\" href=\"#执行特性\">#</a> ⚡ 执行特性</h2>\n<h3 id=\"代码执行优先级\"><a class=\"anchor\" href=\"#代码执行优先级\">#</a> 代码执行优先级</h3>\n<ol>\n<li>同步代码 &gt; 弹窗交互 &gt; DOM 渲染</li>\n<li>示例现象：</li>\n</ol>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'阻断渲染'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">'内容'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 后执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h3 id=\"最佳实践建议\"><a class=\"anchor\" href=\"#最佳实践建议\">#</a> 最佳实践建议</h3>\n<table>\n<thead>\n<tr>\n<th>场景</th>\n<th>推荐方式</th>\n<th>原因</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>调试信息</td>\n<td>console.debug</td>\n<td>无副作用 / 分类明确</td>\n</tr>\n<tr>\n<td>用户交互</td>\n<td>自定义模态框</td>\n<td>样式可控 / 体验更好</td>\n</tr>\n<tr>\n<td>页面初始化</td>\n<td>document.write</td>\n<td>便捷高效</td>\n</tr>\n<tr>\n<td>生产环境日志</td>\n<td><span class=\"exturl\" data-url=\"aHR0cDovL2NvbnNvbGUuaW5mbw==\">console.info</span></td>\n<td>便于日志收集</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>⚠️ <strong>注意事项</strong>：</p>\n<ol>\n<li>alert () 会阻塞事件循环，现代前端框架中已较少使用</li>\n<li>prompt () 返回值需做类型检查：<br />\n <code>const input = prompt() || 'default'</code></li>\n</ol>\n</blockquote>\n<h1 id=\"javascript-变量使用指南\"><a class=\"anchor\" href=\"#javascript-变量使用指南\">#</a> JavaScript 变量使用指南</h1>\n<h2 id=\"变量声明三剑客\"><a class=\"anchor\" href=\"#变量声明三剑客\">#</a> 📦 变量声明三剑客</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;flowchart TD<br />\nA [声明方式] --&gt; B [&quot;var（旧标准）&quot;]<br />\n A --&gt; C [&quot;let（块级作用域）&quot;]<br />\n A --&gt; D [&quot;const（常量）&quot;]&lt;/pre&gt;</p>\n<h3 id=\"声明方式对比\"><a class=\"anchor\" href=\"#声明方式对比\">#</a> 声明方式对比</h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>var</th>\n<th>let</th>\n<th>const</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>作用域</td>\n<td>函数级</td>\n<td>块级</td>\n<td>块级</td>\n</tr>\n<tr>\n<td>重复声明</td>\n<td>✅允许</td>\n<td>❌禁止</td>\n<td>❌禁止</td>\n</tr>\n<tr>\n<td>暂时性死区</td>\n<td>❌不存在</td>\n<td>✅存在</td>\n<td>✅存在</td>\n</tr>\n<tr>\n<td>变量提升</td>\n<td>✅声明提升</td>\n<td>❌</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>初始值要求</td>\n<td>❌不需要</td>\n<td>❌不需要</td>\n<td>✅必须</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"使用场景示例\"><a class=\"anchor\" href=\"#使用场景示例\">#</a> 🔧 使用场景示例</h2>\n<h3 id=\"1-基础使用\"><a class=\"anchor\" href=\"#1-基础使用\">#</a> 1. 基础使用</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 变量声明周期</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 可变的量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">MAX_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 不变的常量</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> oldVar <span class=\"token operator\">=</span> <span class=\"token string\">'弃用'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 旧写法（不推荐）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 变量更新</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>count <span class=\"token operator\">=</span> count <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// ✅ 合法</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// MAX_SIZE = 200;      // ❌ TypeError</span></pre></td></tr></table></figure><h3 id=\"2-作用域差异\"><a class=\"anchor\" href=\"#2-作用域差异\">#</a> 2. 作用域差异</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1 ✅</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// console.log(b); // ❌ ReferenceError</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token comment\">// console.log(c); // ❌ ReferenceError</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"3-变量提升现象\"><a class=\"anchor\" href=\"#3-变量提升现象\">#</a> 3. 变量提升现象</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined（变量提升）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// console.log(y); // ❌ ReferenceError</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> y <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr />\n<h2 id=\"最佳实践\"><a class=\"anchor\" href=\"#最佳实践\">#</a> 🚩 最佳实践</h2>\n<h3 id=\"命名规范\"><a class=\"anchor\" href=\"#命名规范\">#</a> 命名规范</h3>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;pie<br />\ntitle 命名风格<br />\n &quot;camelCase&quot; : 65<br />\n&quot;CONSTANT_CASE&quot; : 25<br />\n&quot;其他&quot; : 10&lt;/pre&gt;</p>\n<ol>\n<li>\n<p><strong>基础规则</strong>：</p>\n<ul>\n<li>字母 / 下划线 /$ 开头</li>\n<li>区分大小写</li>\n<li>避免保留字</li>\n</ul>\n</li>\n<li>\n<p><strong>语义化命名</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// Bad</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// Good</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">MAX_TIMEOUT_MS</span> <span class=\"token operator\">=</span> <span class=\"token number\">3600</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> userLoginToken<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"使用建议\"><a class=\"anchor\" href=\"#使用建议\">#</a> 使用建议</h3>\n<ol>\n<li>优先使用  <code>const</code> ，其次  <code>let</code> ，不用  <code>var</code></li>\n<li>使用  <code>'use strict'</code>  开启严格模式</li>\n<li>复杂对象使用  <code>Object.freeze()</code>  创建深层常量<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> config <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">api</span><span class=\"token operator\">:</span> <span class=\"token string\">'https://api.example.com'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<hr />\n<h2 id=\"常见问题\"><a class=\"anchor\" href=\"#常见问题\">#</a> ❗ 常见问题</h2>\n<h3 id=\"1-未声明变量\"><a class=\"anchor\" href=\"#1-未声明变量\">#</a> 1. 未声明变量</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动成为全局变量（严格模式下报错）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"2-动态类型陷阱\"><a class=\"anchor\" href=\"#2-动态类型陷阱\">#</a> 2. 动态类型陷阱</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// number</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>price <span class=\"token operator\">=</span> <span class=\"token string\">'$100'</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//string（合法但易出错）</span></pre></td></tr></table></figure><h3 id=\"3-闭包引用\"><a class=\"anchor\" href=\"#3-闭包引用\">#</a> 3. 闭包引用</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 输出 3 次 3</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 解决方案：改用 let 声明 i</span></pre></td></tr></table></figure><blockquote>\n<p>💡 调试技巧：使用  <code>typeof</code>  检查类型：<br />\n <code>console.log(typeof count); // &quot;number&quot;</code></p>\n</blockquote>\n<h1 id=\"变量存储原理与命名规范\"><a class=\"anchor\" href=\"#变量存储原理与命名规范\">#</a> 变量存储原理与命名规范</h1>\n<h2 id=\"变量本质与内存管理\"><a class=\"anchor\" href=\"#变量本质与内存管理\">#</a> 🧠 变量本质与内存管理</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 示例：变量与内存的关系</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 内存分配 4 字节存储数字 10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 重新分配内存存储字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 引用同一内存地址</span></pre></td></tr></table></figure><h3 id=\"核心概念\"><a class=\"anchor\" href=\"#核心概念\">#</a> 核心概念</h3>\n<ol>\n<li>\n<p><strong>内存单元</strong></p>\n<ul>\n<li>每个变量占用特定内存空间</li>\n<li>大小由数据类型决定（Number: 8 字节，Boolean: 1 字节...）</li>\n</ul>\n</li>\n<li>\n<p><strong>变量生命周期</strong></p>\n<ol>\n<li>声明阶段 → 分配内存</li>\n<li>赋值阶段 → 写入数据</li>\n<li>使用阶段 → 读取数据</li>\n<li>销毁阶段 → 内存释放（垃圾回收）</li>\n</ol>\n</li>\n<li>\n<p><strong>特殊现象</strong></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 地址引用示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> arr2 <span class=\"token operator\">=</span> arr1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>arr2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3] （共享内存地址）</span></pre></td></tr></table></figure><h2 id=\"命名规则强制遵守\"><a class=\"anchor\" href=\"#命名规则强制遵守\">#</a> 📝 命名规则（强制遵守）</h2>\n<h3 id=\"语法规则\"><a class=\"anchor\" href=\"#语法规则\">#</a> 语法规则</h3>\n<ul>\n<li>✅ 允许字符：字母 / 数字 / 下划线 (_)/ 美元符 ($)</li>\n<li>✅ 开头禁止：数字开头无效（ <code>let 2name; // ❌</code> ）</li>\n<li>✅ 大小写敏感： <code>name</code>  ≠  <code>Name</code></li>\n<li>✅ 保留字禁用： <code>let class = 'test'; // ❌</code></li>\n</ul>\n<h3 id=\"作用域规则\"><a class=\"anchor\" href=\"#作用域规则\">#</a> 作用域规则</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token keyword\">var</span> localVar <span class=\"token operator\">=</span> <span class=\"token string\">'局部'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 函数作用域</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> blockVar <span class=\"token operator\">=</span> <span class=\"token string\">'块级'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 块级作用域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// console.log(localVar); // ❌ ReferenceError</span></pre></td></tr></table></figure><h2 id=\"命名规范推荐遵守\"><a class=\"anchor\" href=\"#命名规范推荐遵守\">#</a> 🎨 命名规范（推荐遵守）</h2>\n<h3 id=\"基础原则\"><a class=\"anchor\" href=\"#基础原则\">#</a> 基础原则</h3>\n<table>\n<thead>\n<tr>\n<th>规范类型</th>\n<th>正确示例</th>\n<th>错误示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>语义化命名</td>\n<td><code>userAge</code></td>\n<td><code>a</code></td>\n</tr>\n<tr>\n<td>避免单个字母</td>\n<td><code>index</code></td>\n<td><code>i</code> （循环变量除外）</td>\n</tr>\n<tr>\n<td>常量全大写</td>\n<td><code>MAX_SIZE</code></td>\n<td><code>maxSize</code></td>\n</tr>\n<tr>\n<td>布尔值前缀</td>\n<td><code>isValid</code> / <code>hasToken</code></td>\n<td><code>check</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"进阶建议\"><a class=\"anchor\" href=\"#进阶建议\">#</a> 进阶建议</h3>\n<ol>\n<li>\n<p><strong>项目一致性</strong></p>\n<ul>\n<li>选择一种命名风格（camelCase/PascalCase）并统一</li>\n</ul>\n</li>\n<li>\n<p><strong>避免缩写</strong></p>\n<ul>\n<li><code>calculatePrice</code>  而非  <code>calcPrc</code></li>\n</ul>\n</li>\n<li>\n<p><strong>类型暗示</strong></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组复数形式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 函数动词开头</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">validateForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// Promise 对象加 Async 后缀</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> loginAsync <span class=\"token operator\">=</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/api'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"️-注意事项\"><a class=\"anchor\" href=\"#️-注意事项\">#</a> ⚠️ 注意事项</h2>\n<ol>\n<li><strong>严格模式要求</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token string\">'use strict'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ ReferenceError（必须先声明）</span></pre></td></tr></table></figure><ol start=\"2\">\n<li><strong>全局污染风险</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">setGlobal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  globalVar <span class=\"token operator\">=</span> <span class=\"token string\">'危险!'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 自动成为 window 属性</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ol start=\"3\">\n<li><strong>命名冲突检测</strong></li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// ESLint 规则示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/* eslint no-redeclare: \"error\" */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ 触发警告</span></pre></td></tr></table></figure><h1 id=\"数组操作基础\"><a class=\"anchor\" href=\"#数组操作基础\">#</a> 数组操作基础</h1>\n<h2 id=\"数组声明与初始化\"><a class=\"anchor\" href=\"#数组声明与初始化\">#</a> 🧩 数组声明与初始化</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 方式 1：字面量声明（推荐）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'苹果'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'香蕉'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 方式 2：构造函数声明</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> numbers <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 混合类型数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> mixed <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'文本'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span><span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'对象'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"声明方式对比-2\"><a class=\"anchor\" href=\"#声明方式对比-2\">#</a> 声明方式对比</h3>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>可读性</th>\n<th>特殊场景</th>\n<th>注意点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>字面量</td>\n<td>★★★★★</td>\n<td>常规初始化</td>\n<td>首选方式</td>\n</tr>\n<tr>\n<td>构造函数</td>\n<td>★★☆☆☆</td>\n<td>创建空数组 / 指定长度数组</td>\n<td><code>new Array(3)</code>  创建长度为 3 的空槽数组</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"数据访问与操作\"><a class=\"anchor\" href=\"#数据访问与操作\">#</a> 🔍 数据访问与操作</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基础访问</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> firstFruit <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ' 苹果'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'橘子'</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// 自动扩容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 长度属性</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> fruits<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 3（动态更新）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 越界访问示例</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>fruits<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//undefined（不会报错）</span></pre></td></tr></table></figure><h3 id=\"索引规则\"><a class=\"anchor\" href=\"#索引规则\">#</a> 索引规则</h3>\n<table>\n<thead>\n<tr>\n<th>索引类型</th>\n<th>示例</th>\n<th>返回值</th>\n<th>安全性</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>有效正索引</td>\n<td>arr[0]</td>\n<td>元素值</td>\n<td>✅安全</td>\n</tr>\n<tr>\n<td>负索引</td>\n<td>arr[-1]</td>\n<td>undefined</td>\n<td>⚠️需转换</td>\n</tr>\n<tr>\n<td>超范围索引</td>\n<td>arr[100]</td>\n<td>undefined</td>\n<td>⚠️注意</td>\n</tr>\n<tr>\n<td>非整数索引</td>\n<td>arr[1.5]</td>\n<td>undefined</td>\n<td>⚠️无效</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"数组特性\"><a class=\"anchor\" href=\"#数组特性\">#</a> 🌟 数组特性</h2>\n<h3 id=\"1-动态类型支持\"><a class=\"anchor\" href=\"#1-动态类型支持\">#</a> 1. 动态类型支持</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 多类型元素示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> smartArray <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token number\">100</span><span class=\"token punctuation\">,</span>                         <span class=\"token comment\">// Number</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token string\">'字符串'</span><span class=\"token punctuation\">,</span>                    <span class=\"token comment\">// String</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">type</span><span class=\"token operator\">:</span> <span class=\"token string\">'对象'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>            <span class=\"token comment\">// Object</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>                      <span class=\"token comment\">// Array</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> <span class=\"token string\">'函数'</span> <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// Function</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-长度动态变化\"><a class=\"anchor\" href=\"#2-长度动态变化\">#</a> 2. 长度动态变化</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'跳跃赋值'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6（自动填充空位）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// [空 ×5, \"跳跃赋值\"]</span></pre></td></tr></table></figure><h3 id=\"3-引用类型特性\"><a class=\"anchor\" href=\"#3-引用类型特性\">#</a> 3. 引用类型特性</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>b<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1,2,3]（共享内存地址）</span></pre></td></tr></table></figure><hr />\n<h2 id=\"最佳实践-2\"><a class=\"anchor\" href=\"#最佳实践-2\">#</a> 🚩 最佳实践</h2>\n<ol>\n<li>\n<p><strong>初始化建议</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建空数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// ✅ 推荐</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ⚠️ 少用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 创建填充数组</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> nums <span class=\"token operator\">=</span> <span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [0,0,0,0,0]</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>安全访问技巧</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 防止越界</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> last <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span> <span class=\"token string\">'默认值'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 可选链操作符（ES2020）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> arr<span class=\"token operator\">?.</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">??</span> <span class=\"token string\">'不存在'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>类型检测</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// \"object\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">//true（推荐检测方式）</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>⚠️ <strong>常见错误</strong>：</p>\n<ol>\n<li>混淆索引与长度： <code>arr[arr.length] = ...</code>  导致越界</li>\n<li>误用对象语法： <code>arr&#123;0: '错误'&#125;</code>  应该用方括号</li>\n<li>跳过索引赋值： <code>arr[5] = ...</code>  产生空位</li>\n</ol>\n</blockquote>\n<h1 id=\"常量声明与使用规范\"><a class=\"anchor\" href=\"#常量声明与使用规范\">#</a> 常量声明与使用规范</h1>\n<h2 id=\"核心特性\"><a class=\"anchor\" href=\"#核心特性\">#</a> 🚨 核心特性</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14159</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// PI = 3.14; ❌ TypeError（不可重新赋值）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 引用类型特殊案例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">USER</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">name</span><span class=\"token operator\">:</span> <span class=\"token string\">'Alice'</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token constant\">USER</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">25</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 允许修改属性</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// USER = &#123;&#125;;  ❌ 禁止重新分配内存地址</span></pre></td></tr></table></figure><h3 id=\"常量-vs-变量\"><a class=\"anchor\" href=\"#常量-vs-变量\">#</a> 常量 vs 变量</h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th><code>const</code></th>\n<th><code>let</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>重新赋值</td>\n<td>❌</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>块级作用域</td>\n<td>✅</td>\n<td>✅</td>\n</tr>\n<tr>\n<td>必须初始化</td>\n<td>✅</td>\n<td>❌</td>\n</tr>\n<tr>\n<td>提升行为</td>\n<td>TDZ（暂时性死区）</td>\n<td>TDZ（暂时性死区）</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"声明与使用\"><a class=\"anchor\" href=\"#声明与使用\">#</a> 📝 声明与使用</h2>\n<h3 id=\"1-基础语法\"><a class=\"anchor\" href=\"#1-基础语法\">#</a> 1. 基础语法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 正确声明</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">MAX_SIZE</span> <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 错误示例</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//const UNINITIALIZED; ❌ 必须初始化</span></pre></td></tr></table></figure><h3 id=\"2-引用类型处理\"><a class=\"anchor\" href=\"#2-引用类型处理\">#</a> 2. 引用类型处理</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数组常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">COLORS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">COLORS</span><span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 允许修改内容</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// COLORS = ['new']; ❌ 禁止重新赋值</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 对象常量</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">CONFIG</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token literal-property property\">debug</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token constant\">CONFIG</span><span class=\"token punctuation\">.</span>debug <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 修改属性</span></pre></td></tr></table></figure><h3 id=\"3-深度冻结技巧\"><a class=\"anchor\" href=\"#3-深度冻结技巧\">#</a> 3. 深度冻结技巧</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 实现真正不可变</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">IMMUTABLE_OBJ</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">key</span><span class=\"token operator\">:</span> <span class=\"token string\">'value'</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// IMMUTABLE_OBJ.key = 'new'; ❌ 严格模式报错</span></pre></td></tr></table></figure><hr />\n<h2 id=\"最佳实践-3\"><a class=\"anchor\" href=\"#最佳实践-3\">#</a> 🚩 最佳实践</h2>\n<h3 id=\"命名规范-2\"><a class=\"anchor\" href=\"#命名规范-2\">#</a> 命名规范</h3>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;pie<br />\ntitle 常量命名风格<br />\n &quot;全大写 + 下划线&quot; : 75<br />\n&quot;PascalCase&quot; : 15<br />\n&quot;其他&quot; : 10&lt;/pre&gt;</p>\n<ol>\n<li>\n<p><strong>基础规则</strong>：</p>\n<ul>\n<li>全大写字母 + 下划线分隔（ <code>MAX_RETRIES</code> ）</li>\n<li>位于文件顶部集中声明</li>\n<li>优先用于配置项和魔法数字</li>\n</ul>\n</li>\n<li>\n<p><strong>使用场景</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 数学常量</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">GOLDEN_RATIO</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.618</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 环境配置</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">API_ENDPOINT</span> <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.example.com'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 状态码映射</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">HTTP_CODES</span> <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token constant\">OK</span><span class=\"token operator\">:</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token constant\">NOT_FOUND</span><span class=\"token operator\">:</span> <span class=\"token number\">404</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<hr />\n<h2 id=\"️-注意事项-2\"><a class=\"anchor\" href=\"#️-注意事项-2\">#</a> ⚠️ 注意事项</h2>\n<h3 id=\"1-暂时性死区tdz\"><a class=\"anchor\" href=\"#1-暂时性死区tdz\">#</a> 1. 暂时性死区（TDZ）</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// console.log(VAL); ❌ ReferenceError</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">VAL</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"2-重复声明检查\"><a class=\"anchor\" href=\"#2-重复声明检查\">#</a> 2. 重复声明检查</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">TEST</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// const TEST = 2; ❌ SyntaxError</span></pre></td></tr></table></figure><h3 id=\"3-浏览器兼容\"><a class=\"anchor\" href=\"#3-浏览器兼容\">#</a> 3. 浏览器兼容</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// IE10 及以下不支持 const</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 使用 Babel 等工具转换</span></pre></td></tr></table></figure><h3 id=\"4-引用类型陷阱\"><a class=\"anchor\" href=\"#4-引用类型陷阱\">#</a> 4. 引用类型陷阱</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">USERS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Alice'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token constant\">USERS</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Bob'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ 错误</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token constant\">USERS</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'Bob'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 允许（可能引发意外修改）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 解决方案：使用 Object.freeze ()</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">freeze</span><span class=\"token punctuation\">(</span><span class=\"token constant\">USERS</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// USERS.push ('Bob'); ❌ 严格模式报错</span></pre></td></tr></table></figure><blockquote>\n<p>💡 <strong>扩展技巧</strong>：<br />\n使用  <code>Object.defineProperty()</code>  创建不可配置、不可写的属性：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">CONST_DATA</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CONST_DATA</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">value</span><span class=\"token operator\">:</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">writable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token literal-property property\">configurable</span><span class=\"token operator\">:</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"javascript-数据类型体系\"><a class=\"anchor\" href=\"#javascript-数据类型体系\">#</a> JavaScript 数据类型体系</h1>\n<h2 id=\"两大分类\"><a class=\"anchor\" href=\"#两大分类\">#</a> 📌 两大分类</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;graph LR<br />\nA [数据类型] --&gt; B [基本类型]<br />\n A --&gt; C [引用类型]<br />\n B --&gt; 数字<br />\n B --&gt; 字符串<br />\n B --&gt; 布尔<br />\n B --&gt; Undefined<br />\nB --&gt; Null<br />\nB --&gt; Symbol<br />\nC --&gt; 对象<br />\n C --&gt; 数组<br />\n C --&gt; 函数 &lt;/pre&gt;</p>\n<h2 id=\"数字类型number\"><a class=\"anchor\" href=\"#数字类型number\">#</a> 🔢 数字类型（Number）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token number\">99</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 整数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> score <span class=\"token operator\">=</span> <span class=\"token number\">89.5</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 小数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">40</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 负数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token operator\">/</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// NaN（Not a Number）</span></pre></td></tr></table></figure><h3 id=\"特殊值处理\"><a class=\"anchor\" href=\"#特殊值处理\">#</a> 特殊值处理</h3>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Infinity</code></td>\n<td>超出数值范围的极大数</td>\n<td><code>1.7976931348623157E+10308</code></td>\n</tr>\n<tr>\n<td><code>-Infinity</code></td>\n<td>超出数值范围的极小数</td>\n<td><code>-1.7976931348623157E+10308</code></td>\n</tr>\n<tr>\n<td><code>NaN</code></td>\n<td>无效数学操作的结果（具有粘性）</td>\n<td><code>0/0 → NaN</code> ， <code>NaN + 5 → NaN</code></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"字符串类型string\"><a class=\"anchor\" href=\"#字符串类型string\">#</a> 📜 字符串类型（String）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"双引号\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2 <span class=\"token operator\">=</span> <span class=\"token string\">'单引号'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> s3 <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">模板字符串：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>s1<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> 和 </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>s2<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"模板字符串特性\"><a class=\"anchor\" href=\"#模板字符串特性\">#</a> 模板字符串特性</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 多行文本</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> poem <span class=\"token operator\">=</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">床前明月光</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>疑是地上霜</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 表达式运算</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">结果：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token operator\">*</span> <span class=\"token number\">4</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"结果：14\"</span></pre></td></tr></table></figure><h3 id=\"转义字符表\"><a class=\"anchor\" href=\"#转义字符表\">#</a> 转义字符表</h3>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>含义</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行</td>\n<td><code>&quot;第一行\\n第二行&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠</td>\n<td><code>&quot;路径：C:\\\\&quot;</code></td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符</td>\n<td><code>&quot;姓名\\t年龄&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"布尔类型boolean\"><a class=\"anchor\" href=\"#布尔类型boolean\">#</a> 🎲 布尔类型（Boolean）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> isLogin <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 已登录</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> hasPermission <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无权限</span></pre></td></tr></table></figure><h3 id=\"逻辑运算规则\"><a class=\"anchor\" href=\"#逻辑运算规则\">#</a> 逻辑运算规则</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>结果</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>true &amp;&amp; 5</code></td>\n<td>5</td>\n<td>返回最后一个真值</td>\n</tr>\n<tr>\n<td><code>false || 0</code></td>\n<td>0</td>\n<td>返回最后一个假值</td>\n</tr>\n<tr>\n<td><code>!''</code></td>\n<td>true</td>\n<td>空字符串转为 false 取反</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"undefined-与-null\"><a class=\"anchor\" href=\"#undefined-与-null\">#</a> ❓ Undefined 与 Null</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> uninitialized<span class=\"token punctuation\">;</span>  <span class=\"token comment\">//undefined（未赋值）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> emptyObj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//null（空对象指针）</span></pre></td></tr></table></figure><h3 id=\"对比差异\"><a class=\"anchor\" href=\"#对比差异\">#</a> 对比差异</h3>\n<table>\n<thead>\n<tr>\n<th>特性</th>\n<th>Undefined</th>\n<th>Null</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>类型检测</td>\n<td><code>&quot;undefined&quot;</code></td>\n<td><code>&quot;object&quot;</code></td>\n</tr>\n<tr>\n<td>产生场景</td>\n<td>变量未初始化时</td>\n<td>显式赋空值时</td>\n</tr>\n<tr>\n<td>等同性检测</td>\n<td><code>==</code>  返回 true</td>\n<td><code>===</code>  返回 false</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h2 id=\"类型检测\"><a class=\"anchor\" href=\"#类型检测\">#</a> 🔍 类型检测</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基础用法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"number\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// \"string\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"boolean\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 特殊案例</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// \"object\"（历史遗留问题）</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// \"function\"</span></pre></td></tr></table></figure><h3 id=\"检测技巧\"><a class=\"anchor\" href=\"#检测技巧\">#</a> 检测技巧</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 安全检测 null 类型</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">isNull</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> value <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 数组类型检测</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Array<span class=\"token punctuation\">.</span><span class=\"token function\">isArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h1 id=\"类型转换指南\"><a class=\"anchor\" href=\"#类型转换指南\">#</a> 类型转换指南</h1>\n<h2 id=\"转换类型对比\"><a class=\"anchor\" href=\"#转换类型对比\">#</a> 🔄 转换类型对比</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;graph TD<br />\nA [类型转换] --&gt; B [隐式转换]<br />\n A --&gt; C [显式转换]<br />\n B --&gt; D [算术运算自动转换]<br />\n B --&gt; E [逻辑运算自动转换]<br />\nC --&gt; F[&quot;Number()&quot;]<br />\nC --&gt; G[&quot;parseInt()&quot;]<br />\nC --&gt; H[&quot;parseFloat()&quot;]&lt;/pre&gt;</p>\n<hr />\n<h2 id=\"️-隐式转换规则\"><a class=\"anchor\" href=\"#️-隐式转换规则\">#</a> 🕵️ 隐式转换规则</h2>\n<h3 id=\"运算符行为差异\"><a class=\"anchor\" href=\"#运算符行为差异\">#</a> 运算符行为差异</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>转换规则</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>+</td>\n<td>任意操作数为字符串则字符串拼接</td>\n<td><code>'3' + 2</code></td>\n<td>&quot;32&quot;</td>\n</tr>\n<tr>\n<td>- * /</td>\n<td>全部转换为数字进行运算</td>\n<td><code>'8' - '3'</code></td>\n<td>5</td>\n</tr>\n<tr>\n<td>==</td>\n<td>类型转换后比较</td>\n<td><code>'5' == 5</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td>===</td>\n<td>严格不转换比较</td>\n<td><code>'5' === 5</code></td>\n<td>false</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"实用技巧\"><a class=\"anchor\" href=\"#实用技巧\">#</a> 实用技巧</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 快速转数字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> price <span class=\"token operator\">=</span> <span class=\"token operator\">+</span><span class=\"token string\">'99.5'</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 99.5（正号转换）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token string\">'10'</span> <span class=\"token operator\">*</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 10（算术运算转换）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 字符串拼接</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// \"22\"（数字转字符串）</span></pre></td></tr></table></figure><hr />\n<h2 id=\"显式转换方法\"><a class=\"anchor\" href=\"#显式转换方法\">#</a> 🔧 显式转换方法</h2>\n<h3 id=\"1-number\"><a class=\"anchor\" href=\"#1-number\">#</a> 1. Number()</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'123'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 123</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12.3元'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN（含非数字字符）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 0（空字符串转为 0）</span></pre></td></tr></table></figure><h3 id=\"2-parseint\"><a class=\"anchor\" href=\"#2-parseint\">#</a> 2. parseInt()</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'12px'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 12（提取整数部分）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'101'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 5（二进制转换）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.9'</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 3（舍去小数）</span></pre></td></tr></table></figure><h3 id=\"3-parsefloat\"><a class=\"anchor\" href=\"#3-parsefloat\">#</a> 3. parseFloat()</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3.14.15'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3.14（提取首个浮点数）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">'￥99.9'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// NaN（首字符非数字）</span></pre></td></tr></table></figure><hr />\n<h2 id=\"️-注意事项-3\"><a class=\"anchor\" href=\"#️-注意事项-3\">#</a> ⚠️ 注意事项</h2>\n<ol>\n<li>\n<p><strong>NaN 特性</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">typeof</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// \"number\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">//false（唯一不等于自身）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'字符串'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//true（全局方法）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">'字符串'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//false（更安全检测）</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>空值处理</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// NaN</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>布尔转换</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// 0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span>     <span class=\"token comment\">// 1</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>💡 <strong>最佳实践</strong>：表单输入处理优先使用 <code>parseFloat</code>  组合验证</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> input <span class=\"token operator\">=</span> <span class=\"token string\">'￥99.5'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[^\\d.]</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"javascript-运算符详解\"><a class=\"anchor\" href=\"#javascript-运算符详解\">#</a> JavaScript 运算符详解</h1>\n<h2 id=\"赋值运算符\"><a class=\"anchor\" href=\"#赋值运算符\">#</a> 💰 赋值运算符</h2>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>示例</th>\n<th>等价于</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>=</code></td>\n<td><code>x = 5</code></td>\n<td>-</td>\n<td>基础赋值</td>\n</tr>\n<tr>\n<td><code>+=</code></td>\n<td><code>x += 3</code></td>\n<td><code>x = x + 3</code></td>\n<td>加法赋值</td>\n</tr>\n<tr>\n<td><code>-=</code></td>\n<td><code>x -= 2</code></td>\n<td><code>x = x - 2</code></td>\n<td>减法赋值</td>\n</tr>\n<tr>\n<td><code>*=</code></td>\n<td><code>x *= 4</code></td>\n<td><code>x = x * 4</code></td>\n<td>乘法赋值</td>\n</tr>\n<tr>\n<td><code>/=</code></td>\n<td><code>x /= 2</code></td>\n<td><code>x = x / 2</code></td>\n<td>除法赋值</td>\n</tr>\n<tr>\n<td><code>%=</code></td>\n<td><code>x %= 3</code></td>\n<td><code>x = x % 3</code></td>\n<td>取余赋值</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> count <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>count <span class=\"token operator\">+=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// count = 15</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>count <span class=\"token operator\">**=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ES7 特性：count = 225（平方运算）</span></pre></td></tr></table></figure><h2 id=\"一元运算符\"><a class=\"anchor\" href=\"#一元运算符\">#</a> 🔢 一元运算符</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;flowchart TD<br />\nA [一元运算符] --&gt; B [算术运算]<br />\n A --&gt; C [类型转换]<br />\n B --&gt; 自增 / 自减<br />\n C --&gt; 正负号转换 &lt;/pre&gt;</p>\n<h3 id=\"常用操作符\"><a class=\"anchor\" href=\"#常用操作符\">#</a> 常用操作符</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>示例</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>++</code></td>\n<td><code>x++</code></td>\n<td>后置自增（先返回值再 + 1）</td>\n</tr>\n<tr>\n<td><code>--</code></td>\n<td><code>--x</code></td>\n<td>前置自减（先 - 1 再返回值）</td>\n</tr>\n<tr>\n<td><code>+</code></td>\n<td><code>+'5'</code></td>\n<td>转换为数字</td>\n</tr>\n<tr>\n<td><code>-</code></td>\n<td><code>-true</code></td>\n<td>转换为数字并取反 → -1</td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td><code>!0</code></td>\n<td>逻辑非 → true</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5（输出后 a=6）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">++</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 7（先 + 1 后输出）</span></pre></td></tr></table></figure><h2 id=\"️-比较运算符\"><a class=\"anchor\" href=\"#️-比较运算符\">#</a> ⚖️ 比较运算符</h2>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td>值相等（隐式转换）</td>\n<td><code>'5' == 5</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>===</code></td>\n<td>严格相等</td>\n<td><code>'5' === 5</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>!=</code></td>\n<td>值不等</td>\n<td><code>5 != '5'</code></td>\n<td>false</td>\n</tr>\n<tr>\n<td><code>!==</code></td>\n<td>严格不等</td>\n<td><code>5 !== '5'</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>&gt;</code></td>\n<td>大于</td>\n<td><code>10 &gt; '8'</code></td>\n<td>true</td>\n</tr>\n<tr>\n<td><code>&lt;=</code></td>\n<td>小于等于</td>\n<td><code>5 &lt;= '5'</code></td>\n<td>true</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 特殊比较案例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span> <span class=\"token operator\">==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span> <span class=\"token operator\">===</span> <span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// false</span></pre></td></tr></table></figure><h2 id=\"逻辑运算符\"><a class=\"anchor\" href=\"#逻辑运算符\">#</a> 🧠 逻辑运算符</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;pie<br />\ntitle 逻辑运算符使用频率<br />\n &quot;&amp;&amp;&quot; : 45<br />\n&quot;||&quot; : 35<br />\n&quot;!&quot; : 20&lt;/pre&gt;</p>\n<h3 id=\"特性说明\"><a class=\"anchor\" href=\"#特性说明\">#</a> 特性说明</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>说明</th>\n<th>短路特性示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&amp;&amp;</code></td>\n<td>逻辑与</td>\n<td><code>false &amp;&amp; alert()</code>  不执行</td>\n</tr>\n<tr>\n<td><code>||</code></td>\n<td>逻辑或</td>\n<td><code>true || alert()</code>  不执行</td>\n</tr>\n<tr>\n<td><code>!</code></td>\n<td>逻辑非</td>\n<td><code>!'' → true</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 实用技巧</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> username <span class=\"token operator\">=</span> input <span class=\"token operator\">||</span> <span class=\"token string\">'匿名用户'</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 默认值设置</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>isValid <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">submitForm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// 条件执行</span></pre></td></tr></table></figure><h2 id=\"运算符优先级\"><a class=\"anchor\" href=\"#运算符优先级\">#</a> 🏆 运算符优先级</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 优先级顺序示例</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token number\">3</span> <span class=\"token operator\">+</span> <span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 11（乘法优先）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> flag <span class=\"token operator\">=</span> <span class=\"token number\">5</span> <span class=\"token operator\">></span> <span class=\"token number\">4</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//true（比较 > 逻辑）</span></pre></td></tr></table></figure><h3 id=\"常见优先级排序\"><a class=\"anchor\" href=\"#常见优先级排序\">#</a> 常见优先级排序</h3>\n<ol>\n<li><code>()</code>  分组</li>\n<li><code>++</code>   <code>--</code>  一元操作</li>\n<li><code>*</code>   <code>/</code>   <code>%</code></li>\n<li><code>+</code>   <code>-</code></li>\n<li><code>&gt;</code>   <code>&gt;=</code>   <code>&lt;</code>   <code>&lt;=</code></li>\n<li><code>==</code>   <code>!=</code>   <code>===</code>   <code>!==</code></li>\n<li><code>&amp;&amp;</code></li>\n<li><code>||</code></li>\n<li><code>=</code>  赋值</li>\n</ol>\n<blockquote>\n<p>💡 <strong>最佳实践</strong>：复杂表达式使用括号明确优先级</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> value <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">-</span> d <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></blockquote>\n<h1 id=\"javascript-语句精要\"><a class=\"anchor\" href=\"#javascript-语句精要\">#</a> JavaScript 语句精要</h1>\n<h2 id=\"表达式-vs-语句\"><a class=\"anchor\" href=\"#表达式-vs-语句\">#</a> 表达式 vs 语句</h2>\n<table>\n<thead>\n<tr>\n<th>类别</th>\n<th>特点</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>表达式</td>\n<td>可被求值，能作为赋值操作右值</td>\n<td><code>3 + 4</code> 、 <code>x * y</code></td>\n</tr>\n<tr>\n<td>语句</td>\n<td>执行操作，通常以分号结尾</td>\n<td><code>if(...)&#123;...&#125;</code></td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>📌 关键差异：<br />\n <code>let x = (表达式)</code>  ✅ 有效<br />\n <code>let x = if(...)&#123;...&#125;</code>  ❌ 无效</p>\n</blockquote>\n<h2 id=\"分支结构\"><a class=\"anchor\" href=\"#分支结构\">#</a> 分支结构</h2>\n<h3 id=\"if-语句标准结构\"><a class=\"anchor\" href=\"#if-语句标准结构\">#</a> if 语句标准结构</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>条件<span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 条件 1 为真时执行</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>条件<span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 条件 2 为真时执行</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 以上条件均不满足时执行</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>实践建议</strong>：</p>\n<ul>\n<li>简单判断可省略花括号（但不推荐）</li>\n<li>多条件时优先使用  <code>else if</code>  而非嵌套  <code>if</code></li>\n<li>使用严格比较  <code>===</code>  避免类型转换问题</li>\n</ul>\n<h2 id=\"循环与调试\"><a class=\"anchor\" href=\"#循环与调试\">#</a> 循环与调试</h2>\n<h3 id=\"循环基础\"><a class=\"anchor\" href=\"#循环基础\">#</a> 循环基础</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//for 循环典型结构</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>初始化<span class=\"token punctuation\">;</span> 条件<span class=\"token punctuation\">;</span> 迭代<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//while 循环结构</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>条件<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 循环体</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"断点调试要点\"><a class=\"anchor\" href=\"#断点调试要点\">#</a> 断点调试要点</h3>\n<ol>\n<li>浏览器开发者工具 → Sources 面板</li>\n<li>点击行号设置断点</li>\n<li>使用控制按钮逐步执行：\n<ul>\n<li>Resume：继续执行</li>\n<li>Step over：跳过函数</li>\n<li>Step into：进入函数</li>\n</ul>\n</li>\n<li>观察变量变化和调用栈</li>\n</ol>\n<p><strong>调试场景</strong>：</p>\n<ul>\n<li>验证条件判断逻辑</li>\n<li>跟踪循环变量变化</li>\n<li>检测函数调用顺序</li>\n</ul>\n<h1 id=\"javascript-数组操作全解\"><a class=\"anchor\" href=\"#javascript-数组操作全解\">#</a> JavaScript 数组操作全解</h1>\n<h2 id=\"增元素添加\"><a class=\"anchor\" href=\"#增元素添加\">#</a> 📦 增：元素添加</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>时间复杂度</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>push()</code></td>\n<td>末尾追加元素</td>\n<td>O(1)</td>\n<td><code>arr.push('新元素')</code></td>\n</tr>\n<tr>\n<td><code>unshift()</code></td>\n<td>开头插入元素</td>\n<td>O(n)</td>\n<td><code>arr.unshift('首元素')</code></td>\n</tr>\n<tr>\n<td><code>splice()</code></td>\n<td>指定位置插入</td>\n<td>O(n)</td>\n<td><code>arr.splice(2,0,'插入')</code></td>\n</tr>\n<tr>\n<td>扩展运算符</td>\n<td>合并数组</td>\n<td>O(n)</td>\n<td><code>[...arr1, ...arr2]</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'苹果'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'香蕉'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// 末端添加</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token string\">'葡萄'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 开头插入</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'芒果'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 索引 1 处插入</span></pre></td></tr></table></figure><h2 id=\"️-删元素移除\"><a class=\"anchor\" href=\"#️-删元素移除\">#</a> 🗑️ 删：元素移除</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>返回值</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>pop()</code></td>\n<td>移除最后一个元素</td>\n<td>被删元素</td>\n<td><code>arr.pop()</code></td>\n</tr>\n<tr>\n<td><code>shift()</code></td>\n<td>移除第一个元素</td>\n<td>被删元素</td>\n<td><code>arr.shift()</code></td>\n</tr>\n<tr>\n<td><code>splice()</code></td>\n<td>删除指定元素</td>\n<td>被删元素数组</td>\n<td><code>arr.splice(0, 2)</code></td>\n</tr>\n<tr>\n<td><code>filter()</code></td>\n<td>过滤创建新数组</td>\n<td>新数组</td>\n<td><code>arr.filter(x =&gt; x !== '苹果')</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// 删除末尾 → [1,2,3]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// 从索引 1 删 2 个 → [1]</span></pre></td></tr></table></figure><h2 id=\"️-改元素修改\"><a class=\"anchor\" href=\"#️-改元素修改\">#</a> ✏️ 改：元素修改</h2>\n<table>\n<thead>\n<tr>\n<th>方式</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>直接索引赋值</td>\n<td>简单直接修改</td>\n<td><code>arr[1] = '新值'</code></td>\n</tr>\n<tr>\n<td><code>splice()</code></td>\n<td>替换指定元素</td>\n<td><code>arr.splice(2,1,'替换值')</code></td>\n</tr>\n<tr>\n<td><code>fill()</code></td>\n<td>填充数组</td>\n<td><code>arr.fill(0)</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> colors <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>colors<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 直接修改 → ['red', 'yellow']</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>colors<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 替换 → ['blue', 'yellow']</span></pre></td></tr></table></figure><h2 id=\"查元素检索\"><a class=\"anchor\" href=\"#查元素检索\">#</a> 🔍 查：元素检索</h2>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>说明</th>\n<th>返回值</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>indexOf()</code></td>\n<td>查找元素索引</td>\n<td>索引 /-1</td>\n<td><code>arr.indexOf('苹果')</code></td>\n</tr>\n<tr>\n<td><code>includes()</code></td>\n<td>判断是否存在</td>\n<td>boolean</td>\n<td><code>arr.includes('香蕉')</code></td>\n</tr>\n<tr>\n<td><code>find()</code></td>\n<td>查找首个符合条件元素</td>\n<td>元素 /undefined</td>\n<td><code>arr.find(x =&gt; x &gt; 2)</code></td>\n</tr>\n<tr>\n<td><code>some()</code></td>\n<td>是否存在符合条件的元素</td>\n<td>boolean</td>\n<td><code>arr.some(x =&gt; x % 2 === 0)</code></td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> nums <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// 1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 12</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// true</span></pre></td></tr></table></figure><h2 id=\"最佳实践-4\"><a class=\"anchor\" href=\"#最佳实践-4\">#</a> 🚩 最佳实践</h2>\n<ol>\n<li><strong>性能优化</strong>：\n<ul>\n<li>大数据量操作优先使用 <code>push/pop</code>  代替 <code>unshift/shift</code></li>\n<li>使用 <code>filter/map</code>  创建新数组而非直接修改原数组</li>\n</ul>\n</li>\n<li><strong>现代语法</strong>：<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 删除元素新方式（ES2023）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> newArr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">toSpliced</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 不改变原数组</span></pre></td></tr></table></figure></li>\n<li><strong>链式操作</strong>：<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">></span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>   <span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<blockquote>\n<p>💡 <strong>注意</strong>：</p>\n<ul>\n<li><code>splice</code>  会直接修改原数组， <code>slice</code>  则返回新数组</li>\n<li>使用 <code>Object.defineProperty()</code>  可以创建不可变数组</li>\n<li>推荐使用 <code>for...of</code>  替代传统 for 循环遍历数组</li>\n</ul>\n</blockquote>\n<h1 id=\"函数体系\"><a class=\"anchor\" href=\"#函数体系\">#</a> 🎯 函数体系</h1>\n<h2 id=\"函数声明\"><a class=\"anchor\" href=\"#函数声明\">#</a> 📌 函数声明</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getUser</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 业务逻辑</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"核心特性-2\"><a class=\"anchor\" href=\"#核心特性-2\">#</a> 🧩 核心特性</h2>\n<h3 id=\"命名规范-3\"><a class=\"anchor\" href=\"#命名规范-3\">#</a> 🔑 命名规范</h3>\n<p>✅ 动词前缀 + 小驼峰<br />\n✅ 语义化命名，如：<br />\n▪ calculateTotal()<br />\n▪ validateForm()<br />\n▪ fetchUserData()</p>\n<h3 id=\"参数传递\"><a class=\"anchor\" href=\"#参数传递\">#</a> 🚀 参数传递</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 基础传参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createOrder</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">item<span class=\"token punctuation\">,</span> quantity</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/* ... */</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 默认值保障</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">safeSum</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"返回值要点\"><a class=\"anchor\" href=\"#返回值要点\">#</a> 💡 返回值要点</h3>\n<p>▪ 使用  <code>return</code>  输出结果<br />\n▪ 执行后立即终止函数<br />\n▪ 无返回值时默认返回  <code>undefined</code></p>\n<h2 id=\"️️-重要注意\"><a class=\"anchor\" href=\"#️️-重要注意\">#</a> ⚠️⚠️ 重要注意</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 同名函数会覆盖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">// ✅ 生效的是此版本</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 参数个数自由</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 接收所有实参</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ a=1, b=2, arguments=[1,2,3,4]</span></pre></td></tr></table></figure><h2 id=\"作用域规则-2\"><a class=\"anchor\" href=\"#作用域规则-2\">#</a> 🌍 作用域规则</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> globalVar <span class=\"token operator\">=</span> <span class=\"token string\">'全局'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🌐 全局作用域</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">checkScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">const</span> localVar <span class=\"token operator\">=</span> <span class=\"token string\">'局部'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 🏷️ 局部作用域</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>globalVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ✅ 可访问全局</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>localVar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ❌ 报错</span></pre></td></tr></table></figure><h3 id=\"访问原则\"><a class=\"anchor\" href=\"#访问原则\">#</a> 🔍 访问原则</h3>\n<p>局部变量 → 闭包变量 → 全局变量</p>\n<h1 id=\"匿名函数\"><a class=\"anchor\" href=\"#匿名函数\">#</a> 匿名函数</h1>\n<h2 id=\"函数表达式\"><a class=\"anchor\" href=\"#函数表达式\">#</a> ➤ 函数表达式</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 声明后调用</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">action</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token comment\">/* 逻辑代码 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">action</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"iife模式\"><a class=\"anchor\" href=\"#iife模式\">#</a> ➤ IIFE 模式</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 写法一：外包裹式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'立即执行'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 写法二：内执行式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'立即执行'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>▲ 核心特性<br />\n▸ 两种语法等效<br />\n▸ 隔离作用域防止污染<br />\n▸ 推荐结尾加分号</p>\n<h1 id=\"布尔类型转换\"><a class=\"anchor\" href=\"#布尔类型转换\">#</a> 🔮 布尔类型转换</h1>\n<h2 id=\"转换规则\"><a class=\"anchor\" href=\"#转换规则\">#</a> 🎯 转换规则</h2>\n<h3 id=\"假值清单6种\"><a class=\"anchor\" href=\"#假值清单6种\">#</a> ▎假值清单（6 种）</h3>\n<table>\n<thead>\n<tr>\n<th>值</th>\n<th>转换结果</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>&quot;&quot;</code></td>\n<td>❌ false</td>\n<td><code>Boolean(&quot;&quot;)</code></td>\n</tr>\n<tr>\n<td><code>0</code>  /  <code>NaN</code></td>\n<td>❌ false</td>\n<td><code>Boolean(0)</code></td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td>❌ false</td>\n<td><code>Boolean(null)</code></td>\n</tr>\n<tr>\n<td><code>undefined</code></td>\n<td>❌ false</td>\n<td><code>Boolean(undefined)</code></td>\n</tr>\n<tr>\n<td><code>false</code></td>\n<td>❌ false</td>\n<td>自身</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"逻辑运算特性\"><a class=\"anchor\" href=\"#逻辑运算特性\">#</a> ▎逻辑运算特性</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// &amp;&amp; 查找第一个假值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// 0（短路执行）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token string\">''</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token string\">'test'</span>       <span class=\"token comment\">// ''</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">NaN</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token number\">20</span>          <span class=\"token comment\">// NaN</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// || 查找第一个真值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token string\">'默认值'</span>       <span class=\"token comment\">// ' 默认值'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">||</span> <span class=\"token keyword\">undefined</span>  <span class=\"token comment\">//undefined（全假返回末值）</span></pre></td></tr></table></figure><h1 id=\"隐式类型转换\"><a class=\"anchor\" href=\"#隐式类型转换\">#</a> 🔄 隐式类型转换</h1>\n<h2 id=\"转换逻辑图\"><a class=\"anchor\" href=\"#转换逻辑图\">#</a> 🧠 转换逻辑图</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;flowchart TD<br />\nA [运算类型] --&gt; B {含字符串？}<br />\n B --&gt;| 是 | C [字符串拼接]<br />\n B --&gt;| 否 | D [转数字计算]&lt;/pre&gt;</p>\n<h2 id=\"核心规则\"><a class=\"anchor\" href=\"#核心规则\">#</a> 📜 核心规则</h2>\n<h3 id=\"1-算术运算策略\"><a class=\"anchor\" href=\"#1-算术运算策略\">#</a> 1. 算术运算策略</h3>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>转换规则</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>+</code></td>\n<td>任意操作数为字符串则拼接</td>\n<td><code>'3' + 2</code></td>\n<td>&quot;32&quot;</td>\n</tr>\n<tr>\n<td><code>-*/%</code></td>\n<td>全部转为数字计算</td>\n<td><code>'10' - '5'</code></td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"2-特殊值处理\"><a class=\"anchor\" href=\"#2-特殊值处理\">#</a> 2. 特殊值处理</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token number\">10</span>     <span class=\"token comment\">// 10（null→0）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">undefined</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token comment\">// NaN </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token boolean\">true</span> <span class=\"token operator\">+</span> <span class=\"token boolean\">false</span>  <span class=\"token comment\">// 1（true→1, false→0）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>       <span class=\"token comment\">// \"[object Object]\"（对象转字符串）</span></pre></td></tr></table></figure><h2 id=\"️-高频陷阱\"><a class=\"anchor\" href=\"#️-高频陷阱\">#</a> ⚠️ 高频陷阱</h2>\n<ol>\n<li>\n<p><strong>空字符串转 0</strong>：<br />\n <code>'' - 5 → -5</code> （易导致非预期结果）</p>\n</li>\n<li>\n<p><strong>无效数字污染</strong>：<br />\n <code>'a' * 2 → NaN</code> （后续运算全为 NaN）</p>\n</li>\n<li>\n<p><strong>布尔值参与运算</strong>：<br />\n <code>true + true → 2</code> （易误判为逻辑运算）</p>\n</li>\n<li>\n<p><strong>对象类型转换</strong>：<br />\n <code>[1] + [2] → &quot;12&quot;</code> （数组转字符串拼接）</p>\n</li>\n</ol>\n<h1 id=\"对象体系\"><a class=\"anchor\" href=\"#对象体系\">#</a> 🎯 对象体系</h1>\n<h2 id=\"核心概念-2\"><a class=\"anchor\" href=\"#核心概念-2\">#</a> 🧩 核心概念</h2>\n<p>&lt;pre class=&quot;mermaid&quot;&gt;graph TD<br />\nA [对象] --&gt; B [属性]<br />\n A --&gt; C [方法]<br />\n B --&gt; 数据值<br />\n C --&gt; 函数功能 &lt;/pre&gt;</p>\n<p><strong>本质</strong>：无序键值对集合，用于描述实体（如用户 / 商品）</p>\n<h2 id=\"属性操作\"><a class=\"anchor\" href=\"#属性操作\">#</a> 🔑 属性操作</h2>\n<h3 id=\"增删改查\"><a class=\"anchor\" href=\"#增删改查\">#</a> ➤ 增删改查</h3>\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>语法</th>\n<th>注意点</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查</td>\n<td><code>对象.属性</code></td>\n<td>属性名需合法标识符</td>\n<td><code>user.age</code></td>\n</tr>\n<tr>\n<td></td>\n<td><code>对象['属性']</code></td>\n<td>支持特殊字符 / 变量访问</td>\n<td><code>user['user-name']</code></td>\n</tr>\n<tr>\n<td>改</td>\n<td><code>对象.属性 = 值</code></td>\n<td>直接覆盖原值</td>\n<td><code>user.age = 30</code></td>\n</tr>\n<tr>\n<td>删</td>\n<td><code>delete 对象.属性</code></td>\n<td>删除整个属性</td>\n<td><code>delete user.address</code></td>\n</tr>\n<tr>\n<td>增</td>\n<td><code>对象.新属性 = 值</code></td>\n<td>自动添加新属性</td>\n<td><code>user.gender = 'male'</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"多词属性处理\"><a class=\"anchor\" href=\"#多词属性处理\">#</a> ➤ 多词属性处理</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> book <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token string-property property\">'book-title'</span><span class=\"token operator\">:</span> <span class=\"token string\">'JavaScript指南'</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// ✅ 必须使用方括号访问</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token string-property property\">'出版日期'</span><span class=\"token operator\">:</span> <span class=\"token string\">'2023-01'</span>          <span class=\"token comment\">// ✅ 中文属性需用方括号</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">[</span><span class=\"token string\">'book-title'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 正确访问方式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">//console.log (book.book-title);  ❌ 语法错误</span></pre></td></tr></table></figure><h2 id=\"方法使用\"><a class=\"anchor\" href=\"#方法使用\">#</a> 🚀 方法使用</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> calculator <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token comment\">// 标准方法定义</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token function-variable function\">add</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\">// ES6 简写语法</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token function\">multiply</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> a <span class=\"token operator\">*</span> b <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>  </pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">// 箭头函数方法（注意 this 指向）</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token function-variable function\">divide</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> a <span class=\"token operator\">/</span> b  </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 方法调用</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>calculator<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">// ✅ 常规调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>calculator<span class=\"token punctuation\">[</span><span class=\"token string\">'multiply'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// ✅ 方括号调用</span></pre></td></tr></table></figure><h2 id=\"对象遍历\"><a class=\"anchor\" href=\"#对象遍历\">#</a> 🔄 对象遍历</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> phone <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token literal-property property\">brand</span><span class=\"token operator\">:</span> <span class=\"token string\">'Xiaomi'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token literal-property property\">model</span><span class=\"token operator\">:</span> <span class=\"token string\">'13 Pro'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token literal-property property\">price</span><span class=\"token operator\">:</span> <span class=\"token number\">4999</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token comment\">//key 为字符串类型属性名</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">属性：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>key<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> → 值：</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>phone<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">/* 输出：</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>属性：brand → 值：Xiaomi</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>属性：model → 值：13 Pro</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>属性：price → 值：4999</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>*/</span></pre></td></tr></table></figure><h2 id=\"math对象\"><a class=\"anchor\" href=\"#math对象\">#</a> 📊 Math 对象</h2>\n<h3 id=\"核心方法速查\"><a class=\"anchor\" href=\"#核心方法速查\">#</a> ▎核心方法速查</h3>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>功能</th>\n<th>示例</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>Math.PI</code></td>\n<td>圆周率常量</td>\n<td>Math.PI</td>\n<td>3.14159...</td>\n</tr>\n<tr>\n<td><code>random()</code></td>\n<td>[0,1) 随机数</td>\n<td>Math.random()</td>\n<td>0.687...</td>\n</tr>\n<tr>\n<td><code>ceil()</code></td>\n<td>向上取整</td>\n<td>Math.ceil(3.2)</td>\n<td>4</td>\n</tr>\n<tr>\n<td><code>floor()</code></td>\n<td>向下取整</td>\n<td>Math.floor(3.8)</td>\n<td>3</td>\n</tr>\n<tr>\n<td><code>round()</code></td>\n<td>四舍五入</td>\n<td>Math.round(3.5)</td>\n<td>4</td>\n</tr>\n<tr>\n<td><code>max()</code></td>\n<td>最大值</td>\n<td>Math.max(2,5,1)</td>\n<td>5</td>\n</tr>\n<tr>\n<td><code>min()</code></td>\n<td>最小值</td>\n<td>Math.min(2,5,1)</td>\n<td>1</td>\n</tr>\n<tr>\n<td><code>pow()</code></td>\n<td>幂运算</td>\n<td>Math.pow(2,3)</td>\n<td>8</td>\n</tr>\n<tr>\n<td><code>abs()</code></td>\n<td>绝对值</td>\n<td>Math.abs(-5)</td>\n<td>5</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"随机数生成公式\"><a class=\"anchor\" href=\"#随机数生成公式\">#</a> ▎随机数生成公式</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * 生成 N-M 范围内的整数</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; N - 最小值</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @param &#123;number&#125; M - 最大值</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> * @returns &#123;number&#125; 随机整数</pre></td></tr><tr><td data-num=\"6\"></td><td><pre> */</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getRandomInt</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token constant\">N</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">M</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">M</span> <span class=\"token operator\">-</span> <span class=\"token constant\">N</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token constant\">N</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 示例：生成 10-20 的随机数</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getRandomInt</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>⚠️ <strong>注意事项</strong>：</p>\n<ol>\n<li><code>for...in</code>  会遍历原型链属性，建议配合 <code>hasOwnProperty</code>  使用</li>\n<li>方法中的箭头函数会改变 <code>this</code>  指向，需谨慎使用</li>\n<li>删除不存在的属性不会报错，返回 <code>true</code></li>\n</ol>\n<h1 id=\"基本数据类型和引用数据类型\"><a class=\"anchor\" href=\"#基本数据类型和引用数据类型\">#</a> 基本数据类型和引用数据类型</h1>\n<p>简单类型又叫 iben 数据类型或者值类型，复杂类型又叫引用类型。</p>\n<ul>\n<li>值类型：简单数据类型 / 基本数据类型，再存储变量的是值本身，因此被叫做值类型<br />\n值类型变量的数据直接存放在变量（栈空间）中</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1 <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num2 <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num2 <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 10</span></pre></td></tr></table></figure><ul>\n<li>引用类型：复杂数据类型，在存储变量中存储的仅仅是地址 (引用)，因此叫做引用数据类型通过 new 关键字创建的对象。<br />\n引用类型变量（栈空间）里存放的是地址，真正的对象实例存放在堆空间中。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>   <span class=\"token literal-property property\">age</span><span class=\"token operator\">:</span> <span class=\"token number\">18</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj2 <span class=\"token operator\">=</span> obj1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>obj2<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 20</span></pre></td></tr></table></figure><h1 id=\"变量声明\"><a class=\"anchor\" href=\"#变量声明\">#</a> 变量声明</h1>\n<p>建议：const 优先，尽量用 const</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'green'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">'pink'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里可以把 let 改为 const</p>\n<ul>\n<li>const 声明的值不能更改，而且 const 声明变量的时候需要在里面进行初始化</li>\n<li>但是对于引用数据类型，const 声明的变量，里面存的不是值，不是值，是地址，所以只要不更改地址，那么里面的值是可以更改的。</li>\n</ul>\n<p>建议数组和对象使用 const 声明</p>\n",
            "tags": [
                "JavaScript",
                "JavaScript"
            ]
        },
        {
            "id": "https://aynya.github.io/%E8%A7%A3%E5%86%B3%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/",
            "url": "https://aynya.github.io/%E8%A7%A3%E5%86%B3%E5%85%B3%E4%BA%8Ehexo%E4%B8%BB%E9%A2%98%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/",
            "title": "解决关于hexo的一些问题",
            "date_published": "2025-01-18T16:00:00.000Z",
            "content_html": "<h3 id=\"对于hexo部署到github上时出现错误\"><a class=\"anchor\" href=\"#对于hexo部署到github上时出现错误\">#</a> 对于 hexo 部署到 github 上时出现错误</h3>\n<p>如：<br />\nfatal: unable to access '<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2F5bnlhL2F5bnlhLmdpdGh1Yi5pby5naXQv\">https://github.com/aynya/aynya.github.io.git/</span>': Failed to connect to <span class=\"exturl\" data-url=\"aHR0cDovL2dpdGh1Yi5jb20=\">github.com</span> port 443 after 21080 ms: Could not connect to server        FATAL Something's wrong. Maybe you can find the solution here: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">https://hexo.io/docs/troubleshooting.html</span></p>\n<h4 id=\"第一步\"><a class=\"anchor\" href=\"#第一步\">#</a> 第一步</h4>\n<pre><code>// 取消http代理\ngit config --global --unset http.proxy\n// 取消https代理\ngit config --global --unset https.proxy\n</code></pre>\n<h4 id=\"第二部重启vscode\"><a class=\"anchor\" href=\"#第二部重启vscode\">#</a> 第二部重启 vscode</h4>\n<pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<hr />\n<h3 id=\"对于部署后shoka主题图床无法正常显示\"><a class=\"anchor\" href=\"#对于部署后shoka主题图床无法正常显示\">#</a> 对于部署后 shoka 主题图床无法正常显示</h3>\n<p>在 <code>themes\\shoka\\scripts\\helpers\\engine.js</code>  中修改</p>\n<figure class=\"highlight js\"><figcaption data-lang=\"JavaScript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">parseImage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">img<span class=\"token punctuation\">,</span> size</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'//'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> img<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>      <span class=\"token keyword\">return</span> img</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      <span class=\"token comment\">// return 'https://i0.wp.com/' + `tva$&#123;randomServer&#125;.sinaimg.cn/` + size + '/' + img;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token keyword\">return</span> <span class=\"token string\">'https://image.baidu.com/search/down?url='</span> <span class=\"token operator\">+</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://tva</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>randomServer<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">.sinaimg.cn/</span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">+</span> size <span class=\"token operator\">+</span> <span class=\"token string\">'/'</span> <span class=\"token operator\">+</span> img<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token comment\">// return 'https://tva'+randomServer+'.sinaimg.cn/'+size+'/'+img</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><pre><code>hexo clean\nhexo g\nhexo d\n</code></pre>\n<p>再次部署就可以正常显示了</p>\n<hr />\n<h3 id=\"参考资料\"><a class=\"anchor\" href=\"#参考资料\">#</a> 参考资料</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzU2Njk5MjA4L2FydGljbGUvZGV0YWlscy8xMzkxNDE3Nzg=\">https://blog.csdn.net/m0_56699208/article/details/139141778</span><br />\n<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLXNob2thLXgvaGV4by10aGVtZS1zaG9rYVgvaXNzdWVzLzY=\">https://github.com/theme-shoka-x/hexo-theme-shokaX/issues/6</span></p>\n",
            "tags": [
                "hexo",
                "hexo",
                "shoka"
            ]
        },
        {
            "id": "https://aynya.github.io/Eng%E7%AC%94%E8%AE%B0/",
            "url": "https://aynya.github.io/Eng%E7%AC%94%E8%AE%B0/",
            "title": "Eng笔记",
            "date_published": "2025-01-14T16:00:00.000Z",
            "content_html": "<p>此处是指为了存放笔记，方便复习，无它用<br />\n此笔记来自兔老爹 b 站视频 ()[<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMVhZNDExSjdhRz9zcG1faWRfZnJvbT0zMzMuNzg4LnBsYXllci5zd2l0Y2gmYW1wO3ZkX3NvdXJjZT04ZDM5MTFiM2VhMWE2MDFiY2RmNDA3YTlkZGExNWMwMSZhbXA7cD0y\">https://www.bilibili.com/video/BV1XY411J7aG?spm_id_from=333.788.player.switch&amp;vd_source=8d3911b3ea1a601bcdf407a9dda15c01&amp;p=2</span>]</p>\n<h3 id=\"语法综述\"><a class=\"anchor\" href=\"#语法综述\">#</a> 语法综述</h3>\n<h4 id=\"动作动词\"><a class=\"anchor\" href=\"#动作动词\">#</a> 动作 (动词)</h4>\n<p>1、可以独立完成的动词<br />\n主语 + <mark>不及物动词</mark></p>\n<pre><code>Papa Rabbit sleeps.\n兔子睡觉\n</code></pre>\n<p>2、有 1 个动作的承受者<br />\n主语 +<mark> 单及物动词</mark> + 宾语</p>\n<pre><code>Papa Rabbit likes you.\n兔子喜欢你\n</code></pre>\n<p>3、有 2 个动作承受者<br />\n主语 + <mark>双及物动词</mark> + 间接宾语 + 直接宾语</p>\n<pre><code>Papa Rabbit teaches you English\n兔子教你英语\n</code></pre>\n<p>4、只有 1 个动作承受 (但需补充)<br />\n 主语 + <mark>复杂及物动词</mark> + 宾语 + (宾语) 补语</p>\n<pre><code>sb considers you smart\n某人认为你很聪明\n</code></pre>\n<p>5、非 &quot;动作&quot;<br />\n 主语 + <mark>系动词</mark> + (主语) 补语 / 表语</p>\n<pre><code>sb is tall\nsb &lt;- tall\n某人看起来高\n</code></pre>\n<hr />\n<h4 id=\"句子\"><a class=\"anchor\" href=\"#句子\">#</a> 句子</h4>\n<p>句子成分 (8 只): 主语、谓语动词、宾语、宾语补语、主语补语、定语、状语、同位语。</p>\n<p>简单句 -&gt; 作主语 -&gt; 主语从句<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>           </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; 作宾语 -&gt; 宾语从句<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>           </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; 作表语 -&gt; 表语从句<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>           </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; 作同位语 -&gt; 同位语从句<br />\n以上都是<mark>名词性</mark>从句<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>           </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; 作定语 -&gt; 定语从句<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>           </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; 作状语 -&gt; 状语从句</p>\n<hr />\n<h4 id=\"词性词类\"><a class=\"anchor\" href=\"#词性词类\">#</a> 词性 (词类)</h4>\n<p>词性 (10 只): 动词 (Verbs)、名词 (Nouns)、冠词 (Articles)、代词 (Pronouns)、形容词 (Adjectives)、数词 (Numerals)、副词 (Adverbs)、介词 (Prepositions)、叹词 (Interjections)、连词 (Conjunctions)</p>\n<hr />\n<h4 id=\"谓语动词的三大本领\"><a class=\"anchor\" href=\"#谓语动词的三大本领\">#</a> 谓语动词的 &quot;三大本领&quot;</h4>\n<p>1、动作<mark>时间</mark> (<mark>T</mark>ense)<br />\n 2、动作<mark>状态</mark> (<mark>A</mark>spect)<br />\n 时间: <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>        </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 动作:<br />\n 现在<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>          </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 一般<br />\n过去<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>          </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 完成<br />\n将来<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>          </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 进行<br />\n过去将来<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>   </mtext></mrow><annotation encoding=\"application/x-tex\">~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 完成进行</p>\n<p>以上排列组合可以得到<mark> 16</mark> 种可能的时态</p>\n<p>3、表示动作假设、情感...(<mark>M</mark>ood)</p>\n<pre><code>If I were a rabbit...\n(虚拟语气)\n</code></pre>\n<p>时体气: <mark>TAM</mark></p>\n<hr />\n<h4 id=\"协助谓语动词的-助动词\"><a class=\"anchor\" href=\"#协助谓语动词的-助动词\">#</a> 协助谓语动词的 -- 助动词</h4>\n<p>eat:<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 吃过了 (完成) -&gt; have -&gt; have eaten<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 正在吃 (进行) -&gt; be <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>   </mtext></mrow><annotation encoding=\"application/x-tex\">~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; is eating<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 被吃 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>            </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~~~~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt;be<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>     </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; is eaten<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 有能力吃 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> -&gt; can <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>  </mtext></mrow><annotation encoding=\"application/x-tex\">~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> -&gt; can eat<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 有可能吃 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>     </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; might -&gt; might eat<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 有义务吃 <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>     </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; must <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext> </mtext></mrow><annotation encoding=\"application/x-tex\">~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; must eat<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 不吃 (否定) <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>   </mtext></mrow><annotation encoding=\"application/x-tex\">~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; do <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>-&gt; do not eat</p>\n<hr />\n<h4 id=\"非谓语动词\"><a class=\"anchor\" href=\"#非谓语动词\">#</a> 非谓语动词</h4>\n<p>非谓语动词通常出现：动词不定式、现在分词、动名词、过去分词</p>\n<hr />\n<h3 id=\"动词分类\"><a class=\"anchor\" href=\"#动词分类\">#</a> 动词分类</h3>\n<p>实义动词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 按动作承受着分<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 及物动词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 不及物动词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 按动作状态分<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 动作动词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 状态动词<br />\n (连) 系动词<br />\n助动词<br />\n情态动词<br />\n非谓语动词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 不定式<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 过去分词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 现在分词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 动名词</p>\n<hr />\n<h3 id=\"动词时态\"><a class=\"anchor\" href=\"#动词时态\">#</a> 动词时态</h3>\n<h4 id=\"一般现在时态\"><a class=\"anchor\" href=\"#一般现在时态\">#</a> 一般现在时态</h4>\n<ul>\n<li><mark>动词原形</mark></li>\n<li><mark>动词原型 + s (第三人称单数)</mark></li>\n</ul>\n<pre><code>I eat carrots. 我吃胡萝卜(并未特别指出状态)\nShe eats carrots.\n</code></pre>\n<h5 id=\"1-表达事实\"><a class=\"anchor\" href=\"#1-表达事实\">#</a> 1、表达事实</h5>\n<pre><code>I eat carrots. 我吃胡萝卜(事实陈述)\nThe sun rises in the east. 太阳从东边升起\n</code></pre>\n<h5 id=\"2-表达习惯重复的动作\"><a class=\"anchor\" href=\"#2-表达习惯重复的动作\">#</a> 2、表达习惯 / 重复的动作</h5>\n<pre><code>I play basketball. 我打篮球(我有这个习惯)\n</code></pre>\n<h5 id=\"3-表示预计发生的事\"><a class=\"anchor\" href=\"#3-表示预计发生的事\">#</a> 3、表示预计发生的事</h5>\n<pre><code>The bus leaves at 8PM every day.\n公交车每晚八点离站\n</code></pre>\n<hr />\n<h4 id=\"现在进行时态\"><a class=\"anchor\" href=\"#现在进行时态\">#</a> 现在进行时态</h4>\n<ul>\n<li><mark>助动词 be 的变位 + 动词的现在分词</mark></li>\n</ul>\n<h5 id=\"现在分词\"><a class=\"anchor\" href=\"#现在分词\">#</a> 现在分词</h5>\n<p>通常: + ing</p>\n<pre><code>如: looking(看), smelling(闻), tasting(品尝)...\n有些动词需要改变拼写, 如: \nwrite -&gt; writing, 不是writeing\nhit -&gt; hitting, 不是hiting\ndie -&gt; dying, 不是dieing\n</code></pre>\n<hr />\n<h4 id=\"现在完成时态\"><a class=\"anchor\" href=\"#现在完成时态\">#</a> 现在完成时态</h4>\n<ul>\n<li><mark>助动词 have 的变位 + 动词的过去分词</mark></li>\n</ul>\n<h5 id=\"过去分词\"><a class=\"anchor\" href=\"#过去分词\">#</a> 过去分词</h5>\n<p>通常: + ed</p>\n<pre><code>如: looked(看), smelled(闻), tasted(品尝)...\n有些动词是&quot;不规则变化&quot;, 如: \neat -&gt; eaten; eat, give see, fall -&gt; eaten, given, seen, fallen\nbring -&gt; brought; bring, buy, fight, think -&gt; brought, bought, fought, thought\nfeel -&gt; felt; feel, keep, sleep, leave -&gt; felt, kept, slept, left\n</code></pre>\n<p>过去分词！= 过去式</p>\n<pre><code>I have eaten carrots. 我吃过胡萝卜\n</code></pre>\n<hr />\n<h4 id=\"现在完成进行时态\"><a class=\"anchor\" href=\"#现在完成进行时态\">#</a> 现在完成进行时态</h4>\n<ul>\n<li><mark>have 的变位 + been + 动词的现在分词</mark></li>\n</ul>\n<pre><code>I eat carrots.\nI have been eating carrots. 我在吃胡萝卜(不但吃了一些, 还要接着吃)\n</code></pre>\n<hr />\n<h4 id=\"一般过去时态\"><a class=\"anchor\" href=\"#一般过去时态\">#</a> 一般过去时态</h4>\n<ul>\n<li><mark>+ 动词过去式</mark></li>\n</ul>\n<h5 id=\"过去式\"><a class=\"anchor\" href=\"#过去式\">#</a> 过去式</h5>\n<p>通常: + ed</p>\n<pre><code>如: looked(看), smelled(闻), tasted(品尝)...\n</code></pre>\n<p>有些动词是 &quot;不规则变化&quot;, 如:</p>\n<table>\n<thead>\n<tr>\n<th>动词原型</th>\n<th>动词过去式</th>\n<th>动词过去分词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>do</td>\n<td>did</td>\n<td>done</td>\n</tr>\n<tr>\n<td>go</td>\n<td>went</td>\n<td>gone</td>\n</tr>\n<tr>\n<td>take</td>\n<td>tooke</td>\n<td>taken</td>\n</tr>\n<tr>\n<td>bring</td>\n<td>brought</td>\n<td>brought</td>\n</tr>\n<tr>\n<td>blow</td>\n<td>blew</td>\n<td>blown</td>\n</tr>\n<tr>\n<td>begin</td>\n<td>began</td>\n<td>begun</td>\n</tr>\n<tr>\n<td>speak</td>\n<td>spoke</td>\n<td>spoken</td>\n</tr>\n</tbody>\n</table>\n<pre><code>The rabbit ate a carrot. 兔子吃了胡萝卜(只知道兔子过去某个时刻正在吃胡萝卜)\n</code></pre>\n<h5 id=\"过去的习惯动作\"><a class=\"anchor\" href=\"#过去的习惯动作\">#</a> 过去的习惯动作</h5>\n<pre><code>I used to play basketball. (我曾经常打篮球)\n</code></pre>\n<hr />\n<h4 id=\"过去进行时态\"><a class=\"anchor\" href=\"#过去进行时态\">#</a> 过去进行时态</h4>\n<ul>\n<li><mark>助动词 be 的变位 + 动词的现在分词</mark></li>\n</ul>\n<pre><code>The rabbit is eating a carrot. -&gt; The rabbit was eating a carrot.\n这兔子在过去某个时间点处在正在吃胡萝卜的过程中\n</code></pre>\n<hr />\n<h4 id=\"现在完成时态-vs-一般过去时态\"><a class=\"anchor\" href=\"#现在完成时态-vs-一般过去时态\">#</a> 现在完成时态 vs. 一般过去时态</h4>\n<ul>\n<li>一般过去时态更注重于: <mark>动作有没有发生</mark></li>\n<li>现在完成时态更注重于: <mark>动作完成了吗 (有影响)</mark></li>\n</ul>\n<hr />\n<h4 id=\"一般过去时态-vs-过去进行时态\"><a class=\"anchor\" href=\"#一般过去时态-vs-过去进行时态\">#</a> 一般过去时态 vs. 过去进行时态</h4>\n<ul>\n<li>一般过去时态可以看成<mark>一张照片</mark></li>\n<li>过去进行时态可以看成<mark>一段视频</mark></li>\n</ul>\n<hr />\n<h4 id=\"过去完成时态\"><a class=\"anchor\" href=\"#过去完成时态\">#</a> 过去完成时态</h4>\n<ul>\n<li><mark>助动词 have 的变位</mark> + 动词的过去分词</li>\n</ul>\n<pre><code>He tried to find me yesterday afternoon, but I had already gone to Shanghai\n对于他试图找我那个时间点(昨天下午)来说, 过去某一点(昨天下午之前)我已经离开了, 去上海了, 所以影响就是: 他找不到我\n</code></pre>\n<hr />\n<h4 id=\"过去完成进行时态\"><a class=\"anchor\" href=\"#过去完成进行时态\">#</a> 过去完成进行时态</h4>\n<ul>\n<li><mark>助动词 have 的变位</mark> + been + 动词的现在分词</li>\n</ul>\n<pre><code>The rabbit has been eating a carrot. -&gt; The rabbit had been eating a carrot.\n兔子在过去的某个时间点已经吃了胡萝卜一段时间，并且后面还要吃。\n</code></pre>\n<hr />\n<h4 id=\"一般将来时态\"><a class=\"anchor\" href=\"#一般将来时态\">#</a> 一般将来时态</h4>\n<ul>\n<li><mark>will</mark> + 动词原型</li>\n</ul>\n<h5 id=\"将来某个时间点发生的动作说话者确定会发生的\"><a class=\"anchor\" href=\"#将来某个时间点发生的动作说话者确定会发生的\">#</a> 将来某个时间点发生的动作 (说话者确定会发生的)</h5>\n<pre><code>The sun will rise again tomorrow.\n太阳明天也会照常升起\n</code></pre>\n<hr />\n<h4 id=\"将来进行时态\"><a class=\"anchor\" href=\"#将来进行时态\">#</a> 将来进行时态</h4>\n<ul>\n<li>will + <mark>be</mark> + 动词的现在分词</li>\n</ul>\n<h5 id=\"将来某个时间某个动作是在进行过程\"><a class=\"anchor\" href=\"#将来某个时间某个动作是在进行过程\">#</a> 将来某个时间，某个动作是在进行过程</h5>\n<pre><code>I will be eating a carrot for lunch tomorrow.\n我明天午饭会在吃胡萝卜这个动作过程中。\n</code></pre>\n<hr />\n<h4 id=\"将来完成时态\"><a class=\"anchor\" href=\"#将来完成时态\">#</a> 将来完成时态</h4>\n<ul>\n<li><mark>will + have</mark> + 动词的过去分词</li>\n</ul>\n<pre><code>I will have finished making the video by 4PM tomorrow, so I can publish it after that.\n对于明天下午4点的那个时间点来说，我在那之前完成做视频，对明天下午四点钟有影响，影响是我可以发视频了。\n</code></pre>\n<hr />\n<h4 id=\"将来完成进行时态\"><a class=\"anchor\" href=\"#将来完成进行时态\">#</a> 将来完成进行时态</h4>\n<ul>\n<li><mark>will + 助动词 have 的变位</mark> + been + 动词的现在分词</li>\n</ul>\n<pre><code>I will have been eating carrots for 2 hours by 3PM tomorrow.\n我确定明天下午三点钟时，我不但已经吃了两个小时胡萝卜，而且还要接着吃。\n</code></pre>\n<hr />\n<h4 id=\"一般过去将来时态\"><a class=\"anchor\" href=\"#一般过去将来时态\">#</a> 一般过去将来时态</h4>\n<ul>\n<li><mark>would</mark> + 动词原型</li>\n<li><mark>助动词 be 的过去变位 + going + to</mark> + 动词原型</li>\n</ul>\n<pre><code>I said I would eat a carrot for lunch.\n我(之前)说过我会午饭吃根胡萝卜(对于我之前说的话来说是在将来)\n</code></pre>\n<hr />\n<h4 id=\"过去将来进行时态\"><a class=\"anchor\" href=\"#过去将来进行时态\">#</a> 过去将来进行时态</h4>\n<ul>\n<li><mark>would</mark> + be + 动词的现在分词</li>\n</ul>\n<pre><code>I said I would be eating a carrot at 1PM tomorrow.\n我之前说我明天下午一点会在吃胡萝卜的这个过程中。\n</code></pre>\n<hr />\n<h4 id=\"过去将来完成时态\"><a class=\"anchor\" href=\"#过去将来完成时态\">#</a> 过去将来完成时态</h4>\n<ul>\n<li><mark>would</mark> + have + 动词的过去分词</li>\n</ul>\n<pre><code>I said I would have eaten a carrot by 1PM tomorrow.\n我之前说我明天下午1点会已经做完吃胡萝卜这个动作。\n</code></pre>\n<hr />\n<h4 id=\"过去将来完成进行时态\"><a class=\"anchor\" href=\"#过去将来完成进行时态\">#</a> 过去将来完成进行时态</h4>\n<ul>\n<li><mark>would</mark> + have + been + 动词的现在分词</li>\n</ul>\n<pre><code>I said I would have been eating lunch for 2 hours by 1PM tomorrow.\n我之前说明天下午一点时在吃中饭的过程中，之前吃了两个小时，之后还要吃\n</code></pre>\n<hr />\n<h4 id=\"时态汇总\"><a class=\"anchor\" href=\"#时态汇总\">#</a> 时态汇总</h4>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>一般</th>\n<th>进行</th>\n<th>完成</th>\n<th>完成进行</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>现在</td>\n<td>一般现在时态</td>\n<td>现在进行时态</td>\n<td>现在完成时态</td>\n<td>现在完成进行时态</td>\n</tr>\n<tr>\n<td></td>\n<td>eat/eats</td>\n<td>am/is/are eating</td>\n<td>has/have eaten</td>\n<td>has/have been eating</td>\n</tr>\n<tr>\n<td>过去</td>\n<td>一般过去时态</td>\n<td>过去进行时态</td>\n<td>过去完成时态</td>\n<td>过去完成进行时态</td>\n</tr>\n<tr>\n<td></td>\n<td>ate</td>\n<td>was/were eating</td>\n<td>had eaten</td>\n<td>had been eating</td>\n</tr>\n<tr>\n<td>将来</td>\n<td>一般将来时态</td>\n<td>将来进行时态</td>\n<td>将来完成时态</td>\n<td>将来完成进行时态</td>\n</tr>\n<tr>\n<td></td>\n<td>will eat</td>\n<td>will be eating</td>\n<td>will have eaten</td>\n<td>will have been eating</td>\n</tr>\n<tr>\n<td>过去将来</td>\n<td>一般过去将来时态</td>\n<td>过去将来进行时态</td>\n<td>过去将来完成时态</td>\n<td>过去将来完成进行时态</td>\n</tr>\n<tr>\n<td></td>\n<td>would eat</td>\n<td>would be eating</td>\n<td>would have eaten</td>\n<td>would have been eating</td>\n</tr>\n</tbody>\n</table>\n<hr />\n<h3 id=\"动词语气\"><a class=\"anchor\" href=\"#动词语气\">#</a> 动词语气</h3>\n<h4 id=\"陈述语气\"><a class=\"anchor\" href=\"#陈述语气\">#</a> 陈述语气</h4>\n<ul>\n<li>描述现实</li>\n</ul>\n<pre><code>The rabbit ate the carrot.\n</code></pre>\n<hr />\n<h4 id=\"祈使语气\"><a class=\"anchor\" href=\"#祈使语气\">#</a> 祈使语气</h4>\n<ul>\n<li>命令 / 请求</li>\n</ul>\n<pre><code>Rabbit, eat the carrot!\n</code></pre>\n<ul>\n<li>用<mark>第二人称，你</mark>用一般现在时态</li>\n<li>去掉 &quot;你&quot;, 并保证动词原型</li>\n</ul>\n<pre><code>You eat the carrot! -&gt; Eat the carrot!\nYou don't eat it! -&gt; Don't eat it!\n</code></pre>\n<hr />\n<h4 id=\"虚拟语气\"><a class=\"anchor\" href=\"#虚拟语气\">#</a> 虚拟语气</h4>\n<h5 id=\"和现在事实相反\"><a class=\"anchor\" href=\"#和现在事实相反\">#</a> 和现在事实相反</h5>\n<ul>\n<li>条件句：过去式</li>\n<li>主句：would + 动词原形</li>\n</ul>\n<pre><code>If I saw the rabbit now, I would bite him.\n注意这里的saw和would\n这并非过去的时间\n\nIf I were you, I would give this video a thumbs-up.\n如果我是你，我会给视频点赞\n言下之意：我不是你\n</code></pre>\n<h5 id=\"和将来事实相反可能性很小\"><a class=\"anchor\" href=\"#和将来事实相反可能性很小\">#</a> 和将来事实相反 (可能性很小)</h5>\n<ul>\n<li>条件句：<mark>should/were to</mark> + 动词原型</li>\n<li>主句：<mark>would/should/could/might</mark> + 动词原型</li>\n</ul>\n<pre><code>If I should see the rabbit tomorrow, I would bite him.\n注意这里的should see 和 would\n\nIf I should meet thee after long years, how should I greet thee?\n万一我们将来重逢了，我又该如何面对你呢？\n言下之意：我们相会遥遥无期。\n</code></pre>\n<h5 id=\"和过去事实相反\"><a class=\"anchor\" href=\"#和过去事实相反\">#</a> 和过去事实相反</h5>\n<ul>\n<li>条件句：<mark>had</mark> + 动词过去分词</li>\n<li>主句：<mark>would have</mark> + 动词过去分词</li>\n</ul>\n<pre><code>If I had seen the rabbit a few days ago, I would have bitten him.\n注意这里的had seen 和 would have bitten\n\nIf I had watched this video before, I would have aced my test.\n我要是之前就看了这个视频，那绝对能考个好成绩。\n言下之意：我没有考出好成绩。\n</code></pre>\n<hr />\n<h5 id=\"愿望请求建议命令\"><a class=\"anchor\" href=\"#愿望请求建议命令\">#</a> 愿望，请求，建议，命令...</h5>\n<h6 id=\"wish可能性小-希望-hope\"><a class=\"anchor\" href=\"#wish可能性小-希望-hope\">#</a> wish (可能性小) 希望 hope</h6>\n<p><mark>wish</mark></p>\n<ul>\n<li>对现在的愿望：wish + 动词过去式</li>\n</ul>\n<pre><code>I wish that I were a rabbit.\n我希望我是只兔子\n</code></pre>\n<ul>\n<li>对过去的愿望：wish + had/would have + 动词过去分词</li>\n</ul>\n<pre><code>I wish (that) I had eaten the carrot.\n我希望我吃了那只胡萝卜\n</code></pre>\n<ul>\n<li>对将来的愿望：wish + should + 动词原型</li>\n</ul>\n<pre><code>I wish (that) I could eat the carrot.\n我希望我能吃那只胡萝卜。\n</code></pre>\n<p><mark>demand, suggest, insist, order... 表示要求 / 建议 / 坚持 / 命令</mark><br />\n后面都 + <mark>should + 动词原型</mark></p>\n<hr />\n<h4 id=\"语气总结\"><a class=\"anchor\" href=\"#语气总结\">#</a> 语气总结</h4>\n<p>陈述语气：描述现实<br />\n祈使语气：命令，请求...<br />\n 虚拟语气：&quot;脑中的&quot;, &quot;非现实的&quot;...<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与事实相反的假设<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与现在相反：if + 过去式；would + 原型<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与过去相反：if + 过去完成时；would have + 过去分词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与将来相反：if + should + 原型；would + 原型<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 表达愿望，请求，建议，命令等<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>wish<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与现在相反：wish + 过去式<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与过去相反：wish + 过去完成时<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 与将来相反：wish + would/could/might + 动词原型<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>demand,suggest,insist,would,rather...<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 主句从句，并与从句，表语从句，定语从句</p>\n<hr />\n<h3 id=\"非谓语动词-2\"><a class=\"anchor\" href=\"#非谓语动词-2\">#</a> 非谓语动词</h3>\n<p>动词 -&gt; 谓语动词 -&gt; <mark>&quot;核心&quot;</mark><br />\n 动词 -&gt; 非谓语动词 -&gt; <mark>&quot;非核心&quot;</mark></p>\n<h4 id=\"动词不定式\"><a class=\"anchor\" href=\"#动词不定式\">#</a> 动词不定式</h4>\n<ul>\n<li>to + 动词原型</li>\n</ul>\n<pre><code>To be or not to be, that is the question.\n生存还是毁灭，这是一个问题\n\nYou helped me (to) cook the carrot.\n你帮我做了胡萝卜。\n</code></pre>\n<h5 id=\"不定式作主语\"><a class=\"anchor\" href=\"#不定式作主语\">#</a> 不定式作主语</h5>\n<pre><code>To eat a carrot every day is good for the rabbit.\n一天吃一根胡萝卜对兔子有好处\n\nIt is good for the rabbit to eat a carrot every day.\n一天吃一根胡萝卜对兔子有好处.\n</code></pre>\n<h5 id=\"不定式作宾语\"><a class=\"anchor\" href=\"#不定式作宾语\">#</a> 不定式作宾语</h5>\n<pre><code>The rabbit likes to eat carrots.\n兔子喜欢吃胡萝卜\n</code></pre>\n<h5 id=\"不定式作形式宾语\"><a class=\"anchor\" href=\"#不定式作形式宾语\">#</a> 不定式作形式宾语</h5>\n<pre><code>I consider it important to eat a carrot every day.\n我发现每天吃一个胡萝卜很重要\n</code></pre>\n<h5 id=\"不定式作宾语补语\"><a class=\"anchor\" href=\"#不定式作宾语补语\">#</a> 不定式作宾语补语</h5>\n<pre><code>The rabbit expected the wolf to eat a carrot.\n兔子指望狼吃一根胡萝卜.\n\nsee/find/watch/have/make/let...\n后面不定式作宾补时需要省略to\nCarrots make the rabbit feel happy.\n胡萝卜使兔子感到快乐\n\n省不省略to区别不大\nThe wolf helped the rabbit grow carrots.\nThe wolf helped the rabbit to grow carrots.\n狼帮兔子种胡萝卜。\n</code></pre>\n<h5 id=\"不定式作主语补语表语\"><a class=\"anchor\" href=\"#不定式作主语补语表语\">#</a> 不定式作主语补语 (表语)</h5>\n<pre><code>The rabbit's dream is to eat every kind of carrot in the world.\n兔子的梦想就是吃掉世界上每一种胡萝卜\n</code></pre>\n<h5 id=\"不定式作定语\"><a class=\"anchor\" href=\"#不定式作定语\">#</a> 不定式作定语</h5>\n<pre><code>The rabbit has a lot of carrots to eat.\n兔子有很多胡萝卜要吃.\n</code></pre>\n<h5 id=\"不定式作状语\"><a class=\"anchor\" href=\"#不定式作状语\">#</a> 不定式作状语</h5>\n<ul>\n<li>表原因</li>\n</ul>\n<pre><code>I was surprised to get a thumbs-up.\n我很吃惊(因为)得到一个赞\n</code></pre>\n<ul>\n<li>表目的</li>\n</ul>\n<pre><code>I will do anything to get a thumbs-up.\n我为了得到一个赞会做任何事。\n</code></pre>\n<ul>\n<li>表结果</li>\n</ul>\n<pre><code>I got enough thumbs-up to make another video.\n我得到足够的赞可以去做另一个视频。\n</code></pre>\n<h5 id=\"高级不定式\"><a class=\"anchor\" href=\"#高级不定式\">#</a> 高级不定式</h5>\n<ul>\n<li>to + 动词原型 (状态)<br />\n&quot;to be eating a carrot &quot;<br />\n&quot;to have eaten a carrot&quot;<br />\n&quot;to have been eating a carrot&quot;</li>\n</ul>\n<pre><code>The rabbit seemed to be eating a carrot.\n这兔子之前似乎在吃一根胡萝卜(过程中)\n\nThe rabbit will appear to have eaten a carrot.\n这兔子之后会看起来像是吃过一根胡萝卜。\n</code></pre>\n<hr />\n<h4 id=\"动名词\"><a class=\"anchor\" href=\"#动名词\">#</a> 动名词</h4>\n<p>动词 ing</p>\n<h5 id=\"动名词作主语\"><a class=\"anchor\" href=\"#动名词作主语\">#</a> 动名词作主语</h5>\n<pre><code>Eating carrots is healthy for the rabbit.\n胡萝卜对兔子来说很健康\n主语 Eating carrots \n系动词 is\n主语补语(表语) healthy\n</code></pre>\n<h5 id=\"动名词作主语补语表语\"><a class=\"anchor\" href=\"#动名词作主语补语表语\">#</a> 动名词作主语补语 (表语)</h5>\n<pre><code>The rabbit's hobby is growing carrots.\n兔子的爱好是种胡萝卜\n主语 The rabbit's hobby\n系动词 is\n主语补语(表语) growing carrots\n\nSeeing is believing.\n眼见为实\n</code></pre>\n<h5 id=\"动名词作定语\"><a class=\"anchor\" href=\"#动名词作定语\">#</a> 动名词作定语</h5>\n<pre><code>a sleeping pill\n定语 sleeping\n</code></pre>\n<h5 id=\"动名词作宾语\"><a class=\"anchor\" href=\"#动名词作宾语\">#</a> 动名词作宾语</h5>\n<pre><code>The rabbit is fond of eating carrots.\n兔子喜欢吃胡萝卜\n\nThe rabbit is looking forward to seeing the wolf again.\n兔子希望再次见到狼\n注意！！！这里的to是动词短语中的to，为介词，后加动名词\n</code></pre>\n<h6 id=\"不定式作宾语-vs-动名词作宾语\"><a class=\"anchor\" href=\"#不定式作宾语-vs-动名词作宾语\">#</a> 不定式作宾语 vs. 动名词作宾语</h6>\n<p>不定式是去做一件<mark>没做过的事</mark><br />\n动名词则是<mark>已经做的事</mark></p>\n<pre><code>The rabbit stopped to eat a carrot.\n兔子停下(手里的活)去吃胡萝卜\n\nThe rabbit stopped eating a carrot.\n兔子停止吃一根胡萝卜\n\nThe wolf forgot to invite the rabbit to her party.\n狼忘记邀请兔子去参加他的聚会\n\nThe rabbit forgot acceping the wolf's invitation.\n兔子忘记接受过狼的邀请\n</code></pre>\n<hr />\n<h4 id=\"现在分词-2\"><a class=\"anchor\" href=\"#现在分词-2\">#</a> 现在分词</h4>\n<h5 id=\"现在分词作定语\"><a class=\"anchor\" href=\"#现在分词作定语\">#</a> 现在分词作定语</h5>\n<pre><code>a talking rabbit\n一个正在说话的兔子\n</code></pre>\n<h5 id=\"现在分词作表语\"><a class=\"anchor\" href=\"#现在分词作表语\">#</a> 现在分词作表语</h5>\n<pre><code>The rabbit is charming.\n兔子是有魅力的。\n\nThe story is interesting.\n故事是有趣的\n\nThe game is exciting.\n游戏是刺激的\n</code></pre>\n<h5 id=\"现在分词作宾语补足语\"><a class=\"anchor\" href=\"#现在分词作宾语补足语\">#</a> 现在分词作宾语补足语</h5>\n<pre><code>The wolf saw the rabbit eating a carrot.\n狼之前看到兔子正在吃一根胡萝卜\n</code></pre>\n<h5 id=\"现在分词作状语\"><a class=\"anchor\" href=\"#现在分词作状语\">#</a> 现在分词作状语</h5>\n<p>表示时间、原因、条件、结果、让步、目的、方式和伴随情况等。</p>\n<pre><code>Hearing the news, the rabbit became excited.\n听到这个消息，兔子很激动。\n\n(原因)\nNot knowing what to eat, the rabbit skipped lunch.\n不知道吃什么，兔子没吃中饭\n</code></pre>\n<hr />\n<h4 id=\"过去分词-2\"><a class=\"anchor\" href=\"#过去分词-2\">#</a> 过去分词</h4>\n<pre><code>The rabbit will eat minced carrot next week.\n兔子下周会吃搅碎的胡萝卜\n\neat -&gt; eaten\nsee -&gt; seen\ncut -&gt; cut\ngrow -&gt; grown\ntell -&gt; told\n</code></pre>\n<h5 id=\"过去分词作定语\"><a class=\"anchor\" href=\"#过去分词作定语\">#</a> 过去分词作定语</h5>\n<pre><code>a minced carrot.\n一根搅碎的胡萝卜\n\na painted room\n一个漆过的房间\n\nan excited rabbit\n一只激动的兔子\n</code></pre>\n<p>但是当过去分词短语作定语，需要放到被修饰的名词之后。</p>\n<pre><code>The carrot cake eaten by thee rabbit is delicious.\n被兔子吃了的胡萝卜蛋糕很美味。\n</code></pre>\n<h5 id=\"过去分词作主语补语表语\"><a class=\"anchor\" href=\"#过去分词作主语补语表语\">#</a> 过去分词作主语补语 (表语)</h5>\n<pre><code>The rabbit is interested.\n兔子很有兴趣\n\nThe rabbit was frightened.\n兔子感到害怕\n</code></pre>\n<h6 id=\"interested-vs-interesting\"><a class=\"anchor\" href=\"#interested-vs-interesting\">#</a> interested vs. interesting</h6>\n<p>interested 有种被动的关系<br />\n而 interesting 则是主动</p>\n<pre><code>The story is interesting.\n这个故事是有趣的\n\nThe rabbit is interested.\n兔子很有兴趣\n</code></pre>\n<h5 id=\"过去分词作状语\"><a class=\"anchor\" href=\"#过去分词作状语\">#</a> 过去分词作状语</h5>\n<pre><code>Seen from the hill, the carrot field looks beautiful.\n(表地点)\n从山上看，胡萝卜田看上去很美。\n\nBorn in a rabbit family, the rabbit has been growing carrots all his life.\n(表原因)\n由于出生在一个兔子家庭里，兔子种了一辈子胡萝卜。\n\nGiven another chance, the rabbit would go to the wolf's party.\n(表条件)\n如果再给兔子一次机会，他回去参加狼的聚会\n\nThe work finished, the rabbit went home.\n(简单句)\n工作完成后，兔子回家了。\n\nAfter the work was finished, the rabbit went home.\n(从句)\n工作完成后，兔子回家了。\n</code></pre>\n<h6 id=\"作状语时过去分词和现在分词的区别\"><a class=\"anchor\" href=\"#作状语时过去分词和现在分词的区别\">#</a> 作状语时过去分词和现在分词的区别</h6>\n<p>分清楚是主动还是被动</p>\n<pre><code>Seen from the hill, the carrot field looks beautiful.\n(被看)\n从山上看，胡萝卜田看上去很美。\n\nSeeing the carrot field, the rabbit ran towards it.\n(主动看)\n看到胡萝卜田，兔子朝它跑去。\n</code></pre>\n<hr />\n<h3 id=\"独立主格\"><a class=\"anchor\" href=\"#独立主格\">#</a> 独立主格</h3>\n<h4 id=\"独立主格结构对从句的简化\"><a class=\"anchor\" href=\"#独立主格结构对从句的简化\">#</a> 独立主格结构对从句的简化</h4>\n<pre><code>If the weather permits, the rabbit will go out.\n如果天气允许，兔子就会出门\nif引导条件状语从句\n        |\n        V\nThe weather permitting, the rabbit will go out.\n如果天气允许，兔子就会出门\n\nAfter the work was finished, the rabbit went home.\n工作完成后，兔子回家了\nAfter引导时间状语从句\n        |\n        V\nThe work finished, the rabbit went home.\n工作完成了，兔子回家了\n</code></pre>\n<h5 id=\"名词-动词不定式\"><a class=\"anchor\" href=\"#名词-动词不定式\">#</a> 名词 + 动词不定式</h5>\n<pre><code>The rabbit to come, the wolf is overjoyed.\n兔子要来，狼乐翻天\n</code></pre>\n<h5 id=\"不定代词-名词\"><a class=\"anchor\" href=\"#不定代词-名词\">#</a> 不定代词 + 名词</h5>\n<pre><code>Many animals went to the party, some of them rabbits and wolves.\n许多动物去了聚会，它们中的一些兔子是狼。\n</code></pre>\n<h5 id=\"不定代词-形容词\"><a class=\"anchor\" href=\"#不定代词-形容词\">#</a> 不定代词 + 形容词</h5>\n<pre><code>Many animals went to the party, some of them happy.\n许多动物去了聚会，它们中的一些很开心\n</code></pre>\n<h5 id=\"名词-副词\"><a class=\"anchor\" href=\"#名词-副词\">#</a> 名词 + 副词</h5>\n<pre><code>The rabbit sat on a chair, head down.\n兔子坐在一张椅子上，头垂着\n</code></pre>\n<h5 id=\"名词-介词短语\"><a class=\"anchor\" href=\"#名词-介词短语\">#</a> 名词 + 介词短语</h5>\n<pre><code>The rabbit came in, carrot in hand.\n兔子进来了，手里拿着胡萝卜\n</code></pre>\n<h5 id=\"发现\"><a class=\"anchor\" href=\"#发现\">#</a> 发现</h5>\n<p>名词 + <mark>being (省略)</mark> + ...</p>\n<hr />\n<h4 id=\"独立主格结构\"><a class=\"anchor\" href=\"#独立主格结构\">#</a> 独立主格结构</h4>\n<p>非谓语动词<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 过去分词：(&quot;被动&quot;/&quot;完成&quot;)<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 现在分词：(&quot;主动&quot;/&quot;进行&quot;)<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span> 不定式：(&quot;将要&quot;)<br />\n<span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mtext>    </mtext></mrow><annotation encoding=\"application/x-tex\">~~~~</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;vertical-align:0em;\"></span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span><span class=\"mspace nobreak\"> </span></span></span></span>...</p>\n<hr />\n<h3 id=\"助动词-情态动词\"><a class=\"anchor\" href=\"#助动词-情态动词\">#</a> 助动词 &amp; 情态动词</h3>\n<h4 id=\"基本助动词还可以作实义动词\"><a class=\"anchor\" href=\"#基本助动词还可以作实义动词\">#</a> 基本助动词 (还可以作实义动词)</h4>\n<pre><code>be\nto\nhave\n...\n</code></pre>\n<p><mark>be</mark></p>\n<pre><code>The rabbit is eating a carrot.\n兔子正在吃一根胡萝卜\n(be -&gt; is)(现在进行时态)\n\nThe carrot was eaten by the rabbit.\n胡萝卜被兔子吃了\n(be -&gt; was)(被动语态)\n</code></pre>\n<p><mark>have</mark></p>\n<pre><code>The rabbit has eaten a carrot.\n兔子吃掉了根胡萝卜\n(have -&gt; has)(现在完成时态)\n</code></pre>\n<p><mark>do</mark></p>\n<pre><code>The rabbit does like coins!\n兔子真的喜欢硬币\n(do -&gt; does)(强调)\n</code></pre>\n<hr />\n<h4 id=\"情态助动词\"><a class=\"anchor\" href=\"#情态助动词\">#</a> 情态助动词</h4>\n<pre><code>can/ could\nmay/ might\nwill/ would\nshall/ should\nmust\nought to\ndare/ dared\nneed\nused to\n...\n</code></pre>\n<p><mark>can/ could</mark><br />\n 有能力做...<br />\n 会...; 可以...</p>\n<pre><code>I can kill a wolf\n我能杀死一只狼(表能力)\n\nCould(更委婉) I borrow your book? Yes, of course.\n我能借用你的书吗，当然可以。(表示请求许可)\n\nAnything can happen.\n什么事都可能发生(表可能性)\n</code></pre>\n<p><mark>may/ might</mark><br />\n 请求<br />\n也许大概可能<br />\n表祝愿</p>\n<pre><code>May I borrow your book? Yes, of course.\n我能借用你的书吗，当然可以。(表请求或许可)\n\nThe rabbit isn't here. He may be at home.\n兔子不在这，它可能在家(不确定)\nThe rabbit isn't here. He might be at home.\n兔子不在这，它可能在家(非常不确定)\n</code></pre>\n<p><mark>must</mark><br />\n 表必须<br />\n表禁止<br />\n表推测</p>\n<pre><code>You must finish your homework first!\n你必须先做完作业\n\nYou must not(mustn't) smoke here.\n禁止你在这里吸烟\n\nThe light is on. The rabbit must be at home.\n灯亮着，兔子一定在家(推测)\n</code></pre>\n<p><mark>will/ would</mark><br />\n 构成将来时<br />\n表示请求，建议<br />\n表示推测，假设</p>\n<pre><code>The rabbit will eat a carrot.\n兔子将吃一根胡萝卜(现在将来时)\nThe rabbit would eat a carrot.\n兔子将在过去某一时间吃一根胡萝卜(过去将来时)\n\nWould you please lend me that book?\n请你借我那本书好吗？(请求，建议)\n\nHe would eat a carrot.\n他可能吃一根胡萝卜\n</code></pre>\n<p><mark>shall/ should</mark><br />\nshall:<br />\n 构成将来时<br />\n征求意见<br />\n表警告，命令</p>\n<pre><code>I shall be there at 9AM.\n我早上9点会在那里\n\nShall we meet at 9AM?\n我们早上9点见面如何？\n\nYou shall not murder. You shall not steal. You shall not covet.\n你不可杀人，你不可偷盗，你不可贪心。\n</code></pre>\n<p>should:<br />\n 表应当<br />\n表有<mark>一定依据</mark>的推测<br />\n表示 &quot;竟然&quot;<br />\n 构成虚拟语气</p>\n<pre><code>We should treat the rabbit well.\n我们应该对兔子好点。\n\nIt should rain tomorrow.\n明天应该会下雨\n\nIt's surprising that he should be late.\n很奇怪，他竟然会迟到\n\nIf it should rain tomorrow, I wouldn't go.\n如果明天万一下雨，我就不去了。\n</code></pre>\n<p><mark>ought to</mark><br />\n 应该</p>\n<pre><code>We ought to treat the rabbit well.\n我们应该对兔子好一点\n</code></pre>\n<p><mark>need</mark><br />\n (做实义动词) 需要<br />\n (情态动词) 需要；有必要</p>\n<pre><code>The rabbit need wait.\n兔子需要等待(need 作情态动词)\nThe rabbit need not wait.\n不必等待\n\nThe rabbit needs to wait.\n兔子需要等待(need 作实义动词)\nThe rabbit does not need to wait.\n兔子不必等待\n</code></pre>\n<p><mark>dare</mark><br />\n (作实义动词) 敢；挑战；冒险<br />\n (作情态动词) 敢</p>\n<pre><code>The rabbit dare not tell the truth to the wolf.\n兔子不敢对狼说出真相\n\nHow dare you!\n你好大的胆子\n</code></pre>\n<p><mark>used to</mark><br />\n 表过去的动作 (强调和现在的对比)</p>\n<pre><code>The rabbit used to eat apples. Now he only eats carrots.\n兔子过去(习惯)吃苹果，现在他只吃胡萝卜。\n</code></pre>\n<hr />\n<h4 id=\"半助动词\"><a class=\"anchor\" href=\"#半助动词\">#</a> 半助动词</h4>\n<pre><code>be able to\nbe going to\nbe about to\nhad better\n...\n</code></pre>\n<p><mark>be able to</mark><br />\n 未来的能力<br />\n was/were able to...<br />\n 成功做成...</p>\n<pre><code>I'll be able to reach scholl on time if I have right now.\n如果我现在离开就可以按时到达学校。\n\nI was able to reach school on time because I left home early.\n因为我离家很早所以按时到学校。\n</code></pre>\n<p><mark>be going to</mark><br />\n 主观，计划做某事，很快就要做</p>\n<pre><code>I'm going to eat dinner at 6PM today.\n我会在6点吃完饭\n</code></pre>\n<p><mark>be about to</mark><br />\n 马上就要做某事，时间更短</p>\n<pre><code>\n</code></pre>\n<p><mark>be to</mark><br />\n 命令做某事</p>\n<pre><code>You are to finish home work first.\n你要先做完作业\n\nI think they're to fall in love with each other.\n我想他们注定会相爱\n</code></pre>\n<p><mark>had better</mark><br />\n 最好做 (警告，忠告)</p>\n<pre><code>You had better follow my orders.\n你最好听我的命令\n</code></pre>\n<hr />\n<h3 id=\"系动词\"><a class=\"anchor\" href=\"#系动词\">#</a> 系动词</h3>\n<p>keep<br />\nstay<br />\nseem<br />\nappear<br />\nfeel<br />\nbecome<br />\nturn<br />\nprove<br />\n...</p>\n<pre><code>A &lt;- B\n\nThe carrot smells nice;\n这胡萝卜闻起来香\n\nThe room remained empty.\n房间一直是空的。\n\nThe sky grew dark.\n天空渐渐变暗\n</code></pre>\n<hr />\n<h3 id=\"使役动词\"><a class=\"anchor\" href=\"#使役动词\">#</a> 使役动词</h3>\n<p>make<br />\nlet<br />\nhave<br />\nget<br />\n...</p>\n<h4 id=\"make\"><a class=\"anchor\" href=\"#make\">#</a> make</h4>\n<ul>\n<li>动词原型 / 裸不定式</li>\n</ul>\n<pre><code>I make the wolf eat carrots from time to time.\n我使(让)狼也偶尔吃些胡萝卜 (这里的eat是裸不定式)\nI can eat carrots.\n我能吃胡萝卜 (这里的eat是动词原型)\n</code></pre>\n<ul>\n<li>形容词</li>\n</ul>\n<pre><code>The carrot made the wolf full.\n胡萝卜使(让)狼饱了。\n</code></pre>\n<hr />\n<h4 id=\"let\"><a class=\"anchor\" href=\"#let\">#</a> let</h4>\n<ul>\n<li>动词原型 / 裸不定式</li>\n</ul>\n<pre><code>I'll let the wolf eat some chocolate.\n我会让狼吃点巧克力。\n</code></pre>\n<ul>\n<li>副词</li>\n</ul>\n<pre><code>Let me out!\n让我出去 (这里out是副词, 作宾语补语)\n</code></pre>\n<hr />\n<h4 id=\"have\"><a class=\"anchor\" href=\"#have\">#</a> have</h4>\n<ul>\n<li>动词原型 / 裸不定式</li>\n</ul>\n<pre><code>I'll have the wolf wash the dishes.\n我会让狼洗盘子。(我把洗盘子的任务给狼做)\n</code></pre>\n<ul>\n<li>过去分词</li>\n</ul>\n<pre><code>I had my car washed.\nMy car was washed (by someone) as I wanted.\n我让某人洗了我的车\n\nI had my nails done.\nMy nails were done (by someone) as I wanted.\n我让某人修了我的指甲\n</code></pre>\n<hr />\n<h4 id=\"get\"><a class=\"anchor\" href=\"#get\">#</a> get</h4>\n<ul>\n<li>(完整) 不定式</li>\n</ul>\n<pre><code>I'll get the wolf to clean the kitchen after she washes the dishes.\n我会让狼洗碗盘子再把厨房清理了(这里get是说服鼓励做某事)\n</code></pre>\n<ul>\n<li>过去分词</li>\n</ul>\n<pre><code>I got my nails done.\n我让某人修了我的指甲\n</code></pre>\n<hr />\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h4>\n<pre><code>使役动词\n        表达含义：使，让，令...\n        后接成分：\n                宾语\n                宾语补语\n                        动词原型(裸不定式)\n                        副词\n                        过去分词\n                        ...\n        常用使役动词：\n                make:迫使...做...\n                let:允许...做...\n                have:给...责任/任务\n                get:说服/鼓励...做...\n</code></pre>\n<hr />\n<h3 id=\"从句\"><a class=\"anchor\" href=\"#从句\">#</a> 从句</h3>\n<h4 id=\"形容词从句定语从句\"><a class=\"anchor\" href=\"#形容词从句定语从句\">#</a> 形容词从句 (定语从句)</h4>\n<h5 id=\"1-形容词从句的思维方式\"><a class=\"anchor\" href=\"#1-形容词从句的思维方式\">#</a> 1、形容词从句的思维方式</h5>\n<pre><code>The rabbit is eating a carrot that I bought.\n兔子在吃一根我买来的胡萝卜\n</code></pre>\n<h5 id=\"2-形容词从句构成\"><a class=\"anchor\" href=\"#2-形容词从句构成\">#</a> 2、形容词从句构成</h5>\n<pre><code>The rabbit is eating a carrot that I bought.\n这里的that就是关系代词\n\nThe teacher who ate a carrot is a rabbit.\nwho就是关系代词\n</code></pre>\n<h5 id=\"that-vs-which\"><a class=\"anchor\" href=\"#that-vs-which\">#</a> that vs. which</h5>\n<p>先行词唯一的：that<br />\n 先行词多选一：which</p>\n<pre><code>The rabbit ate the largest carrot that I've ever seen.\n这里的carrot已经是最大的，是唯一的，所以用that\n\nThe rabbit ate a carrot which I bought.\n这里是吃了我买的其中一个，是多选一，所以用which\n</code></pre>\n<h5 id=\"关系副词引导的形容词从句\"><a class=\"anchor\" href=\"#关系副词引导的形容词从句\">#</a> 关系副词引导的形容词从句</h5>\n<pre><code>This was the place where(at which) the rabbit ate the carrot.\n这是兔子吃胡萝卜的地方  可以使用where或at which\n\nThis is the reason why(for which) the rabbit ate the carrot.\n这是兔子吃胡萝卜的原因  可以使用why或者for which\n\nThat was the day when(on which) the rabbit ate the carrot for the first time.\n这是兔子吃胡萝卜的那一天 可以使用when或者on which\n</code></pre>\n<h5 id=\"限定性与非限定性\"><a class=\"anchor\" href=\"#限定性与非限定性\">#</a> 限定性与非限定性</h5>\n<p>限定性形容词从句</p>\n<pre><code>The rabbit ate the carrot which was on the table.\n限定了carrot的范围/性质\n\nI have a head which is round.\n我有好几个头，其中一个是圆的。\n</code></pre>\n<p>非限定性形容词从句</p>\n<pre><code>The rabbit ate the carrot, which was on the table.\n兔子吃胡萝卜，胡萝卜在桌上\n\nI have a head, which is round.\n我有一个头，这个头是圆的。\n</code></pre>\n<hr />\n<h4 id=\"名词从句\"><a class=\"anchor\" href=\"#名词从句\">#</a> 名词从句</h4>\n<h5 id=\"主语从句原理\"><a class=\"anchor\" href=\"#主语从句原理\">#</a> 主语从句原理</h5>\n<pre><code>That the rabbit ate a carrot is obvious\n兔子吃了胡萝卜这件事是明显的\n\nWhether the rabbit ate the carrot is obvious.\n兔子为什么吃胡萝卜这件事是明显的\n\nWhere the rabbit ate the carrot is obvious。\n兔子在哪里吃胡萝卜这件事是明显的\n\nwhen the rabbit ate the carrot is obvious.\n兔子什么时候吃胡萝卜这件事是明显的。\n</code></pre>\n<p>发现了主语从句是要以引导词开头的</p>\n<h6 id=\"形式主语\"><a class=\"anchor\" href=\"#形式主语\">#</a> 形式主语</h6>\n<pre><code>It is obvious that the hungry rabbit had already eaten a carrot for dinner this evening.\nit在这里是形式主语,真正的主语是从句中的内容\n\nIt is obvious that the rabbit ate a carrot.\n兔子吃了胡萝卜这件事是明显的\n\nIt is obvious whether the rabbit ate the carrot.\n兔子为什么吃胡萝卜这件事是明显的\n\nIt is obvious where the rabbit ate the carrot.\n兔子在哪里吃胡萝卜这件事是明显的\n</code></pre>\n<h5 id=\"宾语从句\"><a class=\"anchor\" href=\"#宾语从句\">#</a> 宾语从句</h5>\n<h6 id=\"1-确定信息-不确定信息\"><a class=\"anchor\" href=\"#1-确定信息-不确定信息\">#</a> 1、确定信息 &amp; 不确定信息</h6>\n<pre><code>确定信息\nI saw that the rabbit ate a carrot.\n我看见这兔子吃了根胡萝卜。\n</code></pre>\n<pre><code>不确定\nI saw whether the rabbit ate the carrot.\n我看见兔子因为什么吃胡萝卜\n\nI saw who ate the carrot.\n我看见谁吃了胡萝卜\n</code></pre>\n<h6 id=\"2-引导词that的省略\"><a class=\"anchor\" href=\"#2-引导词that的省略\">#</a> 2、引导词 that 的省略</h6>\n<p>只有引导词 <code>that</code>  可以省略</p>\n<pre><code>I know (that) the rabbit ate a carrot.\n\n不可省略引导词that的情况\nI didn't know that the rabbit ate the carrot and that you saw it.\n这里的that就不能去掉\n\n</code></pre>\n<h6 id=\"否定加在谓语动词前而非从句中\"><a class=\"anchor\" href=\"#否定加在谓语动词前而非从句中\">#</a> 否定加在谓语动词前，而非从句中</h6>\n<pre><code>I don't think (that) the rabbit is smart.\nI don't believe (that) you will give me some coins.\n</code></pre>\n<h6 id=\"4-主从时态一致\"><a class=\"anchor\" href=\"#4-主从时态一致\">#</a> 4、主从时态一致</h6>\n<pre><code>I knew (that) the rabbit liked carrots.\n主句从句都是过去式\n\nI knew (that) the sun rises in the east.\n只有从句是客观/永恒的才是原型\n</code></pre>\n<h6 id=\"5-be-形容词-that\"><a class=\"anchor\" href=\"#5-be-形容词-that\">#</a> 5、be + 形容词 + that...</h6>\n<pre><code>I am sure that there's a carrot on the table.\n我相信有胡萝卜在桌上\n\nI am happy that there's a carrot on the table.\n我很高兴胡萝卜在桌上\n</code></pre>\n<h5 id=\"表语从句\"><a class=\"anchor\" href=\"#表语从句\">#</a> 表语从句</h5>\n<h6 id=\"表语从句系动词be动词\"><a class=\"anchor\" href=\"#表语从句系动词be动词\">#</a> 表语从句系动词 (be 动词)</h6>\n<pre><code>That the rabbit ate a carrot is a secret.\n主语从句\n |\n V\nThe secret is that the rabbit ate a carrot.\n表语从句\n</code></pre>\n<h6 id=\"表语从句系动词非be动词\"><a class=\"anchor\" href=\"#表语从句系动词非be动词\">#</a> 表语从句系动词 (非 be 动词)</h6>\n<pre><code>It seems that the rabbit is hungry.\n\nIt feels that you're not telling the truth.\n感觉你没有说实话\n</code></pre>\n<h5 id=\"同位语从句\"><a class=\"anchor\" href=\"#同位语从句\">#</a> 同位语从句</h5>\n<p>就是把主语换一种方式再说一次</p>\n<pre><code>The fact that the rabbit ate the carrot did not surprise me.\n兔子吃了胡萝卜这个事实并没有让我吃惊\n</code></pre>\n<h5 id=\"宾语补语从句\"><a class=\"anchor\" href=\"#宾语补语从句\">#</a> 宾语补语从句</h5>\n<pre><code>You can call me what you like.\n这里me是宾语，而后面的what you like就是宾语补语从句\n你可以随便叫我什么\n\nMy education made me smart.\n我的教育成就了我\n</code></pre>\n<hr />\n<h4 id=\"副词从句状语从句\"><a class=\"anchor\" href=\"#副词从句状语从句\">#</a> 副词从句 (状语从句)</h4>\n<h5 id=\"时间副词从句\"><a class=\"anchor\" href=\"#时间副词从句\">#</a> 时间副词从句</h5>\n<h6 id=\"1-在某一时间点之前\"><a class=\"anchor\" href=\"#1-在某一时间点之前\">#</a> 1、在某一时间点之前</h6>\n<p>引导词：before</p>\n<pre><code>The rabbit ate a carrot at home before the wolf stopped by.\n大灰狼串门之前，兔子吃了根胡萝卜\n\nBefore the wolf stopped by, the rabbit ate a carrot at home.\n</code></pre>\n<h6 id=\"2-在某一时间点之中当时\"><a class=\"anchor\" href=\"#2-在某一时间点之中当时\">#</a> 2、在某一时间点之中 (当时)</h6>\n<p>引导词：when，while， as</p>\n<pre><code>When: 时间点，“突然”\nThe rabbit was eating a carrot when I reached home.\n我到家的时候，兔子在吃胡萝卜。\n\nwhile:时间段\nThe rabbit was eating a carrot while I was making a video.\n我做视频的过程中，兔子在吃胡萝卜.\n\nAs:同时\nI ate a carrot as I made the video.\n我一边吃胡萝卜一边做视频\n</code></pre>\n<h6 id=\"3-在某一时间点之后\"><a class=\"anchor\" href=\"#3-在某一时间点之后\">#</a> 3、在某一时间点之后</h6>\n<p>引导词：after</p>\n<pre><code>The rabbit ate a carrot after the wolf stopped by.\n大灰狼串门之后，兔子吃了根胡萝卜。\n</code></pre>\n<h6 id=\"4-从之前某一时间点开始算\"><a class=\"anchor\" href=\"#4-从之前某一时间点开始算\">#</a> 4、从之前某一时间点开始算</h6>\n<p>引导词：since</p>\n<pre><code>The rabbit has shared three carrots since the wolf stopped by.\n自从大灰狼串门，兔子已经分享了三根胡萝卜了。\n</code></pre>\n<h6 id=\"5-知道之后的某一时间点\"><a class=\"anchor\" href=\"#5-知道之后的某一时间点\">#</a> 5、知道之后的某一时间点</h6>\n<p>引导词：until</p>\n<pre><code>The rabbit waited until the wolf stopped by.\n兔子一直在等待，知道大灰狼来串门。\n</code></pre>\n<h6 id=\"6-一就\"><a class=\"anchor\" href=\"#6-一就\">#</a> 6、一... 就...</h6>\n<p>引导词：as soon as</p>\n<pre><code>The rabbit will eat a carrot as soon as the wolf leaves .\n大灰狼一离开兔子就要吃一个胡萝卜。\n</code></pre>\n<h6 id=\"7-下次\"><a class=\"anchor\" href=\"#7-下次\">#</a> 7、下次...</h6>\n<p>引导词：the next time</p>\n<pre><code>The rabbit will share the biggest carrot the next time the wolf stops by.\n下次大灰狼来串门，兔子会一起分享最大的胡萝卜.\n</code></pre>\n<h5 id=\"地点副词状语从句\"><a class=\"anchor\" href=\"#地点副词状语从句\">#</a> 地点副词 (状语) 从句</h5>\n<p>引导词：where + &quot;强调形式&quot;(wherever,everywhere, anywhere)</p>\n<pre><code>The rabbit will go where he can find a carrot .\n兔子将会去她可以吃胡萝卜的地方\n\nThe rabbit will go wherever he can find a carrot.\nwherever(强调：&quot;不管&quot;哪里)\n兔子将会去她可以找到胡萝卜的不管任何地方\n\nThe rabbit sees a carrot everywhere he goes.\neverywhere(强调:&quot;所有&quot;地方)\n\nThe rabbit can eat a carrot anywhere he likes.\nanywhere(强调：&quot;任何&quot;地方)\n</code></pre>\n<h5 id=\"比较副词从句\"><a class=\"anchor\" href=\"#比较副词从句\">#</a> 比较副词从句</h5>\n<h6 id=\"比较副词从句更\"><a class=\"anchor\" href=\"#比较副词从句更\">#</a> 比较副词从句：&quot;更&quot;</h6>\n<pre><code>He is smarter than I am .\n\nThis carrot is bigger than that one.\nThis carrot is bigger than that one is.\n</code></pre>\n<h6 id=\"比较副词从句同样得\"><a class=\"anchor\" href=\"#比较副词从句同样得\">#</a> 比较副词从句：&quot;同样得...&quot;</h6>\n<pre><code>He is as smart as me.\nThis carrot is as big as that one.\nShe is as beautiful as Snow White.\n</code></pre>\n<h6 id=\"比较副词从句越越\"><a class=\"anchor\" href=\"#比较副词从句越越\">#</a> 比较副词从句：&quot;越... 越...&quot;</h6>\n<p>the (比较级), the (比较级)</p>\n<pre><code>The more you practice English, the more fluent you become.\n你越多练习英语，你就越流利。\n</code></pre>\n<h5 id=\"条件副词从句\"><a class=\"anchor\" href=\"#条件副词从句\">#</a> 条件副词从句</h5>\n<p>引导词：if,unless<br />\n<mark> 从句总会比主句落后一个时间段</mark></p>\n<pre><code>If you like this video, you will give it a thunbs-up.\n如果你喜欢这个视频，你会给他点赞\n\nUnless you like this video, you will not give it a thumbs-up.\n除非你喜欢这个视频，你不会给他点赞\n</code></pre>\n<p>其他引导词：provided，as long as, in case</p>\n<pre><code>Provided that my video is excellent, you will give it a thumbs-up.\n如果我的视频很棒，你会给他点赞\n\nAs long as I make excellent video, you will remain my follower.\n只要我一直做高质量视频，你就会继续关注我\n\nIn case you don't understand,please comment below.\n如果你不明白，请在下方评论\n</code></pre>\n<h5 id=\"让步副词从句\"><a class=\"anchor\" href=\"#让步副词从句\">#</a> 让步副词从句</h5>\n<pre><code>假设\nEven if I see a carrot, I will not eat it.\n即使我看到了一根胡萝卜，我也不会吃它\n\n事实 \nAlthough/though/eventhough I see a carrot, I will not eat it.\n尽管我看到了一根胡萝卜，但我不会吃它\n\n不管如何 no matter + 疑问词\nNo matter what happens, I will not eat the carrot.\n不管什么事会发生，我都不会吃这胡萝卜。\n</code></pre>\n<h5 id=\"方式副词从句\"><a class=\"anchor\" href=\"#方式副词从句\">#</a> 方式副词从句</h5>\n<pre><code>I feel good as if I had just eaten a carrot.\n我感觉良好，就好像刚吃了一根胡萝卜一样\n与现实事实相反的假设\n\nLeave the carrot as it is.\n别动这胡萝卜-&gt;像这胡萝卜原本那样，别碰它\n</code></pre>\n<h5 id=\"原因副词从句\"><a class=\"anchor\" href=\"#原因副词从句\">#</a> 原因副词从句</h5>\n<pre><code>因果/语气：because &gt; since &gt; as\nThe rabbit ate the carrot because he was hungry.\n兔子吃了胡萝卜，因为他饿了。\n\nSince you are hungry, you can eat the carrot.\n既然你饿了，你可以吃这胡萝卜\n\nAs you were not here, we ate the carrot without you.\n因为你之前不在这，所以吃胡萝卜没带你\n\n</code></pre>\n<h6 id=\"because-vs-for\"><a class=\"anchor\" href=\"#because-vs-for\">#</a> because vs. for</h6>\n<pre><code>You must really like me, for you have giben all my videos a thumbs-up.\n你肯定很喜欢，(推测)你给我的视频都点赞了\n\nfor表示一种推测意思，而because则是因为所以\n</code></pre>\n<h5 id=\"目的副词从句\"><a class=\"anchor\" href=\"#目的副词从句\">#</a> 目的副词从句</h5>\n<pre><code>In order that I could finish the video in time, I pulled an-nighter.\n为了及时完成视频，我熬夜不睡\n |\n V\nI pulled an all-nighter so that I could finish the video in time.\n我熬夜不睡，就是为了及时完成视频\n注意：so that不能放在句首\n</code></pre>\n<p>目的副词从句中一般使用：can, could, may, might, should, would.</p>\n<h5 id=\"结果副词从句\"><a class=\"anchor\" href=\"#结果副词从句\">#</a> 结果副词从句</h5>\n<p>由 so that 构成</p>\n<pre><code>The temperature was low so that the lake froze.\n气温很低，所以湖结冰了。\n\nI ate so many carrots for lunch that I felt sick afterwards.\n我吃了那么多胡萝卜，导致我之后感到不舒服\nso... that...\n\nIt was such a tasty carrot that I ate it all at once.\n这是一个如此好吃的胡萝卜，以至于我一下就吃完它了。\nsuch + 名词 + that\n</code></pre>\n<hr />\n<h3 id=\"冠词\"><a class=\"anchor\" href=\"#冠词\">#</a> 冠词</h3>\n<h4 id=\"不定冠词\"><a class=\"anchor\" href=\"#不定冠词\">#</a> 不定冠词</h4>\n<h5 id=\"1-发音\"><a class=\"anchor\" href=\"#1-发音\">#</a> 1、发音</h5>\n<p><mark>a</mark> : 用于辅音音素前<br />\n<mark> an</mark> : 用于元音音素前<br />\n a rabbit<br />\nan apple<br />\na university<br />\nan hour<br />\n 注意！！<mark>看音标</mark></p>\n<h5 id=\"2-用法\"><a class=\"anchor\" href=\"#2-用法\">#</a> 2、用法</h5>\n<h6 id=\"21-泛指用法\"><a class=\"anchor\" href=\"#21-泛指用法\">#</a> 2.1、泛指用法</h6>\n<pre><code>I saw a rabbit.\n我看见兔子\n(泛指一只)\n\nA rabbit is smarter than a wolf.\n兔子(泛指)比狼(泛指)聪明\n</code></pre>\n<h6 id=\"22-表示数字1\"><a class=\"anchor\" href=\"#22-表示数字1\">#</a> 2.2、表示数字 &quot;1&quot;</h6>\n<pre><code>I gave you a hundred carrots.\n我给你一百个胡萝卜\n</code></pre>\n<h6 id=\"23-表示每\"><a class=\"anchor\" href=\"#23-表示每\">#</a> 2.3、表示 &quot;每&quot;</h6>\n<pre><code>I eat 10 carrots a day.\nI eat 10 carrots every day.\n我每天吃十根胡萝卜\n</code></pre>\n<h6 id=\"24-主谓一致\"><a class=\"anchor\" href=\"#24-主谓一致\">#</a> 2.4、主谓一致</h6>\n<pre><code>a teacher and video creator.\n一位老师兼视频创作者\n\na teacher and a video creator.\n一位老师和一位视频创作者\n</code></pre>\n<h6 id=\"25-固定表达\"><a class=\"anchor\" href=\"#25-固定表达\">#</a> 2.5、固定表达</h6>\n<pre><code>have a good time.\n玩的开心\n\nas a result.\n因此，结果\n\nin a hurry.\n匆忙的\n\nall of a sudden\n突然\n</code></pre>\n<hr />\n<h4 id=\"定冠词\"><a class=\"anchor\" href=\"#定冠词\">#</a> 定冠词</h4>\n<h5 id=\"1-发音-2\"><a class=\"anchor\" href=\"#1-发音-2\">#</a> 1、发音</h5>\n<p>the<br />\n 元音音素前要变</p>\n<h5 id=\"2-用法-2\"><a class=\"anchor\" href=\"#2-用法-2\">#</a> 2、用法</h5>\n<h6 id=\"21-特指\"><a class=\"anchor\" href=\"#21-特指\">#</a> 2.1、特指</h6>\n<pre><code>1、\nI saw a rabbit. The rabbit ran fast.\n我今天看到一只兔子，这只兔子跑得快\n开始的a是第一次提到这个兔子，后面使用the则是双方都知道了是这只兔子\n\n2、\n用在序数词和形容词的最高级前\nthe first rabbit \n第一只兔子\nthe biggest carrot \n最大的胡萝卜\n\n3、\n独一无二的名词前\nthe sun 太阳\nthe moon 月亮\nthe earth 地球\n</code></pre>\n<h6 id=\"22-泛指\"><a class=\"anchor\" href=\"#22-泛指\">#</a> 2.2、泛指</h6>\n<pre><code>I like playing the piano.\n我喜欢弹钢琴(泛指&quot;弹钢琴&quot;这件事)\n\nplay the guitar 弹吉他\nplay the violin 拉小提琴\nplay the flute 吹笛子\n</code></pre>\n<h6 id=\"23-在形容词前\"><a class=\"anchor\" href=\"#23-在形容词前\">#</a> 2.3、在形容词前</h6>\n<pre><code>the + 形容词: 指代一类人\nthe rich 富人\nthe poor 穷人\n</code></pre>\n<h6 id=\"24-固定表达\"><a class=\"anchor\" href=\"#24-固定表达\">#</a> 2.4、固定表达</h6>\n<pre><code>all the time 一直，总是\nby the way 顺便\nout of the question 不可能，没门\n</code></pre>\n<h4 id=\"零冠词\"><a class=\"anchor\" href=\"#零冠词\">#</a> 零冠词</h4>\n<p>定义：名词前不用冠词的情况<br />\n主要作用：泛指</p>\n<h5 id=\"1-复数泛指\"><a class=\"anchor\" href=\"#1-复数泛指\">#</a> 1、复数泛指</h5>\n<pre><code>Rabbits are smart. 兔子聪明\nWater is important. 水是重要的\n</code></pre>\n<h5 id=\"2-泛指概念\"><a class=\"anchor\" href=\"#2-泛指概念\">#</a> 2、泛指概念</h5>\n<pre><code>I want to play football 我想踢足球\nI like geography 我喜欢地理\nin spring 在春天\nin August 在八月\non Monday 在周一\n</code></pre>\n<h5 id=\"3-专有名词\"><a class=\"anchor\" href=\"#3-专有名词\">#</a> 3、专有名词</h5>\n<pre><code>Papa rabbit \n</code></pre>\n<h5 id=\"4-固定表达\"><a class=\"anchor\" href=\"#4-固定表达\">#</a> 4、固定表达</h5>\n<pre><code>from time to time 不时地\nface to face 面对面地\nout of question 毫无疑问(out of the question 不可能)\n</code></pre>\n<hr />\n<h3 id=\"介词\"><a class=\"anchor\" href=\"#介词\">#</a> 介词</h3>\n<h4 id=\"介词原理\"><a class=\"anchor\" href=\"#介词原理\">#</a> 介词原理</h4>\n<p>时间信息；空间信息；方式信息；逻辑信息 (原因；目的；对象...)<br />\n&quot;前置词&quot;</p>\n<hr />\n<h4 id=\"介词的构成形式\"><a class=\"anchor\" href=\"#介词的构成形式\">#</a> 介词的构成形式</h4>\n<h5 id=\"简单介词\"><a class=\"anchor\" href=\"#简单介词\">#</a> 简单介词</h5>\n<p>in: 在... 里；<br />\nto: 朝...<br />\nwith: 和...</p>\n<h5 id=\"短语介词视作介词不单独表完整义\"><a class=\"anchor\" href=\"#短语介词视作介词不单独表完整义\">#</a> 短语介词 (视作介词；不单独表完整义)</h5>\n<pre><code>by way of \n通过...方式(介词 + 名词 + 介词)\n\nat the end of \n在...的最后(介词 + the + 名词 + 介词)\n\nalong with \n和...一起(介词 + 介词)\n\nbecause of\n因为...(连词 + 介词)\n\nprevious to \n...之前(形容词 + 介词)\n</code></pre>\n<h5 id=\"合成介词\"><a class=\"anchor\" href=\"#合成介词\">#</a> 合成介词</h5>\n<pre><code>into 到...之上\nonto 到...之上\nwithin 在...之内\nnotwitstanding 尽管 \n</code></pre>\n<h5 id=\"分词介词\"><a class=\"anchor\" href=\"#分词介词\">#</a> 分词介词</h5>\n<pre><code>including 包括\nregarding 关于...；至于...\nconsidering 鉴于...;考虑到...\ngiven 考虑到...；如果...\n</code></pre>\n<hr />\n<h4 id=\"about\"><a class=\"anchor\" href=\"#about\">#</a> about</h4>\n<h5 id=\"关于外围有涉及非核心\"><a class=\"anchor\" href=\"#关于外围有涉及非核心\">#</a> 关于 (外围；有涉及，非核心)</h5>\n<pre><code>I know something about the rabbit.\n我知道关于这个兔子的事儿\n</code></pre>\n<h5 id=\"大约从外大范围大致数\"><a class=\"anchor\" href=\"#大约从外大范围大致数\">#</a> 大约 (从外大范围大致数)</h5>\n<pre><code>There are about 20 carrots.\n大约有20根胡萝卜\n</code></pre>\n<h5 id=\"针对从外向内地解决问题\"><a class=\"anchor\" href=\"#针对从外向内地解决问题\">#</a> 针对 (从外向内地解决问题)</h5>\n<pre><code>Let's do something about the problem.\n让我们做些事儿解决问题\n</code></pre>\n<h5 id=\"某人某事有某种特性\"><a class=\"anchor\" href=\"#某人某事有某种特性\">#</a> 某人某事有某种特性</h5>\n<pre><code>There's something dangerous about the wolf.\n狼有点危险的特质(狼感觉有点危险)\n</code></pre>\n<h5 id=\"到处在外面来来回回\"><a class=\"anchor\" href=\"#到处在外面来来回回\">#</a> 到处 (在外面来来回回)</h5>\n<pre><code>Stop running about!\n别来来回回跑！\n</code></pre>\n<hr />\n<h4 id=\"on\"><a class=\"anchor\" href=\"#on\">#</a> on</h4>\n<pre><code>Dinner is on me.\n晚餐我付钱\n\nThe burden of paying for dinner is on me.\n为晚餐付钱的重任在我身上。\n</code></pre>\n<hr />\n<h4 id=\"beyond\"><a class=\"anchor\" href=\"#beyond\">#</a> beyond</h4>\n<pre><code>It's beyond me.\n我无法理解\n\nIt is beyond the things that I can understand.\n这在我能理解的事情的范围之外。\n</code></pre>\n<hr />\n<h4 id=\"in\"><a class=\"anchor\" href=\"#in\">#</a> In</h4>\n<pre><code>in the sun \n在阳光下\n\ndressed in white \n穿着白衣服\n\nin English \n用英语\n</code></pre>\n<hr />\n<h4 id=\"in-vs-on-vs-at\"><a class=\"anchor\" href=\"#in-vs-on-vs-at\">#</a> In vs. On vs. At</h4>\n<p>范围依次降低</p>\n<pre><code>I'm walking in the street.\n我在大街上走。(大范围)\nin a year 在一年内\n\nThere is some trash on the street.\n街上有些垃圾(中范围)\non that day 在那一天\n\nRight now I'm at Carrot Street and Apple Street.\n现在我在胡萝卜街和苹果街的交界处(小范围)\nat 8 o'clock 在8点钟\n</code></pre>\n<hr />\n<h4 id=\"常见英语介词的用法\"><a class=\"anchor\" href=\"#常见英语介词的用法\">#</a> 常见英语介词的用法</h4>\n<h5 id=\"表示空间的介词\"><a class=\"anchor\" href=\"#表示空间的介词\">#</a> 表示空间的介词</h5>\n<h6 id=\"in-2\"><a class=\"anchor\" href=\"#in-2\">#</a> In</h6>\n<p>在... 里面</p>\n<pre><code>in the house\n在房屋里\n\nin the park \n在公园里\n\nin the country\n在国内\n</code></pre>\n<h6 id=\"on-2\"><a class=\"anchor\" href=\"#on-2\">#</a> on</h6>\n<p>在... 上面</p>\n<pre><code>on the table \n在桌子上 \n\non the floor \n在地板上 \n</code></pre>\n<h6 id=\"in-vs-on\"><a class=\"anchor\" href=\"#in-vs-on\">#</a> in vs. on</h6>\n<pre><code>on the tree \n长在树上的\nThere are some apples on the tree.\n书上结着一些苹果\n\nin the tree \n(外部事物)在树里 \nThere are some birds in the tree.\n书上有一些鸟\n</code></pre>\n<h6 id=\"at\"><a class=\"anchor\" href=\"#at\">#</a> at</h6>\n<p>在某处</p>\n<pre><code>at the corner of the street \n在街道拐角\n\nThe bus stopped at the bus station.\n公交车在车站停下了.\n</code></pre>\n<h6 id=\"over\"><a class=\"anchor\" href=\"#over\">#</a> over</h6>\n<p>覆盖；在... 上方；越过上空</p>\n<pre><code>The mother put a blanket over the child\n妈妈把毯子盖在孩子身上\n\nThe bridge over the river \n在河上的桥\n\nthe lamp over the table \n在桌上方的灯 \n\nThe plane flew over the mountain.\n飞机飞跃过高山\n</code></pre>\n<h6 id=\"above\"><a class=\"anchor\" href=\"#above\">#</a> above</h6>\n<p>在... 上方 (高于平面)</p>\n<pre><code>the sky above us  \n在我们上方的天空\n</code></pre>\n<h6 id=\"at-vs-over-vs-above\"><a class=\"anchor\" href=\"#at-vs-over-vs-above\">#</a> at vs. over vs. above</h6>\n<p>on：有接触的上方<br />\n over：可以描述动态<br />\n above：不能描述动态</p>\n<h6 id=\"under\"><a class=\"anchor\" href=\"#under\">#</a> under</h6>\n<p>在... 下方 (指在某物的正下方，含垂直在下方的意思)</p>\n<pre><code>There is a ball under the desk \n球在桌子的下面\n</code></pre>\n<h6 id=\"below\"><a class=\"anchor\" href=\"#below\">#</a> below</h6>\n<p>在... 下方 (表示低于某个平面，可以是正下方，也可以不是)</p>\n<pre><code>The rabbit dived below the surface of the water.\n兔子潜入了水下\n</code></pre>\n<h6 id=\"near\"><a class=\"anchor\" href=\"#near\">#</a> near</h6>\n<p>在... 附近；在... 周边</p>\n<pre><code>near the hospital\n在医院附近\n</code></pre>\n<h6 id=\"by-和-beside\"><a class=\"anchor\" href=\"#by-和-beside\">#</a> by 和 beside</h6>\n<p>在... 旁边</p>\n<pre><code>There is a hotel by/beside the river \n在河边有个旅馆\n</code></pre>\n<h6 id=\"next-to\"><a class=\"anchor\" href=\"#next-to\">#</a> next to</h6>\n<p>靠近；紧挨着</p>\n<pre><code>the building next to the school \n紧挨着学校的建筑\n</code></pre>\n<p><mark>near 表示有点距离</mark><br />\n<mark> by/beside/next to 就可以互换 (紧挨着)</mark></p>\n<h6 id=\"across\"><a class=\"anchor\" href=\"#across\">#</a> across</h6>\n<p>(从表面) 横过</p>\n<pre><code>go across the street \n穿过马路\n\nswim across the river \n游过河\n</code></pre>\n<h6 id=\"through\"><a class=\"anchor\" href=\"#through\">#</a> through</h6>\n<p>(从内部) 穿过</p>\n<pre><code>go through the tunnel\n穿过隧道 \n\nwalk through the forest\n穿过森林 \n\nlook through the window\n透过窗户看\n</code></pre>\n<h6 id=\"past\"><a class=\"anchor\" href=\"#past\">#</a> past</h6>\n<p>经过；路过</p>\n<pre><code>The rabbit walked past the wolf without saying any words.\n兔子从狼身边经过，没说一句话。\n</code></pre>\n<h6 id=\"in-front-of\"><a class=\"anchor\" href=\"#in-front-of\">#</a> in front of</h6>\n<p>在... 前方</p>\n<pre><code>The rabbit is standing in front of the wolf.\n兔子站在狼前面\n</code></pre>\n<h6 id=\"before\"><a class=\"anchor\" href=\"#before\">#</a> Before</h6>\n<p>在... 之前</p>\n<pre><code>She played the violin before the crowd.\n她在众人面前拉小提琴 \n\n</code></pre>\n<h6 id=\"behind\"><a class=\"anchor\" href=\"#behind\">#</a> behind</h6>\n<p>在... 之后</p>\n<pre><code>The wolf is standing behind the rabbit.\n狼站在兔子的后面\n</code></pre>\n<h6 id=\"between\"><a class=\"anchor\" href=\"#between\">#</a> between</h6>\n<p>在... 之间<br />\n between...and...</p>\n<pre><code>The carrot is between the rabbit and the wolf.\n胡萝卜在兔子和狼之间\n\nYou shouldn't eat between meals.\n你不应该在正餐之间吃东西。\n</code></pre>\n<h6 id=\"among\"><a class=\"anchor\" href=\"#among\">#</a> among</h6>\n<p>在... 之间 (三者或者更多)</p>\n<pre><code>The rabbit is standing among the carrots.\n兔子站在葫芦卜之间\n</code></pre>\n<h6 id=\"round-和-around\"><a class=\"anchor\" href=\"#round-和-around\">#</a> round 和 around</h6>\n<p>围绕；环绕</p>\n<pre><code>trees round/around the field \n环绕田地四周的树 \n\naround the world \n全世界\n</code></pre>\n<h6 id=\"along\"><a class=\"anchor\" href=\"#along\">#</a> along</h6>\n<p>沿着；顺着</p>\n<pre><code>Walk along this road\n沿着这条路一直走\n</code></pre>\n<h6 id=\"to\"><a class=\"anchor\" href=\"#to\">#</a> to</h6>\n<p>向；朝</p>\n<pre><code>go to school \n去上学\n</code></pre>\n<h6 id=\"toward-和-towards\"><a class=\"anchor\" href=\"#toward-和-towards\">#</a> toward 和 towards</h6>\n<p>朝着... 的方向</p>\n<pre><code>walk toward home.\n朝家走\n</code></pre>\n<h6 id=\"onto\"><a class=\"anchor\" href=\"#onto\">#</a> onto</h6>\n<p>到... 上面</p>\n<pre><code>The rabbit jumped onto the table \n兔子跳到桌子上\n</code></pre>\n<h6 id=\"into\"><a class=\"anchor\" href=\"#into\">#</a> into</h6>\n<p>到... 里面</p>\n<pre><code>walk into the house.\n走进房子\n</code></pre>\n<h6 id=\"out-of\"><a class=\"anchor\" href=\"#out-of\">#</a> out of</h6>\n<p>从里面出来</p>\n<pre><code>get out of the car \n从车里出来\n</code></pre>\n<h6 id=\"opposite\"><a class=\"anchor\" href=\"#opposite\">#</a> opposite</h6>\n<p>在... 对面</p>\n<pre><code>Our school is opposite my house.\n我们的学校在我家对面。\n</code></pre>\n<h6 id=\"against\"><a class=\"anchor\" href=\"#against\">#</a> against</h6>\n<p>与... 相反；倚，靠</p>\n<pre><code>We were rowing against the current.\n我们逆水行舟 \n\nThe rabbit was leaning against the tree.\n兔子正倚着一棵树\n</code></pre>\n<h6 id=\"up\"><a class=\"anchor\" href=\"#up\">#</a> up</h6>\n<p>沿... 向上</p>\n<pre><code>up the hill \n上山 \nup the river \n沿着河流逆流而上\n</code></pre>\n<h6 id=\"down\"><a class=\"anchor\" href=\"#down\">#</a> down</h6>\n<p>沿... 向下</p>\n<pre><code>walk down the road \n沿着这条路走下去\n\nroll down the hill \n从山上滚下去\n</code></pre>\n<h6 id=\"off\"><a class=\"anchor\" href=\"#off\">#</a> off</h6>\n<p>离... 有一定距离</p>\n<pre><code>New Zealand lies off the eastern coast of Australia.\n新西兰离澳大利亚东海岸有一些距离\n</code></pre>\n<hr />\n<h5 id=\"表示时间的介词\"><a class=\"anchor\" href=\"#表示时间的介词\">#</a> 表示时间的介词</h5>\n<h6 id=\"during\"><a class=\"anchor\" href=\"#during\">#</a> during</h6>\n<p>持续；在... 期间</p>\n<pre><code>during the past 2 days \n在过去的2天里 \n\nduring the past 2 weeks \n在过去的2周里\n\nduring the past 2 years \n在过去的2年里\n</code></pre>\n<h6 id=\"for\"><a class=\"anchor\" href=\"#for\">#</a> for</h6>\n<p>因为...；因... 持续</p>\n<pre><code>I've been learning English for 2 years.\n我持续学习英语两年时间\n</code></pre>\n<h6 id=\"since\"><a class=\"anchor\" href=\"#since\">#</a> Since</h6>\n<p>自从</p>\n<pre><code>since last week \n自从上周以来\n</code></pre>\n<h6 id=\"before-2\"><a class=\"anchor\" href=\"#before-2\">#</a> before</h6>\n<p>在... 之前</p>\n<pre><code>before Monday \n星期一之前 \n\nbefore 2020 \n在2020年之前\n</code></pre>\n<h6 id=\"after\"><a class=\"anchor\" href=\"#after\">#</a> After</h6>\n<p>在... 之后</p>\n<pre><code>after two years\n两年之后\n</code></pre>\n<h6 id=\"fromto\"><a class=\"anchor\" href=\"#fromto\">#</a> from...to...</h6>\n<p>从... 到...</p>\n<pre><code>from 9:00 to 10:00\n从9点到10点\n</code></pre>\n<h6 id=\"by\"><a class=\"anchor\" href=\"#by\">#</a> by</h6>\n<p>在... 附近 / 旁边；不超过... 边界；不迟于... 前</p>\n<pre><code>by 2 o'clock 在2点之前\nby tomorrow 在明天之前\n</code></pre>\n<h6 id=\"until\"><a class=\"anchor\" href=\"#until\">#</a> until</h6>\n<p>知道... 为止</p>\n<pre><code>until 8 o'clock \n知道8点为止\n</code></pre>\n<hr />\n<h5 id=\"表示方式的介词\"><a class=\"anchor\" href=\"#表示方式的介词\">#</a> 表示方式的介词</h5>\n<h6 id=\"in-3\"><a class=\"anchor\" href=\"#in-3\">#</a> in</h6>\n<p>... 方式；在... 里面</p>\n<pre><code>Let's talk in English \n让我们用英语对话\n</code></pre>\n<h6 id=\"through-2\"><a class=\"anchor\" href=\"#through-2\">#</a> through</h6>\n<p>通过... 方式；穿过</p>\n<pre><code>We succeed through hard work.\n我们通过努力工作而成功。\n</code></pre>\n<h6 id=\"by-2\"><a class=\"anchor\" href=\"#by-2\">#</a> by</h6>\n<p>通过...；在... 旁边</p>\n<pre><code>We learn English by watching videos.\n我们通过看视频学英语\n\nI go to work by car.\n</code></pre>\n<h6 id=\"with\"><a class=\"anchor\" href=\"#with\">#</a> with</h6>\n<p>用...；和... 一起</p>\n<pre><code>We write with pens .\n我们用笔写字\n</code></pre>\n<h6 id=\"on-3\"><a class=\"anchor\" href=\"#on-3\">#</a> On</h6>\n<p>在... 上面</p>\n<pre><code>We talked on the phone.\n我们通过电话进行交谈\n</code></pre>\n<hr />\n<h5 id=\"表示原因的介词\"><a class=\"anchor\" href=\"#表示原因的介词\">#</a> 表示原因的介词</h5>\n<h6 id=\"for-2\"><a class=\"anchor\" href=\"#for-2\">#</a> for</h6>\n<p>因为...；由于...</p>\n<pre><code>This rabbit is famous for being able to speak.\n这只兔子因会说话出名\n</code></pre>\n<h6 id=\"with-2\"><a class=\"anchor\" href=\"#with-2\">#</a> with</h6>\n<p>和... 一起<br />\n... 和... 分不开的原因</p>\n<pre><code>The rabbit is shaking with cold.\n兔子冷得发抖\n</code></pre>\n<h6 id=\"because-of-名词\"><a class=\"anchor\" href=\"#because-of-名词\">#</a> because of + 名词</h6>\n<pre><code>The rabbit didn't go out because of the rain.\n因为下雨，兔子没出去。\n\nThe rabbit didn't go out due to/owing to/on account of the rain.\n</code></pre>\n<hr />\n<h5 id=\"表示关于的介词\"><a class=\"anchor\" href=\"#表示关于的介词\">#</a> 表示关于的介词</h5>\n<h6 id=\"about-2\"><a class=\"anchor\" href=\"#about-2\">#</a> about</h6>\n<p>在... 外面；关于</p>\n<pre><code>Could you tell me something about your school?\n你能给我讲一些关于你学校的事情吗？\n</code></pre>\n<h6 id=\"of\"><a class=\"anchor\" href=\"#of\">#</a> of</h6>\n<p>此外的；附加的</p>\n<pre><code>He thought of something important.\n他想起了一些重要的事情。\n</code></pre>\n<h6 id=\"on-4\"><a class=\"anchor\" href=\"#on-4\">#</a> On</h6>\n<p>在... 上面；关于</p>\n<pre><code>Would you like some advice on learning English?\n你想要些关于学习英语的建议吗？\n</code></pre>\n<hr />\n<h5 id=\"表示数值的介词\"><a class=\"anchor\" href=\"#表示数值的介词\">#</a> 表示数值的介词</h5>\n<h6 id=\"at-2\"><a class=\"anchor\" href=\"#at-2\">#</a> at</h6>\n<p>在某处</p>\n<pre><code>at a high price \n在一个高的价格(点)\n\nat a fast rate \n以一个很快的速率\n</code></pre>\n<h6 id=\"by-3\"><a class=\"anchor\" href=\"#by-3\">#</a> by</h6>\n<p>(后接度量标准)</p>\n<pre><code>They get paid by the hour.\n他们按小时拿报酬。\n</code></pre>\n<h6 id=\"for-3\"><a class=\"anchor\" href=\"#for-3\">#</a> for</h6>\n<p>以... 的价钱</p>\n<pre><code>I bought these books for 100 Yuan.\n我买这些书花了100元。\n</code></pre>\n<hr />\n<h5 id=\"表示状态的介词\"><a class=\"anchor\" href=\"#表示状态的介词\">#</a> 表示状态的介词</h5>\n<h6 id=\"in-4\"><a class=\"anchor\" href=\"#in-4\">#</a> in</h6>\n<p>在... 里；在... 状态中；</p>\n<pre><code>in progress 在进行中\nin a dilemma. 处于进退两难的境地中\n</code></pre>\n<h6 id=\"on-5\"><a class=\"anchor\" href=\"#on-5\">#</a> On</h6>\n<p>在... 之上<br />\n受到之下... 的支持 (的状态)</p>\n<pre><code>on a diet 在节食支持的状态\non drugs 在药物支持的状态\n</code></pre>\n<h6 id=\"at-3\"><a class=\"anchor\" href=\"#at-3\">#</a> at</h6>\n<p>在某处；在某个状态</p>\n<pre><code>at work 在工作\nat dinner 在吃晚饭\n</code></pre>\n<h6 id=\"under-2\"><a class=\"anchor\" href=\"#under-2\">#</a> under</h6>\n<p>在... 下面；在 (框架，前提) 下</p>\n<pre><code>under construction\n在施工中\n\nunder discussion\n在讨论中\n</code></pre>\n<hr />\n<h5 id=\"表示排除的介词\"><a class=\"anchor\" href=\"#表示排除的介词\">#</a> 表示排除的介词</h5>\n<h6 id=\"besides\"><a class=\"anchor\" href=\"#besides\">#</a> besides</h6>\n<p>除了... 还</p>\n<pre><code>I like many things besides carrots.\n除了胡萝卜，我还喜欢很多东西。\n</code></pre>\n<h6 id=\"except\"><a class=\"anchor\" href=\"#except\">#</a> except</h6>\n<p>除了</p>\n<pre><code>Everyone went to the party except the rabbit.\n大家都去了聚会除了兔子\n\nexcept for(往往是对前面的内容进行反驳)\nThe party is great except for the loud music.\n聚会很棒，除了嘈杂的音乐。\n</code></pre>\n<hr />\n<h4 id=\"介词短语\"><a class=\"anchor\" href=\"#介词短语\">#</a> 介词短语</h4>\n<p>介词短语可以作为很多句子成分<br />\n通常作状语修饰动作</p>\n<pre><code>The rabbit ate a carrot at noon.\n中午，兔子吃了一根胡萝卜\n\nThe rabbit is eating a carrot in the kitchen.\n兔子正在厨房吃一根胡萝卜\n\nThe rabbit likes traveling by car.\n兔子喜欢乘车出游\n</code></pre>\n<h4 id=\"介词固定搭配\"><a class=\"anchor\" href=\"#介词固定搭配\">#</a> 介词固定搭配</h4>\n<pre><code>for example 比如\nat ease 自在\nin turn 依次\nneed for 需要...\nlong for 渴望...\nready for 准备...\n</code></pre>\n<hr />\n<h3 id=\"名词\"><a class=\"anchor\" href=\"#名词\">#</a> 名词</h3>\n<h4 id=\"普通名词\"><a class=\"anchor\" href=\"#普通名词\">#</a> 普通名词</h4>\n<pre><code>rabbit\n</code></pre>\n<h5 id=\"单数名词和复数名词\"><a class=\"anchor\" href=\"#单数名词和复数名词\">#</a> 单数名词和复数名词</h5>\n<pre><code>one rabbit \ntwo tabbits\n\n特例：\nbox -&gt; boxes\nman -&gt; men\nchild -&gt; children\n</code></pre>\n<h5 id=\"可数普通名词\"><a class=\"anchor\" href=\"#可数普通名词\">#</a> 可数普通名词</h5>\n<pre><code>rabbit\ncarrot\n\nteam: 队伍\n        1、指一个队伍(单数)\n        2、指队伍中的所有成员(复数)\n\npolice\npeople\n\n</code></pre>\n<h5 id=\"不可数普通名词\"><a class=\"anchor\" href=\"#不可数普通名词\">#</a> 不可数普通名词</h5>\n<pre><code>peace 和平\nhonesty 诚实\nwater 水\nair 空气\nbeer 啤酒\nmilk 牛奶\nwood 木材\npaper 纸\n</code></pre>\n<hr />\n<h4 id=\"专有名词\"><a class=\"anchor\" href=\"#专有名词\">#</a> 专有名词</h4>\n<p><mark>首字母大写</mark></p>\n<pre><code>Earth 地球\nAsia 亚洲\nChina 中国\nBank of China 中国银行\nNew Year 新年\n</code></pre>\n<h5 id=\"专有名词的可数不可数\"><a class=\"anchor\" href=\"#专有名词的可数不可数\">#</a> 专有名词的可数 / 不可数</h5>\n<p><mark>有的语境下专有名词也可以可数</mark></p>\n<pre><code>There's a Michael downstairs looking for you.\n楼下有个叫Michael的人在找你(世界上有很多人叫Michael的)\n\nWhich Michael are you talking about? Are you talking about the Michael whom we met last week?\n你在说哪个Michael？你再说我们上周见到的那个Michael吗？(这里的Michael就是特指了)\n</code></pre>\n<hr />\n<h4 id=\"到底什么是可数的\"><a class=\"anchor\" href=\"#到底什么是可数的\">#</a> 到底什么是可数的？</h4>\n<pre><code>water 水\n当water表示水域时，就可以变成复数\ninternational waters\n国际水域\na glass of water 一杯水\ntwo glasses of water 两杯水\na type of fruit 一类水果\ntwo types of fruit 两类水果\n\n\n</code></pre>\n<hr />\n<h4 id=\"名词所有格\"><a class=\"anchor\" href=\"#名词所有格\">#</a> 名词所有格</h4>\n<h5 id=\"s所有格\"><a class=\"anchor\" href=\"#s所有格\">#</a> 's 所有格</h5>\n<pre><code>the rabbit's carrot \n兔子的胡萝卜\n\nthe team's success\n队伍的成功\n\nTom and Jerry's room\nTom和Jerry共有的房间(表示共有的话，只需要在最后一个名词后加s即可)\n\ntoday's news\n今天的新闻\n</code></pre>\n<h5 id=\"of所有格\"><a class=\"anchor\" href=\"#of所有格\">#</a> of 所有格</h5>\n<p><mark>用于描述所修饰名词的性质特征</mark></p>\n<pre><code>the paper's quality. -&gt; the quality of the paper\nthe peace's influence -&gt; the influence of the peace\ntoday's news -&gt; the news of today.\n</code></pre>\n<h5 id=\"双重所有格\"><a class=\"anchor\" href=\"#双重所有格\">#</a> 双重所有格</h5>\n<pre><code>I am a friend of Michael's.\n我是Michael众多朋友中的一员。\n\na photo of Michael's\nMichael拥有的照片中的一张\na photo of Michael\nMichael出境的照片之一\n</code></pre>\n<hr />\n<h3 id=\"代词\"><a class=\"anchor\" href=\"#代词\">#</a> 代词</h3>\n<h4 id=\"1-人称代词\"><a class=\"anchor\" href=\"#1-人称代词\">#</a> 1、人称代词</h4>\n<h5 id=\"11-人称代词介绍\"><a class=\"anchor\" href=\"#11-人称代词介绍\">#</a> 1.1、人称代词介绍</h5>\n<pre><code>There is a rabbit. It is white. It is eating a carrot. It looks happy.\n有只兔子，它是白色的，它在吃一根胡萝卜，它看起来很开心。\n这里的it就是人称代词\n\nWho is he? Do you know?\nI don't know. I thought you knew him.\n这里用到的就是人称代词\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>人称</th>\n<th>数</th>\n<th>主格</th>\n<th>宾格</th>\n<th>所有格形容词</th>\n<th>所有格代词</th>\n<th>反身代词</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>第一人称</td>\n<td>单数</td>\n<td>I</td>\n<td>me</td>\n<td>my</td>\n<td>mine</td>\n<td>myself</td>\n</tr>\n<tr>\n<td>第一人称</td>\n<td>复数</td>\n<td>we</td>\n<td>us</td>\n<td>our</td>\n<td>ours</td>\n<td>ourselves</td>\n</tr>\n<tr>\n<td>第二人称</td>\n<td>单数 / 复数</td>\n<td>you</td>\n<td>you</td>\n<td>your</td>\n<td>yours</td>\n<td>yourself (单)</td>\n</tr>\n<tr>\n<td>第二人称</td>\n<td>复数</td>\n<td>you</td>\n<td>you</td>\n<td>your</td>\n<td>yours</td>\n<td>yourselves</td>\n</tr>\n<tr>\n<td>第三人称</td>\n<td>单数 (男)</td>\n<td>he</td>\n<td>him</td>\n<td>his</td>\n<td>his</td>\n<td>himself</td>\n</tr>\n<tr>\n<td>第三人称</td>\n<td>单数 (女)</td>\n<td>she</td>\n<td>her</td>\n<td>her</td>\n<td>hers</td>\n<td>herself</td>\n</tr>\n<tr>\n<td>第三人称</td>\n<td>单数 (中性)</td>\n<td>it</td>\n<td>it</td>\n<td>its</td>\n<td>its</td>\n<td>itself</td>\n</tr>\n<tr>\n<td>第三人称</td>\n<td>复数</td>\n<td>they</td>\n<td>them</td>\n<td>their</td>\n<td>theirs</td>\n<td>themselves</td>\n</tr>\n</tbody>\n</table>\n<h5 id=\"12-人称代词的格\"><a class=\"anchor\" href=\"#12-人称代词的格\">#</a> 1.2、人称代词的 ' 格'</h5>\n<pre><code>I saw him.\nHe also saw me.\n</code></pre>\n<hr />\n",
            "tags": [
                "English",
                "English"
            ]
        },
        {
            "id": "https://aynya.github.io/java%E7%AC%94%E8%AE%B0/",
            "url": "https://aynya.github.io/java%E7%AC%94%E8%AE%B0/",
            "title": "java笔记",
            "date_published": "2025-01-14T16:00:00.000Z",
            "content_html": "<h3 id=\"面向对象\"><a class=\"anchor\" href=\"#面向对象\">#</a> 面向对象</h3>\n<h4 id=\"对象\"><a class=\"anchor\" href=\"#对象\">#</a> 对象</h4>\n<p>1、对象是啥？如何得到<br />\n对象就是一种特殊的数据结构。对象是用类 new 出来的，有了类就可以创建出对象</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token number\">1</span>、变量，用来说明对象可以处理什么数据</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token number\">2</span>、方法，描述对象有什么功能</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h4 id=\"构造器\"><a class=\"anchor\" href=\"#构造器\">#</a> 构造器</h4>\n<p>构造器是什么样子的？</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>构造器有什么特点？<br />\n创建对象时，对象回去调用构造器</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>构造器的常见应用场景<br />\n创建对象时，同时完成对对象成员变量的初始化赋值</p>\n<p>构造器的注意事项<br />\n 1、类默认自带一个<mark>无参构造器</mark><br />\n 2、如果为类定义了一个有参数构造器，类默认的无参构造器就<mark>没有了</mark>，此时如果还想使用无参构造器，就必须手写一个无参构造器出来。</p>\n<hr />\n<h4 id=\"this关键字\"><a class=\"anchor\" href=\"#this关键字\">#</a> this 关键字</h4>\n<p>this 就是一个变量，可以用在方法中，来拿到当前对象<br />\n那个对象调用方法，this 就指向哪一个对象，也就是拿到哪一个对象</p>\n<p>this 可以用来解决对象的成员变量与方法内部变量的名称一样时，导致访问冲突问题的</p>\n<hr />\n<h4 id=\"封装\"><a class=\"anchor\" href=\"#封装\">#</a> 封装</h4>\n<p>封装就是用类设计对象处理某一个事物的数据时，应该要把处理的数据，以及处理这些数据的方法设计到一个对象中去。<br />\n面向对象的三大特征：封装，继承，多态</p>\n<p>封装的设计规范：合理隐藏，合理暴露</p>\n<p>公开成员，可以使用 public 修饰<br />\n隐藏成员，可以使用 private 修饰</p>\n<hr />\n<h4 id=\"实体类\"><a class=\"anchor\" href=\"#实体类\">#</a> 实体类</h4>\n<p>实体类的成员变量必须私有，且要为他们提供 get，set 方法；必须有无参构造器<br />\n仅仅只是一个用来保存数据的 java 类，可以用它创建对象，保存某个事物的数据</p>\n<p>实体类的应用场景：实体类对应的是软件开发里比较流行的开发方式 数据和数据的业务处理相分离</p>\n<hr />\n<h4 id=\"static\"><a class=\"anchor\" href=\"#static\">#</a> static</h4>\n<h5 id=\"变量\"><a class=\"anchor\" href=\"#变量\">#</a> 变量</h5>\n<p>叫静态，可以修饰成员变量、成员方法</p>\n<p>static 修饰的成员变量叫类变量（静态成员变量），<mark>类名。静态变量</mark>（推荐），对象名。静态变量（不推荐）</p>\n<p>无 static 修饰的成员变量叫实例变量（对象变量），属于对象，每个对象中都有一份。</p>\n<p>静态变量：数据只需要一份，且需要被共享时（访问，修改）<br />\n实例变量：每个对象都要有一份，数据各不同</p>\n<p>访问自己类中的类变量，可以省略类名不写，在某个类中访问其他类的类变量，必须带类名访问。</p>\n<h5 id=\"方法\"><a class=\"anchor\" href=\"#方法\">#</a> 方法</h5>\n<p>static 修饰的成员方法叫<mark>静态方法</mark>，属于类，可以直接用类名访问，也可以用对象访问<br />\n<mark>类名。静态方法（推荐）</mark><br />\n对象名。静态方法（不推荐）<br />\n无 static 修饰的成员方法叫<mark>实例方法</mark>（对象方法），属于对象只能用对象访问</p>\n<p>静态方法可以用来设计工具类<br />\n工具类中的方法都是<mark>静态方法</mark>，每个类方法都是用来完成一个功能<br />\n提高了代码的复用性；调用方便，提高了开发效率</p>\n<p>如果工具类使用实例方法，实例方法需要创建对象来调用，会<mark>浪费内存</mark></p>\n<p>工具类不需要创建对象，<mark>建议将工具类的构造器私有化</mark></p>\n<p>静态方法中可以直接访问静态成员，不可以直接访问实例成员<br />\n实例方法中既可以直接访问静态静态成员，也可以直接访问实例成员<br />\n实例方法中可以出现 this 关键字，静态方法中不可以出现 this 关键字</p>\n<hr />\n<h4 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h4>\n<h5 id=\"继承-2\"><a class=\"anchor\" href=\"#继承-2\">#</a> 继承</h5>\n<p>java 中提供一个关键字 extends，用这个关键字可以让一个类与另一个类建立起父子关系</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>子类能够继承父类的<mark>非私有成员</mark>（成员变量，成员方法）<br />\n子类的对象是由子类和父类共同完成的</p>\n<hr />\n<h5 id=\"权限修饰符\"><a class=\"anchor\" href=\"#权限修饰符\">#</a> 权限修饰符</h5>\n<p>用来限制类中的成员（成员变量，成员方法， 构造器）能够被访问的范围<br />\n private：只能本类<br />\n缺省：本类，同一个包中的类<br />\n protected：本类，同一个包中的类，子孙类中<br />\n public：任意位置</p>\n<p>修饰符\t\t\t本类\t\t同一个包中的类\t\t子孙类\t\t任意类<br />\n private\t\t\t1                             0                                  0                      0<br />\n 缺省\t\t\t     1                             1                                  0                      0\t<br />\nprotected                   1                             1                                  1                      0<br />\npublic                          1                             1                                  1                      1</p>\n<hr />\n<h5 id=\"继承的特点\"><a class=\"anchor\" href=\"#继承的特点\">#</a> 继承的特点</h5>\n<p>在子类方法中访问其他成员（成员变量，成员方法），是依照<mark>就近原则</mark>的<br />\n先在子类局部范围内找，然后子类成员范围内找，然后父类成员范围内找，如果父类范围还没有找到则报错。</p>\n<p>如果出现重名的成员，会优先使用子类，可以通过 ==super.== 关键字指定访问父类成员。</p>\n<p>java 中类是单继承的，一个类只能继承一个直接父类。</p>\n<p>object 是所有类的祖宗类。</p>\n<hr />\n<h5 id=\"方法重写\"><a class=\"anchor\" href=\"#方法重写\">#</a> 方法重写</h5>\n<p>当子类觉得父类中的某个方法不好用，或者无法满足自己的需求时，子类可以重写一个方法名称，参数列表一样的方法，去覆盖父类的这个方法。</p>\n<p>子类重写父类方法时，访问权限必须大于或等于父类该方法的权限<br />\n重写的方法返回值类型，必须与被重写方法的返回类型一样，或者范围更小<br />\n<mark>私有方法、静态方法</mark> 不能被重写，如果重写会报错。</p>\n<hr />\n<h5 id=\"子类构造器\"><a class=\"anchor\" href=\"#子类构造器\">#</a> 子类构造器</h5>\n<p>子类的全部构造器都会先调用父类的构造器，再执行自己</p>\n<p>默认情况下，子类全部构造器的第一行代码都是 super ()，他会调用父类的无参数构造器。<br />\n如果父类没有无参构造器，则我们必须在子类构造器的第一行手写 super，指定去调用父类的有参数构造器。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Teacher</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\ta</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\t<span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> a</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"this调用兄弟构造器\"><a class=\"anchor\" href=\"#this调用兄弟构造器\">#</a> this () 调用兄弟构造器</h5>\n<p>在任意类的构造器中，是可以通过 this (...) 去调用该类的其他构造器的。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> schoolName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"hhh\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> name<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> schoolName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>schoolName <span class=\"token operator\">=</span> schoolName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>this (...), super (...) 都只能放在构造器的第一行，因此，有了 this (...) 就不能写 super (...) 了，反之亦然</p>\n<hr />\n<h4 id=\"多态\"><a class=\"anchor\" href=\"#多态\">#</a> 多态</h4>\n<h5 id=\"认识多态\"><a class=\"anchor\" href=\"#认识多态\">#</a> 认识多态</h5>\n<p>多态是在继承 / 实现情况下的一种现象，表现为：对象多态，行为多态</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">People</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">People</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>多态的<mark>前提</mark>：有继承 / 实现关系；存在父类引用子类对象；<mark>存在方法重写</mark></p>\n<p>多态是<mark>对象，行为的多态</mark>，java 中的 == 属性（成员变量）== 不谈多态。</p>\n<hr />\n<h5 id=\"多态的好处\"><a class=\"anchor\" href=\"#多态的好处\">#</a> 多态的好处</h5>\n<p>在多态形式下，右边对象是解耦合的，更便于扩展和维护</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">People</span> p1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Student</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>定义方法时，使用父类类型的形参，可以接收一切子类对象，扩展性更强，更便利。</p>\n<p>多态下<mark>不能使用子类的独有功能</mark></p>\n<hr />\n<h5 id=\"多态下的类型转换\"><a class=\"anchor\" href=\"#多态下的类型转换\">#</a> 多态下的类型转换</h5>\n<p>自动类型转换：父类 变量名 = new 子类 ()；</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">People</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>强制类型转换：子类 变量名 = (子类) 父类变量</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Teacher</span> t <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">)</span>p<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>存在继承 / 实现关系就可以在编译阶段进行强制类型转换，编译阶段不会报错。<br />\n运行时，如果发现对象的真实类型与强制转换后的类型不同，就会报<mark>类型准换异常</mark> (ClassCastException) 的错误出来</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">People</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Teacher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Student</span> s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Student</span><span class=\"token punctuation\">)</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// java.lang.ClassCastException</span></pre></td></tr></table></figure><p><mark>强转前</mark>，java 建议：使用<mark> instanceof</mark> 关键字，判断当前对象的真实类型，再强制转换。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Student</span></pre></td></tr></table></figure><hr />\n<h4 id=\"final\"><a class=\"anchor\" href=\"#final\">#</a> final</h4>\n<h5 id=\"认识final\"><a class=\"anchor\" href=\"#认识final\">#</a> 认识 final</h5>\n<p>final 关键字是最终，可以修饰：类、方法、变量<br />\n修饰类：该类被称为最终类，特点是不能被继承了<br />\n修饰方法：该方法被称为最终方法，特点是不能被重写了<br />\n修饰变量：该变量有且仅有被赋值一次。</p>\n<p>final 修饰基本类型的变量，变量存储的<mark>数据</mark>不能被改变<br />\n final 修饰的引用类型的变量，变量存储的<mark>地址</mark> 不能被改变，但地址指向的对象内容可以改变</p>\n<p><mark>static final</mark> 修饰的成员变量被称为常量<br />\n作用：常用于记录系统的配置信息</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Constant</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">String</span> <span class=\"token constant\">SCHOOL_NAME</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"船只教育\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>变量名的命名规范：建议用大写英文单词，多个单词间使用下划线连接起来</mark></p>\n<p>使用常量记录系统配置信息的优势：代码可读性好，可维护性也好。<br />\n程序编译后，常量会被” 宏替换 “：出现常量的地方全部会被替换成其字面量。可以保证使用常量和直接使用字面量的性能是一样的。</p>\n<hr />\n<h5 id=\"单例类设计模式\"><a class=\"anchor\" href=\"#单例类设计模式\">#</a> 单例类（设计模式）</h5>\n<p>具体问题的最优解决方案，确保一个类只能创建一个对象。</p>\n<p>单例：把类的构造器私有，定义一个静态变量存储类的一个对象，提供一个静态方法返回对象。</p>\n<p>在任务管理器对象时，获取运行时对象。</p>\n<p>饿汉式单例：拿对象前，对象早就创建好了</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">A</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">A</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>懒汉式单例：拿对象时，才开始创建对象。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">B</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token class-name\">B</span> <span class=\"token function\">getObject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\t\tb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\t<span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"枚举类\"><a class=\"anchor\" href=\"#枚举类\">#</a> 枚举类</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>枚举类都是最终类，不可以被继承，枚举类都是继承 java.lang.Enum 类的<br />\n枚举类的第一行只能罗列一些名称，这些名称都是常量，并且每个常量会记住枚举类的一个对象<br />\n枚举类的构造器都是私有的，因此，枚举类对外不能创建对象。<br />\n编译器对枚举类新增了几个方法。</p>\n<hr />\n<h5 id=\"枚举类的常见应用场景\"><a class=\"anchor\" href=\"#枚举类的常见应用场景\">#</a> 枚举类的常见应用场景</h5>\n<p>枚举类适合做信息分类和标致</p>\n<hr />\n<h5 id=\"抽象类\"><a class=\"anchor\" href=\"#抽象类\">#</a> 抽象类</h5>\n<p>关键字：<mark>abstract</mark>，可以用来修饰类，成员方法<br />\n abstract 修饰类，这个类就是抽象类<br />\n abstract 修饰方法，这个方法就是抽象方法</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> 类名<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> 返回值 方法名<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>抽象类中不一定要有抽象方法，有抽象方法的类必须是抽象类<br />\n类有的成员：成员变量，方法，构造器，抽象类都可以有<br />\n抽象类的<mark>主要特点</mark>：抽象类不能创建对象，仅作为一种特殊的父类，让子类继承并实现<br />\n一个类继承抽象类，必须重写完抽象类的全部抽象方法，否则这个类也必须定义成抽象类。</p>\n<hr />\n<h5 id=\"抽象类的好处\"><a class=\"anchor\" href=\"#抽象类的好处\">#</a> 抽象类的好处</h5>\n<p>父类知道每个子类要做的某个行为，但每个子类要做的情况不一样，父类就定义成抽象方法，交给子类去重写实现，设计这样的抽象类，就是为了更好的支持多态。</p>\n<hr />\n<h5 id=\"模板方法\"><a class=\"anchor\" href=\"#模板方法\">#</a> 模板方法</h5>\n<p>提供一个方法作为完成某类功能的模板，模板方法封装了每个实现步骤，但允许子类提供特定步骤的实现<br />\n模板方法设计某事可以：提高代码的复用，并简化子类设计</p>\n<p>写法：<br />\n1、定义一个抽象类<br />\n 2、在里面定义 2 个方法<br />\n一个是<mark>模板方法</mark>，把共同的实现步骤放里面<br />\n一个是抽象方法：不确定的步骤，交给<mark>具体的子类实现</mark></p>\n<p>模板方法是给子类直接使用的，不能被子类重写，建议使用<mark> final 关键字</mark>修饰模板方法<br />\n一旦子类重写了模板方法，模板方法就失效了。</p>\n<hr />\n<h4 id=\"接口\"><a class=\"anchor\" href=\"#接口\">#</a> 接口</h4>\n<h5 id=\"接口概述\"><a class=\"anchor\" href=\"#接口概述\">#</a> 接口概述</h5>\n<p>java 提供了一个关键字 interface 定义出接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> 接口名<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 成员变量（常量）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 成员方法（抽象方法）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>注意：<mark>接口不能创建对象</mark><br />\n接口是用来被<mark>实现的</mark>，实现接口的类型称为<mark>实现类</mark>，一个类可以实现多个接口</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>修饰符 <span class=\"token keyword\">class</span> 实现类名 <span class=\"token keyword\">implements</span> 接口<span class=\"token number\">1</span>、接口<span class=\"token number\">2</span>、接口<span class=\"token number\">3.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 实现类实现多个接口，必须重写完全部接口的全部抽象方法，否则实现类需要定义为抽象类</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"接口好处\"><a class=\"anchor\" href=\"#接口好处\">#</a> 接口好处</h5>\n<p>弥补了类单继承的不足，一个类同时可以实现多个接口，使类的角色更多，功能更强大<br />\n让程序可以面向接口编程，更利于程序的解耦合。</p>\n<hr />\n<h5 id=\"接口新增的三种方法\"><a class=\"anchor\" href=\"#接口新增的三种方法\">#</a> 接口新增的三种方法</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 默认方法（实例方法）：使用 default 修饰，默认会被加 public 修饰</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token comment\">// 只能使用接口的实现类对象调用</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">default</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token comment\">// 私有方法：必须用 private 修饰</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token comment\">// 接口内部调用</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token comment\">// 类方法，使用 static 修饰，默认 public</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token comment\">// 只能用接口名调用</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">test3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr />\n<h5 id=\"接口的注意事项\"><a class=\"anchor\" href=\"#接口的注意事项\">#</a> 接口的注意事项</h5>\n<p>1、接口与接口可以多继承：一个接口可以继承多个接口<br />\n 2、一个接口继承多个接口，如果多个接口中存在方法签名冲突、则此时不支持多继承，也不支持多实现。<br />\n3、一个类继承了父类，又同时实现了接口，如果父亲中和接口中有同名的默认方法，实现类会先用父类的<br />\n 4、一个类实现了多个接口，如果多个接口中存在同名的默认方法，可以不冲突，这个类方法重写即可。</p>\n<hr />\n<h5 id=\"接口与抽象类\"><a class=\"anchor\" href=\"#接口与抽象类\">#</a> 接口与抽象类</h5>\n<p>相同点：<br />\n1、都是抽象形式，都可以有抽象方法，都不能创建对象。<br />\n2、都是派生子类形式，抽象类是被子类继承使用，接口是被实现类实现。<br />\n3、一个类继承抽象类，或者实现接口，都必须重写他们的抽象方法，否则自己称为抽象类或者报错。<br />\n4、都支持多态，能够实现解耦合<br />\n不同点：<br />\n1、抽象类中可以定义类的全部普通成员，接口只能定义常量，抽象方法（JDK8 新增的三种方法）<br />\n2、抽象类只能被类单继承，接口可以被类多实现。<br />\n3、一个类继承抽象类就不能继承其他类，一个接口实现了接口还可以继承其他类或者实现其他接口<br />\n 4、抽象类体现模板思想，更利于做父类，实现代码的复用<br />\n 5、接口更适合做功能的解耦合，解耦合性更灵活。</p>\n<h4 id=\"类中的成分\"><a class=\"anchor\" href=\"#类中的成分\">#</a> 类中的成分</h4>\n<h5 id=\"代码块\"><a class=\"anchor\" href=\"#代码块\">#</a> 代码块</h5>\n<p>代码块是类的 5 大成分之一（成员变量，构造器，方法，<mark>代码块</mark>，内部类）<br />\n代码块分为两种：<br />\n静态代码块：<br />\n格式：static {}<br />\n 特点：类加载时自动执行，由于类只会加载一次，所以静态代码块也只会执行一次。<br />\n作用：完成类的初始化，例如：对静态变量的初始化赋值。<br />\n实例代码块：<br />\n格式：{}<br />\n 特点：每次创建对象时，执行实例代码块，并在构造器前执行。<br />\n作用：和构造器一样，都是用来完成对象的初始化，例如：对实例变量进行初始化赋值</p>\n<hr />\n<h5 id=\"内部类\"><a class=\"anchor\" href=\"#内部类\">#</a> 内部类</h5>\n<p><mark>成员内部类</mark><br />\n就是类中的一个普通成员，类似前面学过的成员变量，成员方法。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建对象的格式</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>外部类名<span class=\"token punctuation\">.</span>内部类名 对象名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 外部类<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> 内部类<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inner</span> in  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>成员内部类中访问其他成员的特点：<br />\n1、成员内部类中可以直接访问外部类的实例成员，静态成员。<br />\n2、成员内部类的实例方法中，可以直接拿到当前外部类对象，格式是：外部类名.this。</p>\n<p><mark>静态内部类</mark><br />\n有 static 修饰的内部类，属于外部类自己特有</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Outer</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Inner</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>外部类<span class=\"token punctuation\">.</span>内部类名<span class=\"token punctuation\">.</span>对象名 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> 外部类<span class=\"token punctuation\">.</span>内部类<span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inner</span><span class=\"token punctuation\">.</span>in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Outer<span class=\"token punctuation\">.</span>Inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><mark>匿名内部类</mark><br />\n是一种特殊的局部内部类<br />\n所谓匿名：指的是程序员不需要为这个类声明名字，默认有个隐藏的名字。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">new</span> 类或接口<span class=\"token punctuation\">(</span>参数值<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t类体<span class=\"token punctuation\">(</span>一般是方法重写<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Animal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token annotation punctuation\">@Override</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">cry</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>特点：匿名内部类本质就是一个子类，并会立即创建出一个子类对象。<br />\n作用：用于更方便的创建子类对象。</p>\n<hr />\n<h5 id=\"lambda表达式\"><a class=\"anchor\" href=\"#lambda表达式\">#</a> lambda 表达式</h5>\n<p>可以用于替代某些匿名内部类对象，从而让程序更简洁，可读性更好。</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span>被重写方法的形参列表<span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t被重写方法的代码体<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><mark>注意</mark>：lambda 表达式只能替代函数式接口的匿名内部类<br />\n函数式接口：有且仅有一个抽象方法的接口，注意大部分函数式接口上面都会有一个 @FunctionalInterface 的注释，用来注解用于约束当前接口必须是函数式接口。</p>\n<p>lambda 表达式的省略规则：<br />\n1、参数类型全部可以省略不写<br />\n 2、如果只有一个参数，参数类型省略的同时 () 也可以省略，但多个参数不能省略 ()<br />\n 3、如果 lambda 表达式中只有一行代码，大括号可以不写，同时要省略分号 &quot;;&quot; 如果这行代码是 return 语句，也必须去掉 return。</p>\n<hr />\n<h4 id=\"方法引用\"><a class=\"anchor\" href=\"#方法引用\">#</a> 方法引用</h4>\n<h5 id=\"静态方法引用\"><a class=\"anchor\" href=\"#静态方法引用\">#</a> 静态方法引用</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类名<span class=\"token operator\">::</span>静态方法</pre></td></tr></table></figure><p>使用场景：如果某个 Lambda 表达式只有一个静态方法，并且”-&gt;“前后参数的形式一致，就可以使用静态方法引用。</p>\n<hr />\n<h5 id=\"实例方法引用\"><a class=\"anchor\" href=\"#实例方法引用\">#</a> 实例方法引用</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>对象名<span class=\"token operator\">::</span>实例方法</pre></td></tr></table></figure><p>使用场景：如果某个 Lambda 表达式里只是通过对象名称调用一个实例方法，并且 &quot;-&gt;&quot; 前后参数的形式一致，就可以使用实例方法引用。</p>\n<hr />\n<h5 id=\"特定类的方法应用\"><a class=\"anchor\" href=\"#特定类的方法应用\">#</a> 特定类的方法应用</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>特定类的名称<span class=\"token operator\">::</span>方法</pre></td></tr></table></figure><p>使用场景：如果某个 Lambda 表达式只是调用一个特定类型的实例方法，并且前面参数列表中的<mark>第一个参数</mark>是作为方法的主调，后面的所有参数都是作为该实例方法的入参的，则此时就可以使用特定类型的方法引用。</p>\n<hr />\n<h5 id=\"构造器引用\"><a class=\"anchor\" href=\"#构造器引用\">#</a> 构造器引用</h5>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>类名<span class=\"token operator\">::</span><span class=\"token keyword\">new</span></pre></td></tr></table></figure><p>使用场景：如果某个 Lambda 表达式里只是在创建对象，并且”-&gt;“前后参数情况一致，就可以使用构造器引用。</p>\n<hr />\n<h3 id=\"常用api\"><a class=\"anchor\" href=\"#常用api\">#</a> 常用 API</h3>\n<h4 id=\"string-创建字符串对象的方式\"><a class=\"anchor\" href=\"#string-创建字符串对象的方式\">#</a> String 创建字符串对象的方式</h4>\n<ul>\n<li>方式一: Java 程序中的所有字符串文字 (例如 &quot;abc&quot;) 都为此类的对象.</li>\n</ul>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">String</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>方式二：调用 String 类的构造器初始化字符串对象</li>\n</ul>\n<h4 id=\"string-提供的常用方法\"><a class=\"anchor\" href=\"#string-提供的常用方法\">#</a> String 提供的常用方法</h4>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 返回字符串的长度</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 获取某个索引的字符并返回</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span> <span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 将当前字符串转换成字符数组返回</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">toCharArray</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 判断当前字符串与另一个字符串的内容一样，一样返回 true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> anObject<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 判断当前字符串与另一个字符串的内容一样，一样返回 true (忽略大小写)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equalsIgnoreCase</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> anotherString<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 根据开始和结束索引来进行截取，得到新的字符串返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> beginIndex<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 使用新的值， 将字符串中的旧值替换，得到新的字符串</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> target<span class=\"token punctuation\">,</span> <span class=\"token class-name\">CharSequence</span> replacement<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 判断字符串中是否包含了某个字符串</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CharSequence</span> s<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token comment\">// 判断字符串是否以某个字符串内容开头，开头返回 true，反之</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> prefik<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token comment\">// 把字符串按照某个字符串内容进行分割，并返回字符串数组</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> regex<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n<h3 id=\"arraylist集合\"><a class=\"anchor\" href=\"#arraylist集合\">#</a> ArrayList 集合</h3>\n<p>常用方法：</p>\n<figure class=\"highlight java\"><figcaption data-lang=\"java\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个空的集合对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 将指定的元素添加到此集合的末尾</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">E</span> e<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 在此集合中的指定位置插入指定的元素</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 返回指定元素索引处的元素</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 返回集合中元素的个数</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">// 删除指定索引处的元素，返回被删除的元素</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 删除指定的元素，返回删除是否成功</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> o<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token comment\">// 修改指定索引处的元素，返回被修改的元素</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">E</span> element<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr />\n",
            "tags": [
                "java",
                "java"
            ]
        },
        {
            "id": "https://aynya.github.io/hello-world/",
            "url": "https://aynya.github.io/hello-world/",
            "title": "Hello World",
            "date_published": "2025-01-13T10:41:34.161Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}